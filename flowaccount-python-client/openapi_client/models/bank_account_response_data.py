# coding: utf-8

"""
    FlowAccount Open API

    # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64  # noqa: E501

    The version of the OpenAPI document: 2-oas3
    Contact: developer_support@flowaccount.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BankAccountResponseData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bank_account_id': 'int',
        'bank_account_number': 'str',
        'bank_account_name': 'str',
        'bank_account_type': 'int',
        'bank_branch': 'str',
        'bank_id': 'int',
        'bank_name': 'str'
    }

    attribute_map = {
        'bank_account_id': 'bankAccountId',
        'bank_account_number': 'bankAccountNumber',
        'bank_account_name': 'bankAccountName',
        'bank_account_type': 'bankAccountType',
        'bank_branch': 'bankBranch',
        'bank_id': 'bankId',
        'bank_name': 'bankName'
    }

    def __init__(self, bank_account_id=None, bank_account_number=None, bank_account_name=None, bank_account_type=None, bank_branch=None, bank_id=None, bank_name=None, local_vars_configuration=None):  # noqa: E501
        """BankAccountResponseData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bank_account_id = None
        self._bank_account_number = None
        self._bank_account_name = None
        self._bank_account_type = None
        self._bank_branch = None
        self._bank_id = None
        self._bank_name = None
        self.discriminator = None

        if bank_account_id is not None:
            self.bank_account_id = bank_account_id
        if bank_account_number is not None:
            self.bank_account_number = bank_account_number
        if bank_account_name is not None:
            self.bank_account_name = bank_account_name
        if bank_account_type is not None:
            self.bank_account_type = bank_account_type
        if bank_branch is not None:
            self.bank_branch = bank_branch
        if bank_id is not None:
            self.bank_id = bank_id
        if bank_name is not None:
            self.bank_name = bank_name

    @property
    def bank_account_id(self):
        """Gets the bank_account_id of this BankAccountResponseData.  # noqa: E501

        เลข id บัญชีธนาคาร  # noqa: E501

        :return: The bank_account_id of this BankAccountResponseData.  # noqa: E501
        :rtype: int
        """
        return self._bank_account_id

    @bank_account_id.setter
    def bank_account_id(self, bank_account_id):
        """Sets the bank_account_id of this BankAccountResponseData.

        เลข id บัญชีธนาคาร  # noqa: E501

        :param bank_account_id: The bank_account_id of this BankAccountResponseData.  # noqa: E501
        :type: int
        """

        self._bank_account_id = bank_account_id

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this BankAccountResponseData.  # noqa: E501

        เลขบัญชี <br> <ex>Example: 0048620000 </ex>  # noqa: E501

        :return: The bank_account_number of this BankAccountResponseData.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this BankAccountResponseData.

        เลขบัญชี <br> <ex>Example: 0048620000 </ex>  # noqa: E501

        :param bank_account_number: The bank_account_number of this BankAccountResponseData.  # noqa: E501
        :type: str
        """

        self._bank_account_number = bank_account_number

    @property
    def bank_account_name(self):
        """Gets the bank_account_name of this BankAccountResponseData.  # noqa: E501

        ชื่อบัญชี <br> <ex>Example: บัญชีใช้รับเงิน</ex>  # noqa: E501

        :return: The bank_account_name of this BankAccountResponseData.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_name

    @bank_account_name.setter
    def bank_account_name(self, bank_account_name):
        """Sets the bank_account_name of this BankAccountResponseData.

        ชื่อบัญชี <br> <ex>Example: บัญชีใช้รับเงิน</ex>  # noqa: E501

        :param bank_account_name: The bank_account_name of this BankAccountResponseData.  # noqa: E501
        :type: str
        """

        self._bank_account_name = bank_account_name

    @property
    def bank_account_type(self):
        """Gets the bank_account_type of this BankAccountResponseData.  # noqa: E501

        ประเภทบัญชีธนาคาร <br> 1 = บัญชีออมทรัพย์  <br> 3 = บัญชีกระรายวัน <br> 7  = บัญชีฝากประจำ  # noqa: E501

        :return: The bank_account_type of this BankAccountResponseData.  # noqa: E501
        :rtype: int
        """
        return self._bank_account_type

    @bank_account_type.setter
    def bank_account_type(self, bank_account_type):
        """Sets the bank_account_type of this BankAccountResponseData.

        ประเภทบัญชีธนาคาร <br> 1 = บัญชีออมทรัพย์  <br> 3 = บัญชีกระรายวัน <br> 7  = บัญชีฝากประจำ  # noqa: E501

        :param bank_account_type: The bank_account_type of this BankAccountResponseData.  # noqa: E501
        :type: int
        """

        self._bank_account_type = bank_account_type

    @property
    def bank_branch(self):
        """Gets the bank_branch of this BankAccountResponseData.  # noqa: E501

        ชื่อสาขาธนาคาร  # noqa: E501

        :return: The bank_branch of this BankAccountResponseData.  # noqa: E501
        :rtype: str
        """
        return self._bank_branch

    @bank_branch.setter
    def bank_branch(self, bank_branch):
        """Sets the bank_branch of this BankAccountResponseData.

        ชื่อสาขาธนาคาร  # noqa: E501

        :param bank_branch: The bank_branch of this BankAccountResponseData.  # noqa: E501
        :type: str
        """

        self._bank_branch = bank_branch

    @property
    def bank_id(self):
        """Gets the bank_id of this BankAccountResponseData.  # noqa: E501

        เลข id ธนาคาร  # noqa: E501

        :return: The bank_id of this BankAccountResponseData.  # noqa: E501
        :rtype: int
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this BankAccountResponseData.

        เลข id ธนาคาร  # noqa: E501

        :param bank_id: The bank_id of this BankAccountResponseData.  # noqa: E501
        :type: int
        """

        self._bank_id = bank_id

    @property
    def bank_name(self):
        """Gets the bank_name of this BankAccountResponseData.  # noqa: E501

        ชื่อธนาคาร  # noqa: E501

        :return: The bank_name of this BankAccountResponseData.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this BankAccountResponseData.

        ชื่อธนาคาร  # noqa: E501

        :param bank_name: The bank_name of this BankAccountResponseData.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankAccountResponseData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BankAccountResponseData):
            return True

        return self.to_dict() != other.to_dict()
