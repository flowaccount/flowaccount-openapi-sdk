# coding: utf-8

"""
    FlowAccount Open API

    FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test  # noqa: E501

    The version of the OpenAPI document: 2-oas3
    Contact: developer@flowaccount.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class WithholidingTaxItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'income_type': 'int',
        'description': 'str',
        'tax_rate': 'float',
        'tax_amount': 'float',
        'tax_amount_no_vat': 'float',
        'withheld': 'float',
        'total': 'float',
        'vat_type': 'int'
    }

    attribute_map = {
        'income_type': 'incomeType',
        'description': 'description',
        'tax_rate': 'taxRate',
        'tax_amount': 'taxAmount',
        'tax_amount_no_vat': 'taxAmountNoVat',
        'withheld': 'withheld',
        'total': 'total',
        'vat_type': 'vatType'
    }

    def __init__(self, income_type=1, description=None, tax_rate=None, tax_amount=None, tax_amount_no_vat=None, withheld=None, total=None, vat_type=1, local_vars_configuration=None):  # noqa: E501
        """WithholidingTaxItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._income_type = None
        self._description = None
        self._tax_rate = None
        self._tax_amount = None
        self._tax_amount_no_vat = None
        self._withheld = None
        self._total = None
        self._vat_type = None
        self.discriminator = None

        self.income_type = income_type
        if description is not None:
            self.description = description
        self.tax_rate = tax_rate
        self.tax_amount = tax_amount
        self.tax_amount_no_vat = tax_amount_no_vat
        self.withheld = withheld
        if total is not None:
            self.total = total
        self.vat_type = vat_type

    @property
    def income_type(self):
        """Gets the income_type of this WithholidingTaxItem.  # noqa: E501

        ประเภทเงินได้ที่จ่าย <br> 1 = 1. เงินเดือน ค่าจ้าง เบี้ยเลี้ยง โบนัส ฯลฯ ตามมาตรา 40 (1) <br> 3 = 2. ค่าธรรมเนียม ค่านายหน้า ฯลฯ ตามมาตรา 40 (2) <br> 5 = 3. ค่าแห่งลิขสิทธิ์ ฯลฯ ตามมาตรา 40(3) <br> 7 = 4. (ก) ค่าดอกเบี้ย ฯลฯ ตามมาตรา 40(4) (ก) <br> 11 = 4. (ข)(1.1) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราร้อยละ 25 ของกำไรสุทธิ <br> 13 = 4. (ข)(1.2) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราร้อยละ 20 ของกำไรสุทธิ <br> 15 = 4. (ข)(1.3) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราอื่น ของกำไรสุทธิ (กรุณาระบุ) <br> 17 = 4. (ข)(2.1) กำไรสุทธิของกิจการที่ได้รับยกเว้นเงินได้นิติบุคคล <br> 19 = 4. (ข)(2.2) เงินปันผลหรือเงินส่วนแบ่งของกำไรที่ได้รับยกเว้น... <br> 21 = 4. (ข)(2.3) กำไรสุทธิส่วนที่ได้หักผลขาดทุนสิทธิยกมาไม่เกิน 5 ปี... <br> 23 = 4. (ข)(2.4) กำไรที่รับรู้ทางบัญชีโดยวิธีส่วนได้เสีย (equity method) <br> 25 = 4. (ข)(2.5) อื่นๆ (กรุณาระบุ) <br> 27 = 5. การจ่ายเงินได้ที่ต้องหักภาษี ณ ที่จ่ายตามคำสั่งกรมสรรพากร.... <br> 29 = 6. อื่นๆ (กรุณาระบุ)  # noqa: E501

        :return: The income_type of this WithholidingTaxItem.  # noqa: E501
        :rtype: int
        """
        return self._income_type

    @income_type.setter
    def income_type(self, income_type):
        """Sets the income_type of this WithholidingTaxItem.

        ประเภทเงินได้ที่จ่าย <br> 1 = 1. เงินเดือน ค่าจ้าง เบี้ยเลี้ยง โบนัส ฯลฯ ตามมาตรา 40 (1) <br> 3 = 2. ค่าธรรมเนียม ค่านายหน้า ฯลฯ ตามมาตรา 40 (2) <br> 5 = 3. ค่าแห่งลิขสิทธิ์ ฯลฯ ตามมาตรา 40(3) <br> 7 = 4. (ก) ค่าดอกเบี้ย ฯลฯ ตามมาตรา 40(4) (ก) <br> 11 = 4. (ข)(1.1) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราร้อยละ 25 ของกำไรสุทธิ <br> 13 = 4. (ข)(1.2) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราร้อยละ 20 ของกำไรสุทธิ <br> 15 = 4. (ข)(1.3) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราอื่น ของกำไรสุทธิ (กรุณาระบุ) <br> 17 = 4. (ข)(2.1) กำไรสุทธิของกิจการที่ได้รับยกเว้นเงินได้นิติบุคคล <br> 19 = 4. (ข)(2.2) เงินปันผลหรือเงินส่วนแบ่งของกำไรที่ได้รับยกเว้น... <br> 21 = 4. (ข)(2.3) กำไรสุทธิส่วนที่ได้หักผลขาดทุนสิทธิยกมาไม่เกิน 5 ปี... <br> 23 = 4. (ข)(2.4) กำไรที่รับรู้ทางบัญชีโดยวิธีส่วนได้เสีย (equity method) <br> 25 = 4. (ข)(2.5) อื่นๆ (กรุณาระบุ) <br> 27 = 5. การจ่ายเงินได้ที่ต้องหักภาษี ณ ที่จ่ายตามคำสั่งกรมสรรพากร.... <br> 29 = 6. อื่นๆ (กรุณาระบุ)  # noqa: E501

        :param income_type: The income_type of this WithholidingTaxItem.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and income_type is None:  # noqa: E501
            raise ValueError("Invalid value for `income_type`, must not be `None`")  # noqa: E501

        self._income_type = income_type

    @property
    def description(self):
        """Gets the description of this WithholidingTaxItem.  # noqa: E501

        รายละเอียดหัก ณ ที่จ่าย <br> สำหรับประเภทเงินได้ที่จ่าย ข้อ 4.(ข)(2.5) อื่นๆ และ ข้อ 6. อื่นๆ  # noqa: E501

        :return: The description of this WithholidingTaxItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WithholidingTaxItem.

        รายละเอียดหัก ณ ที่จ่าย <br> สำหรับประเภทเงินได้ที่จ่าย ข้อ 4.(ข)(2.5) อื่นๆ และ ข้อ 6. อื่นๆ  # noqa: E501

        :param description: The description of this WithholidingTaxItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tax_rate(self):
        """Gets the tax_rate of this WithholidingTaxItem.  # noqa: E501

        อัตราภาษี หัก ณ ที่จ่าย <br> 3 = อัตราภาษี 3% <br> 5 = อัตราภาษี 5% <br> 0.5 = อัตราภาษี 0.5% <br> 0.75 = อัตราภาษี 0.75% <br> 1 = อัตราภาษี 1% <br> 2 = อัตราภาษี 2% <br> 10 = อัตราภาษี 10% <br> 15 = อัตราภาษี 15% <br> -1 = อัตราภาษีเป็นแบบจำนวนเงิน  # noqa: E501

        :return: The tax_rate of this WithholidingTaxItem.  # noqa: E501
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this WithholidingTaxItem.

        อัตราภาษี หัก ณ ที่จ่าย <br> 3 = อัตราภาษี 3% <br> 5 = อัตราภาษี 5% <br> 0.5 = อัตราภาษี 0.5% <br> 0.75 = อัตราภาษี 0.75% <br> 1 = อัตราภาษี 1% <br> 2 = อัตราภาษี 2% <br> 10 = อัตราภาษี 10% <br> 15 = อัตราภาษี 15% <br> -1 = อัตราภาษีเป็นแบบจำนวนเงิน  # noqa: E501

        :param tax_rate: The tax_rate of this WithholidingTaxItem.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and tax_rate is None:  # noqa: E501
            raise ValueError("Invalid value for `tax_rate`, must not be `None`")  # noqa: E501

        self._tax_rate = tax_rate

    @property
    def tax_amount(self):
        """Gets the tax_amount of this WithholidingTaxItem.  # noqa: E501

        จำนวนเงินที่นำมาหักภาษี  # noqa: E501

        :return: The tax_amount of this WithholidingTaxItem.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this WithholidingTaxItem.

        จำนวนเงินที่นำมาหักภาษี  # noqa: E501

        :param tax_amount: The tax_amount of this WithholidingTaxItem.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and tax_amount is None:  # noqa: E501
            raise ValueError("Invalid value for `tax_amount`, must not be `None`")  # noqa: E501

        self._tax_amount = tax_amount

    @property
    def tax_amount_no_vat(self):
        """Gets the tax_amount_no_vat of this WithholidingTaxItem.  # noqa: E501

        จำนวนเงินไม่รวมภาษีมูลค่าเพิ่ม  # noqa: E501

        :return: The tax_amount_no_vat of this WithholidingTaxItem.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount_no_vat

    @tax_amount_no_vat.setter
    def tax_amount_no_vat(self, tax_amount_no_vat):
        """Sets the tax_amount_no_vat of this WithholidingTaxItem.

        จำนวนเงินไม่รวมภาษีมูลค่าเพิ่ม  # noqa: E501

        :param tax_amount_no_vat: The tax_amount_no_vat of this WithholidingTaxItem.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and tax_amount_no_vat is None:  # noqa: E501
            raise ValueError("Invalid value for `tax_amount_no_vat`, must not be `None`")  # noqa: E501

        self._tax_amount_no_vat = tax_amount_no_vat

    @property
    def withheld(self):
        """Gets the withheld of this WithholidingTaxItem.  # noqa: E501

        จำนวนเงินภาษีหัก ณ ที่จ่าย  # noqa: E501

        :return: The withheld of this WithholidingTaxItem.  # noqa: E501
        :rtype: float
        """
        return self._withheld

    @withheld.setter
    def withheld(self, withheld):
        """Sets the withheld of this WithholidingTaxItem.

        จำนวนเงินภาษีหัก ณ ที่จ่าย  # noqa: E501

        :param withheld: The withheld of this WithholidingTaxItem.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and withheld is None:  # noqa: E501
            raise ValueError("Invalid value for `withheld`, must not be `None`")  # noqa: E501

        self._withheld = withheld

    @property
    def total(self):
        """Gets the total of this WithholidingTaxItem.  # noqa: E501

        จำนวนเงินหลังหักภาษี ณ ที่จ่าย (taxAmount - withheld = total)  # noqa: E501

        :return: The total of this WithholidingTaxItem.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this WithholidingTaxItem.

        จำนวนเงินหลังหักภาษี ณ ที่จ่าย (taxAmount - withheld = total)  # noqa: E501

        :param total: The total of this WithholidingTaxItem.  # noqa: E501
        :type: float
        """

        self._total = total

    @property
    def vat_type(self):
        """Gets the vat_type of this WithholidingTaxItem.  # noqa: E501

        ภาษีมูลค่าเพิ่ม <br> 1 = รวมภาษีมูลค่าเพิ่ม <br> 3 = ไม่รวมภาษีมูลค่าเพิ่ม <br>7 = ไม่มี/ยกเว้นภาษีมูลค่าเพิ่ม  # noqa: E501

        :return: The vat_type of this WithholidingTaxItem.  # noqa: E501
        :rtype: int
        """
        return self._vat_type

    @vat_type.setter
    def vat_type(self, vat_type):
        """Sets the vat_type of this WithholidingTaxItem.

        ภาษีมูลค่าเพิ่ม <br> 1 = รวมภาษีมูลค่าเพิ่ม <br> 3 = ไม่รวมภาษีมูลค่าเพิ่ม <br>7 = ไม่มี/ยกเว้นภาษีมูลค่าเพิ่ม  # noqa: E501

        :param vat_type: The vat_type of this WithholidingTaxItem.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and vat_type is None:  # noqa: E501
            raise ValueError("Invalid value for `vat_type`, must not be `None`")  # noqa: E501

        self._vat_type = vat_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WithholidingTaxItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WithholidingTaxItem):
            return True

        return self.to_dict() != other.to_dict()
