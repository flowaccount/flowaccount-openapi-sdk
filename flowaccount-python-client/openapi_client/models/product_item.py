# coding: utf-8

"""
    FlowAccount Open API

    FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test    **PostMan Collection**   site: https://www.getpostman.com/collections/01e7c68d7093e2092a64  # noqa: E501

    The version of the OpenAPI document: 2-oas3
    Contact: developer@flowaccount.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ProductItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'document_structure_type': 'str',
        'type': 'int',
        'name': 'str',
        'description': 'str',
        'quantity': 'float',
        'unit_name': 'str',
        'price_per_unit': 'float',
        'total': 'float'
    }

    attribute_map = {
        'document_structure_type': 'documentStructureType',
        'type': 'type',
        'name': 'name',
        'description': 'description',
        'quantity': 'quantity',
        'unit_name': 'unitName',
        'price_per_unit': 'pricePerUnit',
        'total': 'total'
    }

    discriminator_value_class_map = {
        'SimpleProductItem': 'SimpleProductItem',
        'InlineProductItem': 'InlineProductItem'
    }

    def __init__(self, document_structure_type=None, type=1, name=None, description=None, quantity=None, unit_name=None, price_per_unit=None, total=None, local_vars_configuration=None):  # noqa: E501
        """ProductItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._document_structure_type = None
        self._type = None
        self._name = None
        self._description = None
        self._quantity = None
        self._unit_name = None
        self._price_per_unit = None
        self._total = None
        self.discriminator = 'document_structure_type'

        self.document_structure_type = document_structure_type
        if type is not None:
            self.type = type
        self.name = name
        if description is not None:
            self.description = description
        self.quantity = quantity
        if unit_name is not None:
            self.unit_name = unit_name
        self.price_per_unit = price_per_unit
        self.total = total

    @property
    def document_structure_type(self):
        """Gets the document_structure_type of this ProductItem.  # noqa: E501


        :return: The document_structure_type of this ProductItem.  # noqa: E501
        :rtype: str
        """
        return self._document_structure_type

    @document_structure_type.setter
    def document_structure_type(self, document_structure_type):
        """Sets the document_structure_type of this ProductItem.


        :param document_structure_type: The document_structure_type of this ProductItem.  # noqa: E501
        :type: str
        """

        self._document_structure_type = document_structure_type

    @property
    def type(self):
        """Gets the type of this ProductItem.  # noqa: E501

        ประเภทสินค้า <br> 1 = บริการ (service) <br> 3 = สินค้าไม่นับสต๊อก (non inventory) <br> 5 = สินค้านับสต๊อก (inventory)  # noqa: E501

        :return: The type of this ProductItem.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductItem.

        ประเภทสินค้า <br> 1 = บริการ (service) <br> 3 = สินค้าไม่นับสต๊อก (non inventory) <br> 5 = สินค้านับสต๊อก (inventory)  # noqa: E501

        :param type: The type of this ProductItem.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this ProductItem.  # noqa: E501

        ชื่อสินค้า  # noqa: E501

        :return: The name of this ProductItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductItem.

        ชื่อสินค้า  # noqa: E501

        :param name: The name of this ProductItem.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ProductItem.  # noqa: E501

        รายละเอียดสินค้า  # noqa: E501

        :return: The description of this ProductItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductItem.

        รายละเอียดสินค้า  # noqa: E501

        :param description: The description of this ProductItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def quantity(self):
        """Gets the quantity of this ProductItem.  # noqa: E501

        จำนวนสินค้า  # noqa: E501

        :return: The quantity of this ProductItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ProductItem.

        จำนวนสินค้า  # noqa: E501

        :param quantity: The quantity of this ProductItem.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and quantity is None:  # noqa: E501
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def unit_name(self):
        """Gets the unit_name of this ProductItem.  # noqa: E501

        หน่วยสินค้า  # noqa: E501

        :return: The unit_name of this ProductItem.  # noqa: E501
        :rtype: str
        """
        return self._unit_name

    @unit_name.setter
    def unit_name(self, unit_name):
        """Sets the unit_name of this ProductItem.

        หน่วยสินค้า  # noqa: E501

        :param unit_name: The unit_name of this ProductItem.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                unit_name is not None and len(unit_name) > 7):
            raise ValueError("Invalid value for `unit_name`, length must be less than or equal to `7`")  # noqa: E501

        self._unit_name = unit_name

    @property
    def price_per_unit(self):
        """Gets the price_per_unit of this ProductItem.  # noqa: E501

        ราคาสินค้าต่อหน่วย  # noqa: E501

        :return: The price_per_unit of this ProductItem.  # noqa: E501
        :rtype: float
        """
        return self._price_per_unit

    @price_per_unit.setter
    def price_per_unit(self, price_per_unit):
        """Sets the price_per_unit of this ProductItem.

        ราคาสินค้าต่อหน่วย  # noqa: E501

        :param price_per_unit: The price_per_unit of this ProductItem.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and price_per_unit is None:  # noqa: E501
            raise ValueError("Invalid value for `price_per_unit`, must not be `None`")  # noqa: E501

        self._price_per_unit = price_per_unit

    @property
    def total(self):
        """Gets the total of this ProductItem.  # noqa: E501

        ราคารวมสินค้า  # noqa: E501

        :return: The total of this ProductItem.  # noqa: E501
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ProductItem.

        ราคารวมสินค้า  # noqa: E501

        :param total: The total of this ProductItem.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and total is None:  # noqa: E501
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductItem):
            return True

        return self.to_dict() != other.to_dict()
