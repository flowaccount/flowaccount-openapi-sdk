# coding: utf-8

"""
    FlowAccount Open API

    FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test    **PostMan Collection**   site: https://www.getpostman.com/collections/01e7c68d7093e2092a64  # noqa: E501

    The version of the OpenAPI document: 2-oas3
    Contact: developer@flowaccount.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BankAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bank_account_number': 'int',
        'bank_account_name': 'str',
        'bank_account_type': 'int',
        'bank_branch': 'str',
        'bank_id': 'int'
    }

    attribute_map = {
        'bank_account_number': 'bankAccountNumber',
        'bank_account_name': 'bankAccountName',
        'bank_account_type': 'bankAccountType',
        'bank_branch': 'bankBranch',
        'bank_id': 'bankId'
    }

    def __init__(self, bank_account_number=None, bank_account_name=None, bank_account_type=None, bank_branch=None, bank_id=None, local_vars_configuration=None):  # noqa: E501
        """BankAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bank_account_number = None
        self._bank_account_name = None
        self._bank_account_type = None
        self._bank_branch = None
        self._bank_id = None
        self.discriminator = None

        self.bank_account_number = bank_account_number
        self.bank_account_name = bank_account_name
        self.bank_account_type = bank_account_type
        self.bank_branch = bank_branch
        self.bank_id = bank_id

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this BankAccount.  # noqa: E501

        เลขบัญชีธนาคาร ไม่น้อยกว่า 10 หลัก <ex>Example: 0048620000</ex>  # noqa: E501

        :return: The bank_account_number of this BankAccount.  # noqa: E501
        :rtype: int
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this BankAccount.

        เลขบัญชีธนาคาร ไม่น้อยกว่า 10 หลัก <ex>Example: 0048620000</ex>  # noqa: E501

        :param bank_account_number: The bank_account_number of this BankAccount.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and bank_account_number is None:  # noqa: E501
            raise ValueError("Invalid value for `bank_account_number`, must not be `None`")  # noqa: E501

        self._bank_account_number = bank_account_number

    @property
    def bank_account_name(self):
        """Gets the bank_account_name of this BankAccount.  # noqa: E501

        ชื่อบัญชีธนาคาร  # noqa: E501

        :return: The bank_account_name of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_name

    @bank_account_name.setter
    def bank_account_name(self, bank_account_name):
        """Sets the bank_account_name of this BankAccount.

        ชื่อบัญชีธนาคาร  # noqa: E501

        :param bank_account_name: The bank_account_name of this BankAccount.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and bank_account_name is None:  # noqa: E501
            raise ValueError("Invalid value for `bank_account_name`, must not be `None`")  # noqa: E501

        self._bank_account_name = bank_account_name

    @property
    def bank_account_type(self):
        """Gets the bank_account_type of this BankAccount.  # noqa: E501

        ประเภทบัญชีธนาคาร <br> 1 = บัญชีออมทรัพย์  <br> 3 = บัญชีกระรายวัน <br> 7  = บัญชีฝากประจำ  # noqa: E501

        :return: The bank_account_type of this BankAccount.  # noqa: E501
        :rtype: int
        """
        return self._bank_account_type

    @bank_account_type.setter
    def bank_account_type(self, bank_account_type):
        """Sets the bank_account_type of this BankAccount.

        ประเภทบัญชีธนาคาร <br> 1 = บัญชีออมทรัพย์  <br> 3 = บัญชีกระรายวัน <br> 7  = บัญชีฝากประจำ  # noqa: E501

        :param bank_account_type: The bank_account_type of this BankAccount.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and bank_account_type is None:  # noqa: E501
            raise ValueError("Invalid value for `bank_account_type`, must not be `None`")  # noqa: E501

        self._bank_account_type = bank_account_type

    @property
    def bank_branch(self):
        """Gets the bank_branch of this BankAccount.  # noqa: E501

        ชื่อสาขา  # noqa: E501

        :return: The bank_branch of this BankAccount.  # noqa: E501
        :rtype: str
        """
        return self._bank_branch

    @bank_branch.setter
    def bank_branch(self, bank_branch):
        """Sets the bank_branch of this BankAccount.

        ชื่อสาขา  # noqa: E501

        :param bank_branch: The bank_branch of this BankAccount.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and bank_branch is None:  # noqa: E501
            raise ValueError("Invalid value for `bank_branch`, must not be `None`")  # noqa: E501

        self._bank_branch = bank_branch

    @property
    def bank_id(self):
        """Gets the bank_id of this BankAccount.  # noqa: E501

        เลข id ธนาคาร <br> 1 = ธนาคารกรุงเทพ <br> 2 = ธนาคารกสิกรไทย <br> 3 = ธนาคารกรุงไทย <br> 4 = ธนาคารทหารไทย <br> 5 = ธนาคารไทยพาณิชย์ <br> 6 = ธนาคารสแตนดาร์ดชาร์เตอร์ด <br> 7 = ธนาคารซีไอเอ็มบี ไทย <br> 8 = ธนาคารยูโอบี <br> 10 = ธนาคารกรุงศรีอยุธยา <br> 11 = ธนาคารออมสิน <br> 12 = ธนาคารธนชาต <br> 13 = ธนาคารแลนด์ แอนด์ เฮ้าส์ <br> 14 = ธนาคารเกียรตินาคิน <br> 15 = ธนาคารซิตี้แบงก์ <br> 16 = ธนาคารทิสโก้ <br> 53 = ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร <br> 54 = ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย <br> 55 = ธนาคารอาคารสงเคราะห์ <br> 56 = ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย <br> 57 = ธนาคารอิสลามแห่งประเทศไทย <br> 58 = ธนาคารแห่งประเทศจีน (ไทย) <br> 59 = ธนาคารไอซีบีซี (ไทย) <br> 60 = ธนาคารเมกะ สากลพาณิชย์ <br> 61 = ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น <br> 62 = ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) <br> 63 = ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น <br> 64 = ธนาคารไทยเครดิต เพื่อรายย่อย   # noqa: E501

        :return: The bank_id of this BankAccount.  # noqa: E501
        :rtype: int
        """
        return self._bank_id

    @bank_id.setter
    def bank_id(self, bank_id):
        """Sets the bank_id of this BankAccount.

        เลข id ธนาคาร <br> 1 = ธนาคารกรุงเทพ <br> 2 = ธนาคารกสิกรไทย <br> 3 = ธนาคารกรุงไทย <br> 4 = ธนาคารทหารไทย <br> 5 = ธนาคารไทยพาณิชย์ <br> 6 = ธนาคารสแตนดาร์ดชาร์เตอร์ด <br> 7 = ธนาคารซีไอเอ็มบี ไทย <br> 8 = ธนาคารยูโอบี <br> 10 = ธนาคารกรุงศรีอยุธยา <br> 11 = ธนาคารออมสิน <br> 12 = ธนาคารธนชาต <br> 13 = ธนาคารแลนด์ แอนด์ เฮ้าส์ <br> 14 = ธนาคารเกียรตินาคิน <br> 15 = ธนาคารซิตี้แบงก์ <br> 16 = ธนาคารทิสโก้ <br> 53 = ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร <br> 54 = ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย <br> 55 = ธนาคารอาคารสงเคราะห์ <br> 56 = ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย <br> 57 = ธนาคารอิสลามแห่งประเทศไทย <br> 58 = ธนาคารแห่งประเทศจีน (ไทย) <br> 59 = ธนาคารไอซีบีซี (ไทย) <br> 60 = ธนาคารเมกะ สากลพาณิชย์ <br> 61 = ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น <br> 62 = ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) <br> 63 = ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น <br> 64 = ธนาคารไทยเครดิต เพื่อรายย่อย   # noqa: E501

        :param bank_id: The bank_id of this BankAccount.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and bank_id is None:  # noqa: E501
            raise ValueError("Invalid value for `bank_id`, must not be `None`")  # noqa: E501

        self._bank_id = bank_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BankAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BankAccount):
            return True

        return self.to_dict() != other.to_dict()
