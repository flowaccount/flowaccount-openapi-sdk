# coding: utf-8

"""
    FlowAccount Open API

    FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test    **PostMan Collection**   site: https://www.getpostman.com/collections/01e7c68d7093e2092a64  # noqa: E501

    The version of the OpenAPI document: 2-oas3
    Contact: developer@flowaccount.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ExpenseSimpleDocumentWithPaymentPaidTransfer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'contact_code': 'str',
        'contact_name': 'str',
        'contact_address': 'str',
        'contact_tax_id': 'str',
        'contact_branch': 'str',
        'contact_person': 'str',
        'contact_email': 'str',
        'contact_number': 'str',
        'contact_zip_code': 'str',
        'contact_group': 'int',
        'published_on': 'date',
        'credit_type': 'int',
        'credit_days': 'int',
        'due_date': 'date',
        'sales_name': 'str',
        'project_name': 'str',
        'reference': 'str',
        'is_vat_inclusive': 'bool',
        'items': 'list[ExpenseSimpleProductItem]',
        'sub_total': 'float',
        'discount_percentage': 'int',
        'discount_amount': 'float',
        'total_after_discount': 'float',
        'is_vat': 'bool',
        'vat_amount': 'float',
        'grand_total': 'float',
        'remarks': 'str',
        'internal_notes': 'str',
        'show_signature_or_stamp': 'bool',
        'expense_payment_structure_type': 'str',
        'payment_method': 'int',
        'payment_date': 'date',
        'collected': 'float',
        'withheld_percentage': 'int',
        'withheld_amount': 'float',
        'transfer_bank_account_id': 'int',
        'bank_account_id': 'int',
        'payment_charge': 'float',
        'payment_remarks': 'str',
        'remaining_collected_type': 'int',
        'remaining_collected': 'float'
    }

    attribute_map = {
        'contact_code': 'contactCode',
        'contact_name': 'contactName',
        'contact_address': 'contactAddress',
        'contact_tax_id': 'contactTaxId',
        'contact_branch': 'contactBranch',
        'contact_person': 'contactPerson',
        'contact_email': 'contactEmail',
        'contact_number': 'contactNumber',
        'contact_zip_code': 'contactZipCode',
        'contact_group': 'contactGroup',
        'published_on': 'publishedOn',
        'credit_type': 'creditType',
        'credit_days': 'creditDays',
        'due_date': 'dueDate',
        'sales_name': 'salesName',
        'project_name': 'projectName',
        'reference': 'reference',
        'is_vat_inclusive': 'isVatInclusive',
        'items': 'items',
        'sub_total': 'subTotal',
        'discount_percentage': 'discountPercentage',
        'discount_amount': 'discountAmount',
        'total_after_discount': 'totalAfterDiscount',
        'is_vat': 'isVat',
        'vat_amount': 'vatAmount',
        'grand_total': 'grandTotal',
        'remarks': 'remarks',
        'internal_notes': 'internalNotes',
        'show_signature_or_stamp': 'showSignatureOrStamp',
        'expense_payment_structure_type': 'expensePaymentStructureType',
        'payment_method': 'paymentMethod',
        'payment_date': 'paymentDate',
        'collected': 'collected',
        'withheld_percentage': 'withheldPercentage',
        'withheld_amount': 'withheldAmount',
        'transfer_bank_account_id': 'transferBankAccountId',
        'bank_account_id': 'bankAccountId',
        'payment_charge': 'paymentCharge',
        'payment_remarks': 'paymentRemarks',
        'remaining_collected_type': 'remainingCollectedType',
        'remaining_collected': 'remainingCollected'
    }

    discriminator_value_class_map = {
        
    }

    def __init__(self, contact_code=None, contact_name=None, contact_address=None, contact_tax_id=None, contact_branch=None, contact_person=None, contact_email=None, contact_number=None, contact_zip_code=None, contact_group=1, published_on=None, credit_type=1, credit_days=0, due_date=None, sales_name='อีเมล หรือ ชื่อผู้สร้างเอกสาร', project_name=None, reference=None, is_vat_inclusive=False, items=None, sub_total=0, discount_percentage=0, discount_amount=0, total_after_discount=None, is_vat=False, vat_amount=None, grand_total=None, remarks=None, internal_notes=None, show_signature_or_stamp=True, expense_payment_structure_type=None, payment_method=1, payment_date=None, collected=0, withheld_percentage=0, withheld_amount=0, transfer_bank_account_id=0, bank_account_id=0, payment_charge=0, payment_remarks=None, remaining_collected_type=0, remaining_collected=0, local_vars_configuration=None):  # noqa: E501
        """ExpenseSimpleDocumentWithPaymentPaidTransfer - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._contact_code = None
        self._contact_name = None
        self._contact_address = None
        self._contact_tax_id = None
        self._contact_branch = None
        self._contact_person = None
        self._contact_email = None
        self._contact_number = None
        self._contact_zip_code = None
        self._contact_group = None
        self._published_on = None
        self._credit_type = None
        self._credit_days = None
        self._due_date = None
        self._sales_name = None
        self._project_name = None
        self._reference = None
        self._is_vat_inclusive = None
        self._items = None
        self._sub_total = None
        self._discount_percentage = None
        self._discount_amount = None
        self._total_after_discount = None
        self._is_vat = None
        self._vat_amount = None
        self._grand_total = None
        self._remarks = None
        self._internal_notes = None
        self._show_signature_or_stamp = None
        self._expense_payment_structure_type = None
        self._payment_method = None
        self._payment_date = None
        self._collected = None
        self._withheld_percentage = None
        self._withheld_amount = None
        self._transfer_bank_account_id = None
        self._bank_account_id = None
        self._payment_charge = None
        self._payment_remarks = None
        self._remaining_collected_type = None
        self._remaining_collected = None
        self.discriminator = 'expense_payment_structure_type'

        if contact_code is not None:
            self.contact_code = contact_code
        self.contact_name = contact_name
        if contact_address is not None:
            self.contact_address = contact_address
        if contact_tax_id is not None:
            self.contact_tax_id = contact_tax_id
        if contact_branch is not None:
            self.contact_branch = contact_branch
        if contact_person is not None:
            self.contact_person = contact_person
        if contact_email is not None:
            self.contact_email = contact_email
        if contact_number is not None:
            self.contact_number = contact_number
        if contact_zip_code is not None:
            self.contact_zip_code = contact_zip_code
        if contact_group is not None:
            self.contact_group = contact_group
        self.published_on = published_on
        if credit_type is not None:
            self.credit_type = credit_type
        if credit_days is not None:
            self.credit_days = credit_days
        self.due_date = due_date
        if sales_name is not None:
            self.sales_name = sales_name
        if project_name is not None:
            self.project_name = project_name
        if reference is not None:
            self.reference = reference
        if is_vat_inclusive is not None:
            self.is_vat_inclusive = is_vat_inclusive
        if items is not None:
            self.items = items
        if sub_total is not None:
            self.sub_total = sub_total
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if discount_amount is not None:
            self.discount_amount = discount_amount
        self.total_after_discount = total_after_discount
        if is_vat is not None:
            self.is_vat = is_vat
        if vat_amount is not None:
            self.vat_amount = vat_amount
        self.grand_total = grand_total
        if remarks is not None:
            self.remarks = remarks
        if internal_notes is not None:
            self.internal_notes = internal_notes
        if show_signature_or_stamp is not None:
            self.show_signature_or_stamp = show_signature_or_stamp
        self.expense_payment_structure_type = expense_payment_structure_type
        self.payment_method = payment_method
        self.payment_date = payment_date
        self.collected = collected
        if withheld_percentage is not None:
            self.withheld_percentage = withheld_percentage
        if withheld_amount is not None:
            self.withheld_amount = withheld_amount
        if transfer_bank_account_id is not None:
            self.transfer_bank_account_id = transfer_bank_account_id
        if bank_account_id is not None:
            self.bank_account_id = bank_account_id
        if payment_charge is not None:
            self.payment_charge = payment_charge
        if payment_remarks is not None:
            self.payment_remarks = payment_remarks
        if remaining_collected_type is not None:
            self.remaining_collected_type = remaining_collected_type
        if remaining_collected is not None:
            self.remaining_collected = remaining_collected

    @property
    def contact_code(self):
        """Gets the contact_code of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        รหัส ลูกค้า/ผู้จำหน่าย  # noqa: E501

        :return: The contact_code of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._contact_code

    @contact_code.setter
    def contact_code(self, contact_code):
        """Sets the contact_code of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        รหัส ลูกค้า/ผู้จำหน่าย  # noqa: E501

        :param contact_code: The contact_code of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._contact_code = contact_code

    @property
    def contact_name(self):
        """Gets the contact_name of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        ชื่อ ลูกค้า/ผู้จำหน่าย <br> <ex>Example: บริษัท ลูกค้า จำกัด, คุณลูกค้า ซื้อประจำ</ex>  # noqa: E501

        :return: The contact_name of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        ชื่อ ลูกค้า/ผู้จำหน่าย <br> <ex>Example: บริษัท ลูกค้า จำกัด, คุณลูกค้า ซื้อประจำ</ex>  # noqa: E501

        :param contact_name: The contact_name of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and contact_name is None:  # noqa: E501
            raise ValueError("Invalid value for `contact_name`, must not be `None`")  # noqa: E501

        self._contact_name = contact_name

    @property
    def contact_address(self):
        """Gets the contact_address of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        ที่อยู่ ลูกค้า/ผู้จำหน่าย  # noqa: E501

        :return: The contact_address of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._contact_address

    @contact_address.setter
    def contact_address(self, contact_address):
        """Sets the contact_address of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        ที่อยู่ ลูกค้า/ผู้จำหน่าย  # noqa: E501

        :param contact_address: The contact_address of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._contact_address = contact_address

    @property
    def contact_tax_id(self):
        """Gets the contact_tax_id of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        เลขประจำตัวผู้เสียภาษี ลูกค้า หรือ ผู้จำหน่าย/ลูกค้า <br> (ถ้ามีจำเป็นต้องครบ 13 หลัก) <br> <ex>Example: 1234567890123 </ex>  # noqa: E501

        :return: The contact_tax_id of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._contact_tax_id

    @contact_tax_id.setter
    def contact_tax_id(self, contact_tax_id):
        """Sets the contact_tax_id of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        เลขประจำตัวผู้เสียภาษี ลูกค้า หรือ ผู้จำหน่าย/ลูกค้า <br> (ถ้ามีจำเป็นต้องครบ 13 หลัก) <br> <ex>Example: 1234567890123 </ex>  # noqa: E501

        :param contact_tax_id: The contact_tax_id of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._contact_tax_id = contact_tax_id

    @property
    def contact_branch(self):
        """Gets the contact_branch of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        สำนักงาน/สาขา  # noqa: E501

        :return: The contact_branch of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._contact_branch

    @contact_branch.setter
    def contact_branch(self, contact_branch):
        """Sets the contact_branch of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        สำนักงาน/สาขา  # noqa: E501

        :param contact_branch: The contact_branch of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._contact_branch = contact_branch

    @property
    def contact_person(self):
        """Gets the contact_person of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        ชื่อผู้ติดต่อ  # noqa: E501

        :return: The contact_person of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._contact_person

    @contact_person.setter
    def contact_person(self, contact_person):
        """Sets the contact_person of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        ชื่อผู้ติดต่อ  # noqa: E501

        :param contact_person: The contact_person of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._contact_person = contact_person

    @property
    def contact_email(self):
        """Gets the contact_email of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        อีเมลผู้ติดต่อ <br> <ex>Example: contact@email.com</ex>  # noqa: E501

        :return: The contact_email of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        อีเมลผู้ติดต่อ <br> <ex>Example: contact@email.com</ex>  # noqa: E501

        :param contact_email: The contact_email of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def contact_number(self):
        """Gets the contact_number of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        เบอร์มือถือผู้ติดต่อ <br> <ex>Example: 099-999-9999</ex>  # noqa: E501

        :return: The contact_number of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        เบอร์มือถือผู้ติดต่อ <br> <ex>Example: 099-999-9999</ex>  # noqa: E501

        :param contact_number: The contact_number of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._contact_number = contact_number

    @property
    def contact_zip_code(self):
        """Gets the contact_zip_code of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        รหัสไปรษณีย์ติดต่อ  # noqa: E501

        :return: The contact_zip_code of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._contact_zip_code

    @contact_zip_code.setter
    def contact_zip_code(self, contact_zip_code):
        """Sets the contact_zip_code of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        รหัสไปรษณีย์ติดต่อ  # noqa: E501

        :param contact_zip_code: The contact_zip_code of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._contact_zip_code = contact_zip_code

    @property
    def contact_group(self):
        """Gets the contact_group of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        ประผู้ติดต่อ <br> 1 = บุคคลธรรมดา <br> 3 = นิติบุคคล  # noqa: E501

        :return: The contact_group of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: int
        """
        return self._contact_group

    @contact_group.setter
    def contact_group(self, contact_group):
        """Sets the contact_group of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        ประผู้ติดต่อ <br> 1 = บุคคลธรรมดา <br> 3 = นิติบุคคล  # noqa: E501

        :param contact_group: The contact_group of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: int
        """

        self._contact_group = contact_group

    @property
    def published_on(self):
        """Gets the published_on of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        วันที่เอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>  # noqa: E501

        :return: The published_on of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: date
        """
        return self._published_on

    @published_on.setter
    def published_on(self, published_on):
        """Sets the published_on of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        วันที่เอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>  # noqa: E501

        :param published_on: The published_on of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and published_on is None:  # noqa: E501
            raise ValueError("Invalid value for `published_on`, must not be `None`")  # noqa: E501

        self._published_on = published_on

    @property
    def credit_type(self):
        """Gets the credit_type of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        รูปแบบเครดิต <br> 1 = เครดิต (วัน) <br> 3 = เงินสด  <br> 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)  # noqa: E501

        :return: The credit_type of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: int
        """
        return self._credit_type

    @credit_type.setter
    def credit_type(self, credit_type):
        """Sets the credit_type of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        รูปแบบเครดิต <br> 1 = เครดิต (วัน) <br> 3 = เงินสด  <br> 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)  # noqa: E501

        :param credit_type: The credit_type of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: int
        """

        self._credit_type = credit_type

    @property
    def credit_days(self):
        """Gets the credit_days of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        จำนวนวันที่ให้เครดิต <br> <ex>Example: 30</ex>  # noqa: E501

        :return: The credit_days of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: int
        """
        return self._credit_days

    @credit_days.setter
    def credit_days(self, credit_days):
        """Sets the credit_days of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        จำนวนวันที่ให้เครดิต <br> <ex>Example: 30</ex>  # noqa: E501

        :param credit_days: The credit_days of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: int
        """

        self._credit_days = credit_days

    @property
    def due_date(self):
        """Gets the due_date of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>  # noqa: E501

        :return: The due_date of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>  # noqa: E501

        :param due_date: The due_date of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and due_date is None:  # noqa: E501
            raise ValueError("Invalid value for `due_date`, must not be `None`")  # noqa: E501

        self._due_date = due_date

    @property
    def sales_name(self):
        """Gets the sales_name of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย <br> <ex>Example: sale@email.com or Mr.Sale Shop</ex>  # noqa: E501

        :return: The sales_name of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._sales_name

    @sales_name.setter
    def sales_name(self, sales_name):
        """Sets the sales_name of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย <br> <ex>Example: sale@email.com or Mr.Sale Shop</ex>  # noqa: E501

        :param sales_name: The sales_name of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._sales_name = sales_name

    @property
    def project_name(self):
        """Gets the project_name of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        ชื่อโปรเจค  # noqa: E501

        :return: The project_name of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        ชื่อโปรเจค  # noqa: E501

        :param project_name: The project_name of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def reference(self):
        """Gets the reference of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง <br> <ex>Example: INV2020010001</ex>  # noqa: E501

        :return: The reference of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง <br> <ex>Example: INV2020010001</ex>  # noqa: E501

        :param reference: The reference of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._reference = reference

    @property
    def is_vat_inclusive(self):
        """Gets the is_vat_inclusive of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        มูลค่าเอกสารรวมภาษีแล้วหรือไม่  # noqa: E501

        :return: The is_vat_inclusive of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: bool
        """
        return self._is_vat_inclusive

    @is_vat_inclusive.setter
    def is_vat_inclusive(self, is_vat_inclusive):
        """Sets the is_vat_inclusive of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        มูลค่าเอกสารรวมภาษีแล้วหรือไม่  # noqa: E501

        :param is_vat_inclusive: The is_vat_inclusive of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: bool
        """

        self._is_vat_inclusive = is_vat_inclusive

    @property
    def items(self):
        """Gets the items of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        รายการสินค้าใช้งานสำหรับเอกสาร Simple Expense  # noqa: E501

        :return: The items of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: list[ExpenseSimpleProductItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        รายการสินค้าใช้งานสำหรับเอกสาร Simple Expense  # noqa: E501

        :param items: The items of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: list[ExpenseSimpleProductItem]
        """

        self._items = items

    @property
    def sub_total(self):
        """Gets the sub_total of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        มูลค่ารวมเป็นเงิน  # noqa: E501

        :return: The sub_total of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: float
        """
        return self._sub_total

    @sub_total.setter
    def sub_total(self, sub_total):
        """Sets the sub_total of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        มูลค่ารวมเป็นเงิน  # noqa: E501

        :param sub_total: The sub_total of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: float
        """

        self._sub_total = sub_total

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        มูลค่าส่วนลดเป็นเปอร์เซ็นต์  # noqa: E501

        :return: The discount_percentage of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: int
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        มูลค่าส่วนลดเป็นเปอร์เซ็นต์  # noqa: E501

        :param discount_percentage: The discount_percentage of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: int
        """

        self._discount_percentage = discount_percentage

    @property
    def discount_amount(self):
        """Gets the discount_amount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        มูลค่าส่วนลดเป็นจำนวน (บาท)  # noqa: E501

        :return: The discount_amount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        มูลค่าส่วนลดเป็นจำนวน (บาท)  # noqa: E501

        :param discount_amount: The discount_amount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def total_after_discount(self):
        """Gets the total_after_discount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        มูลค่าหลังหักส่วนลด  # noqa: E501

        :return: The total_after_discount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: float
        """
        return self._total_after_discount

    @total_after_discount.setter
    def total_after_discount(self, total_after_discount):
        """Sets the total_after_discount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        มูลค่าหลังหักส่วนลด  # noqa: E501

        :param total_after_discount: The total_after_discount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and total_after_discount is None:  # noqa: E501
            raise ValueError("Invalid value for `total_after_discount`, must not be `None`")  # noqa: E501

        self._total_after_discount = total_after_discount

    @property
    def is_vat(self):
        """Gets the is_vat of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        มูลค่าหลังหักส่วนลด มีภาษีมูลค่าเพิ่ม 7%  # noqa: E501

        :return: The is_vat of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: bool
        """
        return self._is_vat

    @is_vat.setter
    def is_vat(self, is_vat):
        """Sets the is_vat of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        มูลค่าหลังหักส่วนลด มีภาษีมูลค่าเพิ่ม 7%  # noqa: E501

        :param is_vat: The is_vat of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: bool
        """

        self._is_vat = is_vat

    @property
    def vat_amount(self):
        """Gets the vat_amount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        ภาษีมูลค่าเพิ่ม  # noqa: E501

        :return: The vat_amount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: float
        """
        return self._vat_amount

    @vat_amount.setter
    def vat_amount(self, vat_amount):
        """Sets the vat_amount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        ภาษีมูลค่าเพิ่ม  # noqa: E501

        :param vat_amount: The vat_amount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: float
        """

        self._vat_amount = vat_amount

    @property
    def grand_total(self):
        """Gets the grand_total of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว)  # noqa: E501

        :return: The grand_total of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: float
        """
        return self._grand_total

    @grand_total.setter
    def grand_total(self, grand_total):
        """Sets the grand_total of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว)  # noqa: E501

        :param grand_total: The grand_total of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and grand_total is None:  # noqa: E501
            raise ValueError("Invalid value for `grand_total`, must not be `None`")  # noqa: E501

        self._grand_total = grand_total

    @property
    def remarks(self):
        """Gets the remarks of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        หมายเหตุเอกสาร  # noqa: E501

        :return: The remarks of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._remarks

    @remarks.setter
    def remarks(self, remarks):
        """Sets the remarks of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        หมายเหตุเอกสาร  # noqa: E501

        :param remarks: The remarks of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._remarks = remarks

    @property
    def internal_notes(self):
        """Gets the internal_notes of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        โน๊ตภายในบริษัท  # noqa: E501

        :return: The internal_notes of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._internal_notes

    @internal_notes.setter
    def internal_notes(self, internal_notes):
        """Sets the internal_notes of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        โน๊ตภายในบริษัท  # noqa: E501

        :param internal_notes: The internal_notes of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._internal_notes = internal_notes

    @property
    def show_signature_or_stamp(self):
        """Gets the show_signature_or_stamp of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        ลายเซ็นอิเล็กทรอนิกส์และตรายาง  # noqa: E501

        :return: The show_signature_or_stamp of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: bool
        """
        return self._show_signature_or_stamp

    @show_signature_or_stamp.setter
    def show_signature_or_stamp(self, show_signature_or_stamp):
        """Sets the show_signature_or_stamp of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        ลายเซ็นอิเล็กทรอนิกส์และตรายาง  # noqa: E501

        :param show_signature_or_stamp: The show_signature_or_stamp of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: bool
        """

        self._show_signature_or_stamp = show_signature_or_stamp

    @property
    def expense_payment_structure_type(self):
        """Gets the expense_payment_structure_type of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        สร้างเอกสารแบบ Simple พร้อมชำระเงิน ด้วยการโอนเงิน  # noqa: E501

        :return: The expense_payment_structure_type of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._expense_payment_structure_type

    @expense_payment_structure_type.setter
    def expense_payment_structure_type(self, expense_payment_structure_type):
        """Sets the expense_payment_structure_type of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        สร้างเอกสารแบบ Simple พร้อมชำระเงิน ด้วยการโอนเงิน  # noqa: E501

        :param expense_payment_structure_type: The expense_payment_structure_type of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._expense_payment_structure_type = expense_payment_structure_type

    @property
    def payment_method(self):
        """Gets the payment_method of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        ประเภทการชำระเงิน <br> 5 = โอนเงิน   # noqa: E501

        :return: The payment_method of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: int
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        ประเภทการชำระเงิน <br> 5 = โอนเงิน   # noqa: E501

        :param payment_method: The payment_method of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and payment_method is None:  # noqa: E501
            raise ValueError("Invalid value for `payment_method`, must not be `None`")  # noqa: E501

        self._payment_method = payment_method

    @property
    def payment_date(self):
        """Gets the payment_date of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        วันที่รับชำระเงิน / วันที่ชำระเงิน รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>  # noqa: E501

        :return: The payment_date of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: date
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        วันที่รับชำระเงิน / วันที่ชำระเงิน รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>  # noqa: E501

        :param payment_date: The payment_date of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: date
        """
        if self.local_vars_configuration.client_side_validation and payment_date is None:  # noqa: E501
            raise ValueError("Invalid value for `payment_date`, must not be `None`")  # noqa: E501

        self._payment_date = payment_date

    @property
    def collected(self):
        """Gets the collected of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        จำนวนเงินยอดจ่ายสุทธิ <br> <ex> Example : 100.00 </ex>  # noqa: E501

        :return: The collected of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: float
        """
        return self._collected

    @collected.setter
    def collected(self, collected):
        """Sets the collected of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        จำนวนเงินยอดจ่ายสุทธิ <br> <ex> Example : 100.00 </ex>  # noqa: E501

        :param collected: The collected of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: float
        """
        if self.local_vars_configuration.client_side_validation and collected is None:  # noqa: E501
            raise ValueError("Invalid value for `collected`, must not be `None`")  # noqa: E501

        self._collected = collected

    @property
    def withheld_percentage(self):
        """Gets the withheld_percentage of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        เปอร์เซ็น หัก ณ ที่จ่าย <br> 0.5 = 0.5% <br> 0.75 = 0.75% <br> 1 = 1% <br> 1.5 = 1.5% <br> 2 = 2% <br> 3 = 3% <br> 5 = 5% <br> 10 = 10% <br> 15 = 15% <br> -1 = จำนวนเงิน <red>(สำหรับเอกสารที่ใช้ภาษีแยกตามรายการสินค้า ต้องใช้เป็นจำนวนเงิน)</red>  # noqa: E501

        :return: The withheld_percentage of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: int
        """
        return self._withheld_percentage

    @withheld_percentage.setter
    def withheld_percentage(self, withheld_percentage):
        """Sets the withheld_percentage of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        เปอร์เซ็น หัก ณ ที่จ่าย <br> 0.5 = 0.5% <br> 0.75 = 0.75% <br> 1 = 1% <br> 1.5 = 1.5% <br> 2 = 2% <br> 3 = 3% <br> 5 = 5% <br> 10 = 10% <br> 15 = 15% <br> -1 = จำนวนเงิน <red>(สำหรับเอกสารที่ใช้ภาษีแยกตามรายการสินค้า ต้องใช้เป็นจำนวนเงิน)</red>  # noqa: E501

        :param withheld_percentage: The withheld_percentage of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: int
        """

        self._withheld_percentage = withheld_percentage

    @property
    def withheld_amount(self):
        """Gets the withheld_amount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        จำนวน ยอดหัก ณ ที่จ่าย <br> <ex> Example : 100.00 </ex>  # noqa: E501

        :return: The withheld_amount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: float
        """
        return self._withheld_amount

    @withheld_amount.setter
    def withheld_amount(self, withheld_amount):
        """Sets the withheld_amount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        จำนวน ยอดหัก ณ ที่จ่าย <br> <ex> Example : 100.00 </ex>  # noqa: E501

        :param withheld_amount: The withheld_amount of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: float
        """

        self._withheld_amount = withheld_amount

    @property
    def transfer_bank_account_id(self):
        """Gets the transfer_bank_account_id of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        ธนาคารที่ใช้รับชำระเงิน ธนาคารที่ชำระเงิน <br> 1 = ธนาคารกรุงเทพ <br> 2 = ธนาคารกสิกรไทย <br> 3 = ธนาคารกรุงไทย <br> 4 = ธนาคารทหารไทย <br> 5 = ธนาคารไทยพาณิชย์ <br> 6 = ธนาคารสแตนดาร์ดชาร์เตอร์ด <br> 7 = ธนาคารซีไอเอ็มบี ไทย <br> 8 = ธนาคารยูโอบี <br> 10 = ธนาคารกรุงศรีอยุธยา <br> 11 = ธนาคารออมสิน <br> 12 = ธนาคารธนชาต <br> 13 = ธนาคารแลนด์ แอนด์ เฮ้าส์ <br> 14 = ธนาคารเกียรตินาคิน <br> 15 = ธนาคารซิตี้แบงก์ <br> 16 = ธนาคารทิสโก้ <br> 53 = ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร <br> 54 = ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย <br> 55 = ธนาคารอาคารสงเคราะห์ <br> 56 = ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย <br> 57 = ธนาคารอิสลามแห่งประเทศไทย <br> 58 = ธนาคารแห่งประเทศจีน (ไทย) <br> 59 = ธนาคารไอซีบีซี (ไทย) <br> 60 = ธนาคารเมกะ สากลพาณิชย์ <br> 61 = ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น <br> 62 = ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) <br> 63 = ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น <br> 64 = ธนาคารไทยเครดิต เพื่อรายย่อย   # noqa: E501

        :return: The transfer_bank_account_id of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: int
        """
        return self._transfer_bank_account_id

    @transfer_bank_account_id.setter
    def transfer_bank_account_id(self, transfer_bank_account_id):
        """Sets the transfer_bank_account_id of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        ธนาคารที่ใช้รับชำระเงิน ธนาคารที่ชำระเงิน <br> 1 = ธนาคารกรุงเทพ <br> 2 = ธนาคารกสิกรไทย <br> 3 = ธนาคารกรุงไทย <br> 4 = ธนาคารทหารไทย <br> 5 = ธนาคารไทยพาณิชย์ <br> 6 = ธนาคารสแตนดาร์ดชาร์เตอร์ด <br> 7 = ธนาคารซีไอเอ็มบี ไทย <br> 8 = ธนาคารยูโอบี <br> 10 = ธนาคารกรุงศรีอยุธยา <br> 11 = ธนาคารออมสิน <br> 12 = ธนาคารธนชาต <br> 13 = ธนาคารแลนด์ แอนด์ เฮ้าส์ <br> 14 = ธนาคารเกียรตินาคิน <br> 15 = ธนาคารซิตี้แบงก์ <br> 16 = ธนาคารทิสโก้ <br> 53 = ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร <br> 54 = ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย <br> 55 = ธนาคารอาคารสงเคราะห์ <br> 56 = ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย <br> 57 = ธนาคารอิสลามแห่งประเทศไทย <br> 58 = ธนาคารแห่งประเทศจีน (ไทย) <br> 59 = ธนาคารไอซีบีซี (ไทย) <br> 60 = ธนาคารเมกะ สากลพาณิชย์ <br> 61 = ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น <br> 62 = ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) <br> 63 = ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น <br> 64 = ธนาคารไทยเครดิต เพื่อรายย่อย   # noqa: E501

        :param transfer_bank_account_id: The transfer_bank_account_id of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: int
        """

        self._transfer_bank_account_id = transfer_bank_account_id

    @property
    def bank_account_id(self):
        """Gets the bank_account_id of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        เลข id บัญชีธนาคารที่ใช้ชำระเงิน <br><red>สามารถ GET มาได้จาก My Company > Bank Account </red><br> <ex>Example: 12345</ex>  # noqa: E501

        :return: The bank_account_id of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: int
        """
        return self._bank_account_id

    @bank_account_id.setter
    def bank_account_id(self, bank_account_id):
        """Sets the bank_account_id of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        เลข id บัญชีธนาคารที่ใช้ชำระเงิน <br><red>สามารถ GET มาได้จาก My Company > Bank Account </red><br> <ex>Example: 12345</ex>  # noqa: E501

        :param bank_account_id: The bank_account_id of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: int
        """

        self._bank_account_id = bank_account_id

    @property
    def payment_charge(self):
        """Gets the payment_charge of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        ค่าธรรมเนียม ที่ชำระโดยการโอนเงิน <ex> Example : 100.00 </ex>  # noqa: E501

        :return: The payment_charge of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: float
        """
        return self._payment_charge

    @payment_charge.setter
    def payment_charge(self, payment_charge):
        """Sets the payment_charge of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        ค่าธรรมเนียม ที่ชำระโดยการโอนเงิน <ex> Example : 100.00 </ex>  # noqa: E501

        :param payment_charge: The payment_charge of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: float
        """

        self._payment_charge = payment_charge

    @property
    def payment_remarks(self):
        """Gets the payment_remarks of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        หมายเหตุ การรับชำระเงิน หรือ ชำระเงิน  # noqa: E501

        :return: The payment_remarks of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: str
        """
        return self._payment_remarks

    @payment_remarks.setter
    def payment_remarks(self, payment_remarks):
        """Sets the payment_remarks of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        หมายเหตุ การรับชำระเงิน หรือ ชำระเงิน  # noqa: E501

        :param payment_remarks: The payment_remarks of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: str
        """

        self._payment_remarks = payment_remarks

    @property
    def remaining_collected_type(self):
        """Gets the remaining_collected_type of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        สาเหตุเงินขาด เงินเกิน <br> 51 = เงินขาดหรือเงินกิน <br> 55 = ค่าธรรมเนียมธนาคาร   # noqa: E501

        :return: The remaining_collected_type of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: int
        """
        return self._remaining_collected_type

    @remaining_collected_type.setter
    def remaining_collected_type(self, remaining_collected_type):
        """Sets the remaining_collected_type of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        สาเหตุเงินขาด เงินเกิน <br> 51 = เงินขาดหรือเงินกิน <br> 55 = ค่าธรรมเนียมธนาคาร   # noqa: E501

        :param remaining_collected_type: The remaining_collected_type of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: int
        """

        self._remaining_collected_type = remaining_collected_type

    @property
    def remaining_collected(self):
        """Gets the remaining_collected of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501

        จำนวน ยอดเงินขาด หรือ เงินเกิน <br> <ex> Example : 100.00 </ex>  # noqa: E501

        :return: The remaining_collected of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :rtype: float
        """
        return self._remaining_collected

    @remaining_collected.setter
    def remaining_collected(self, remaining_collected):
        """Sets the remaining_collected of this ExpenseSimpleDocumentWithPaymentPaidTransfer.

        จำนวน ยอดเงินขาด หรือ เงินเกิน <br> <ex> Example : 100.00 </ex>  # noqa: E501

        :param remaining_collected: The remaining_collected of this ExpenseSimpleDocumentWithPaymentPaidTransfer.  # noqa: E501
        :type: float
        """

        self._remaining_collected = remaining_collected

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpenseSimpleDocumentWithPaymentPaidTransfer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExpenseSimpleDocumentWithPaymentPaidTransfer):
            return True

        return self.to_dict() != other.to_dict()
