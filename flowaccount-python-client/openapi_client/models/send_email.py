# coding: utf-8

"""
    FlowAccount Open API

    # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64  # noqa: E501

    The version of the OpenAPI document: 2-oas3
    Contact: developer_support@flowaccount.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SendEmail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'document_id': 'int',
        'fromemail': 'str',
        'toemail': 'str',
        'c_c_myself': 'bool',
        'cc_email': 'str',
        'bcc_email': 'str',
        'subject': 'str',
        'message': 'str'
    }

    attribute_map = {
        'document_id': 'documentId',
        'fromemail': 'fromemail',
        'toemail': 'toemail',
        'c_c_myself': 'cCMyself',
        'cc_email': 'ccEmail',
        'bcc_email': 'bccEmail',
        'subject': 'subject',
        'message': 'message'
    }

    discriminator_value_class_map = {
        'SendEmailSimple': 'SendEmailSimple',
        'SendEmailCoppies': 'SendEmailCoppies'
    }

    def __init__(self, document_id=None, fromemail=None, toemail=None, c_c_myself=True, cc_email=None, bcc_email=None, subject=None, message=None, local_vars_configuration=None):  # noqa: E501
        """SendEmail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._document_id = None
        self._fromemail = None
        self._toemail = None
        self._c_c_myself = None
        self._cc_email = None
        self._bcc_email = None
        self._subject = None
        self._message = None
        self.discriminator = 'document_structure_type'

        self.document_id = document_id
        self.fromemail = fromemail
        self.toemail = toemail
        if c_c_myself is not None:
            self.c_c_myself = c_c_myself
        if cc_email is not None:
            self.cc_email = cc_email
        if bcc_email is not None:
            self.bcc_email = bcc_email
        self.subject = subject
        if message is not None:
            self.message = message

    @property
    def document_id(self):
        """Gets the document_id of this SendEmail.  # noqa: E501

        documentId หรือ recordId ของเอกสารที่ต้องการส่งอีเมล  # noqa: E501

        :return: The document_id of this SendEmail.  # noqa: E501
        :rtype: int
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this SendEmail.

        documentId หรือ recordId ของเอกสารที่ต้องการส่งอีเมล  # noqa: E501

        :param document_id: The document_id of this SendEmail.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and document_id is None:  # noqa: E501
            raise ValueError("Invalid value for `document_id`, must not be `None`")  # noqa: E501

        self._document_id = document_id

    @property
    def fromemail(self):
        """Gets the fromemail of this SendEmail.  # noqa: E501

        ใส่อีเมลผู้ส่ง <br> <ex>Example: myemail@email.com</ex>  # noqa: E501

        :return: The fromemail of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._fromemail

    @fromemail.setter
    def fromemail(self, fromemail):
        """Sets the fromemail of this SendEmail.

        ใส่อีเมลผู้ส่ง <br> <ex>Example: myemail@email.com</ex>  # noqa: E501

        :param fromemail: The fromemail of this SendEmail.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and fromemail is None:  # noqa: E501
            raise ValueError("Invalid value for `fromemail`, must not be `None`")  # noqa: E501

        self._fromemail = fromemail

    @property
    def toemail(self):
        """Gets the toemail of this SendEmail.  # noqa: E501

        ใส่อีเมลผู้รับ <br> <ex>Example: contact@email.com</ex>  # noqa: E501

        :return: The toemail of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._toemail

    @toemail.setter
    def toemail(self, toemail):
        """Sets the toemail of this SendEmail.

        ใส่อีเมลผู้รับ <br> <ex>Example: contact@email.com</ex>  # noqa: E501

        :param toemail: The toemail of this SendEmail.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and toemail is None:  # noqa: E501
            raise ValueError("Invalid value for `toemail`, must not be `None`")  # noqa: E501

        self._toemail = toemail

    @property
    def c_c_myself(self):
        """Gets the c_c_myself of this SendEmail.  # noqa: E501

        ส่งสำเนาหาตนเอง  # noqa: E501

        :return: The c_c_myself of this SendEmail.  # noqa: E501
        :rtype: bool
        """
        return self._c_c_myself

    @c_c_myself.setter
    def c_c_myself(self, c_c_myself):
        """Sets the c_c_myself of this SendEmail.

        ส่งสำเนาหาตนเอง  # noqa: E501

        :param c_c_myself: The c_c_myself of this SendEmail.  # noqa: E501
        :type: bool
        """

        self._c_c_myself = c_c_myself

    @property
    def cc_email(self):
        """Gets the cc_email of this SendEmail.  # noqa: E501

        สำเนา (CC) <br> <ex>Example: cc@email.com</ex>  # noqa: E501

        :return: The cc_email of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._cc_email

    @cc_email.setter
    def cc_email(self, cc_email):
        """Sets the cc_email of this SendEmail.

        สำเนา (CC) <br> <ex>Example: cc@email.com</ex>  # noqa: E501

        :param cc_email: The cc_email of this SendEmail.  # noqa: E501
        :type: str
        """

        self._cc_email = cc_email

    @property
    def bcc_email(self):
        """Gets the bcc_email of this SendEmail.  # noqa: E501

        สำเนาลับ (BCC) <br> <ex>Example: bcc@email.com</ex>  # noqa: E501

        :return: The bcc_email of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._bcc_email

    @bcc_email.setter
    def bcc_email(self, bcc_email):
        """Sets the bcc_email of this SendEmail.

        สำเนาลับ (BCC) <br> <ex>Example: bcc@email.com</ex>  # noqa: E501

        :param bcc_email: The bcc_email of this SendEmail.  # noqa: E501
        :type: str
        """

        self._bcc_email = bcc_email

    @property
    def subject(self):
        """Gets the subject of this SendEmail.  # noqa: E501

        หัวข้อ / ชื่อเรื่อง   # noqa: E501

        :return: The subject of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SendEmail.

        หัวข้อ / ชื่อเรื่อง   # noqa: E501

        :param subject: The subject of this SendEmail.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and subject is None:  # noqa: E501
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def message(self):
        """Gets the message of this SendEmail.  # noqa: E501

        ข้อความ เนื้อหาของ email  # noqa: E501

        :return: The message of this SendEmail.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SendEmail.

        ข้อความ เนื้อหาของ email  # noqa: E501

        :param message: The message of this SendEmail.  # noqa: E501
        :type: str
        """

        self._message = message

    def get_real_child_model(self, data):
        """Returns the real base class specified by the discriminator"""
        discriminator_key = self.attribute_map[self.discriminator]
        discriminator_value = data[discriminator_key]
        return self.discriminator_value_class_map.get(discriminator_value)

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SendEmail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SendEmail):
            return True

        return self.to_dict() != other.to_dict()
