=begin
#FlowAccount Open API

## Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64

The version of the OpenAPI document: 2-oas3
Contact: developer_support@flowaccount.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module OpenapiClient
  class ProductInventoryBalance
    # สร้างสินค้าประเภท นับสต๊อก พร้อมตั้งค่ายอดเริ่มต้น
    attr_accessor :product_structure_type

    # ประเภทสินค้า: <br>1 = บริการ <br> 3 = ไม่นับสต๊อก <br> 5 = นับสต๊อก
    attr_accessor :type

    # รหัสสินค้า / SKU <br> <ex>Example: P001</ex>
    attr_accessor :code

    # ชื่อสินค้า <br> <ex>Example: Product</ex>
    attr_accessor :name

    # รายละเอียดสินค้า ฝั่งขาย
    attr_accessor :sell_description

    # ราคาขายสินค้า
    attr_accessor :sell_price

    # ภาษีขาย: <br> 1 = ราคาขายรวมภาษี <br> 3 = ราคาขายไม่รวมภาษี <br> 5 = ราคาขายภาษี 0% <br> 7 = ราคาขายสินค้าได้รับการยกเว้นภาษี
    attr_accessor :sell_vat_type

    # หน่วยสินค้า
    attr_accessor :unit_name

    # หมวดสินค้า
    attr_accessor :category_name

    # บาร์โค้ด
    attr_accessor :barcode

    # รายละเอียดสินค้า ฝั่งซื้อ
    attr_accessor :buy_description

    # ราคาซื้อสินค้า
    attr_accessor :buy_price

    # ภาษีซื้อ: <br> 1 = ราคาซื้อรวมภาษี <br> 3 = ราคาซื้อไม่รวมภาษี <br> 5 = ราคาซื้อภาษี 0% <br> 7 = ราคาซื้อสินค้าได้รับการยกเว้นภาษี
    attr_accessor :buy_vat_type

    # วันที่ตั้งต้นสินค้า รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
    attr_accessor :inventory_published_on

    # จำนวนยอดตั้งต้นสินค้า
    attr_accessor :inventory_quantity

    # ต้นทุนสินค้าต่อหน่วย
    attr_accessor :inventory_price

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'product_structure_type' => :'productStructureType',
        :'type' => :'type',
        :'code' => :'code',
        :'name' => :'name',
        :'sell_description' => :'sellDescription',
        :'sell_price' => :'sellPrice',
        :'sell_vat_type' => :'sellVatType',
        :'unit_name' => :'unitName',
        :'category_name' => :'categoryName',
        :'barcode' => :'barcode',
        :'buy_description' => :'buyDescription',
        :'buy_price' => :'buyPrice',
        :'buy_vat_type' => :'buyVatType',
        :'inventory_published_on' => :'inventoryPublishedOn',
        :'inventory_quantity' => :'inventoryQuantity',
        :'inventory_price' => :'inventoryPrice'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'product_structure_type' => :'String',
        :'type' => :'Integer',
        :'code' => :'String',
        :'name' => :'String',
        :'sell_description' => :'String',
        :'sell_price' => :'Float',
        :'sell_vat_type' => :'Integer',
        :'unit_name' => :'String',
        :'category_name' => :'String',
        :'barcode' => :'String',
        :'buy_description' => :'String',
        :'buy_price' => :'Float',
        :'buy_vat_type' => :'Integer',
        :'inventory_published_on' => :'String',
        :'inventory_quantity' => :'Float',
        :'inventory_price' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'product_structure_type',
      ])
    end

    # discriminator's property name in OpenAPI v3
    def self.openapi_discriminator_name
      :'product_structure_type'
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ProductInventoryBalance` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ProductInventoryBalance`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'product_structure_type')
        self.product_structure_type = attributes[:'product_structure_type']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = 1
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'sell_description')
        self.sell_description = attributes[:'sell_description']
      end

      if attributes.key?(:'sell_price')
        self.sell_price = attributes[:'sell_price']
      end

      if attributes.key?(:'sell_vat_type')
        self.sell_vat_type = attributes[:'sell_vat_type']
      else
        self.sell_vat_type = 3
      end

      if attributes.key?(:'unit_name')
        self.unit_name = attributes[:'unit_name']
      end

      if attributes.key?(:'category_name')
        self.category_name = attributes[:'category_name']
      end

      if attributes.key?(:'barcode')
        self.barcode = attributes[:'barcode']
      end

      if attributes.key?(:'buy_description')
        self.buy_description = attributes[:'buy_description']
      end

      if attributes.key?(:'buy_price')
        self.buy_price = attributes[:'buy_price']
      end

      if attributes.key?(:'buy_vat_type')
        self.buy_vat_type = attributes[:'buy_vat_type']
      else
        self.buy_vat_type = 3
      end

      if attributes.key?(:'inventory_published_on')
        self.inventory_published_on = attributes[:'inventory_published_on']
      else
        self.inventory_published_on = '2020-01-01'
      end

      if attributes.key?(:'inventory_quantity')
        self.inventory_quantity = attributes[:'inventory_quantity']
      else
        self.inventory_quantity = 0
      end

      if attributes.key?(:'inventory_price')
        self.inventory_price = attributes[:'inventory_price']
      else
        self.inventory_price = 0
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @unit_name.nil?
        invalid_properties.push('invalid value for "unit_name", unit_name cannot be nil.')
      end

      if @inventory_published_on.nil?
        invalid_properties.push('invalid value for "inventory_published_on", inventory_published_on cannot be nil.')
      end

      if @inventory_quantity.nil?
        invalid_properties.push('invalid value for "inventory_quantity", inventory_quantity cannot be nil.')
      end

      if @inventory_price.nil?
        invalid_properties.push('invalid value for "inventory_price", inventory_price cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @type.nil?
      return false if @name.nil?
      return false if @unit_name.nil?
      return false if @inventory_published_on.nil?
      return false if @inventory_quantity.nil?
      return false if @inventory_price.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          product_structure_type == o.product_structure_type &&
          type == o.type &&
          code == o.code &&
          name == o.name &&
          sell_description == o.sell_description &&
          sell_price == o.sell_price &&
          sell_vat_type == o.sell_vat_type &&
          unit_name == o.unit_name &&
          category_name == o.category_name &&
          barcode == o.barcode &&
          buy_description == o.buy_description &&
          buy_price == o.buy_price &&
          buy_vat_type == o.buy_vat_type &&
          inventory_published_on == o.inventory_published_on &&
          inventory_quantity == o.inventory_quantity &&
          inventory_price == o.inventory_price
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [product_structure_type, type, code, name, sell_description, sell_price, sell_vat_type, unit_name, category_name, barcode, buy_description, buy_price, buy_vat_type, inventory_published_on, inventory_quantity, inventory_price].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
