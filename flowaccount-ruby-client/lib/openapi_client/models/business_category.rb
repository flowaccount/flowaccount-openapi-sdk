=begin
#FlowAccount Open API

## Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64

The version of the OpenAPI document: 2-oas3
Contact: developer_support@flowaccount.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module OpenapiClient
  class BusinessCategory
    # id ของหมวดหมู่ค่าใช้จ่าย
    attr_accessor :id

    # เลขที่ system code หมวดหมู่ค่าใช้จ่าย (เลือกใช้ หมวดหมู่ค่าใช้จ่ายสำหรับธุรกิจ)
    attr_accessor :system_code

    # เลขที่ id หมวดหมู่ค่าใช้จ่าย (เลือกใช้ หมวดหมู่ค่าใช้จ่ายสำหรับธุรกิจ)
    attr_accessor :category_id

    # ชื่อหมวดหมู่ค่าใช้จ่าย
    attr_accessor :category_name_local

    # ชื่อหมวดหมู่ค่าใช้จ่าย (ภาษาอังกฤษ)
    attr_accessor :category_name_foreign

    # เลข id หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต
    attr_accessor :debit_id

    # เลขหมวดหมู่ ฝั่งเดบิต ของ หมวดหมู่ค่าใช้จ่าย
    attr_accessor :debit_category

    # เลขที่หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต
    attr_accessor :debit_code

    # ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต
    attr_accessor :debit_name_local

    # ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต (ภาษาอังกฤษ)
    attr_accessor :debit_name_foreign

    # เลข id หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิิต
    attr_accessor :credit_id

    # เลขหมวดหมู่ ฝั่งเครดิต ของ หมวดหมู่ค่าใช้จ่าย
    attr_accessor :credit_category

    # เลขที่หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิต
    attr_accessor :credit_code

    # ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิต 
    attr_accessor :credit_name_local

    # ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิต (ภาษาอังกฤษ)
    attr_accessor :credit_name_foreign

    # keyword
    attr_accessor :keywords

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'system_code' => :'systemCode',
        :'category_id' => :'categoryId',
        :'category_name_local' => :'categoryNameLocal',
        :'category_name_foreign' => :'categoryNameForeign',
        :'debit_id' => :'debitId',
        :'debit_category' => :'debitCategory',
        :'debit_code' => :'debitCode',
        :'debit_name_local' => :'debitNameLocal',
        :'debit_name_foreign' => :'debitNameForeign',
        :'credit_id' => :'creditId',
        :'credit_category' => :'creditCategory',
        :'credit_code' => :'creditCode',
        :'credit_name_local' => :'creditNameLocal',
        :'credit_name_foreign' => :'creditNameForeign',
        :'keywords' => :'keywords'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'system_code' => :'Integer',
        :'category_id' => :'Integer',
        :'category_name_local' => :'String',
        :'category_name_foreign' => :'String',
        :'debit_id' => :'Integer',
        :'debit_category' => :'Integer',
        :'debit_code' => :'String',
        :'debit_name_local' => :'String',
        :'debit_name_foreign' => :'String',
        :'credit_id' => :'Integer',
        :'credit_category' => :'Integer',
        :'credit_code' => :'String',
        :'credit_name_local' => :'String',
        :'credit_name_foreign' => :'String',
        :'keywords' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::BusinessCategory` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::BusinessCategory`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'system_code')
        self.system_code = attributes[:'system_code']
      end

      if attributes.key?(:'category_id')
        self.category_id = attributes[:'category_id']
      end

      if attributes.key?(:'category_name_local')
        self.category_name_local = attributes[:'category_name_local']
      end

      if attributes.key?(:'category_name_foreign')
        self.category_name_foreign = attributes[:'category_name_foreign']
      end

      if attributes.key?(:'debit_id')
        self.debit_id = attributes[:'debit_id']
      end

      if attributes.key?(:'debit_category')
        self.debit_category = attributes[:'debit_category']
      end

      if attributes.key?(:'debit_code')
        self.debit_code = attributes[:'debit_code']
      end

      if attributes.key?(:'debit_name_local')
        self.debit_name_local = attributes[:'debit_name_local']
      end

      if attributes.key?(:'debit_name_foreign')
        self.debit_name_foreign = attributes[:'debit_name_foreign']
      end

      if attributes.key?(:'credit_id')
        self.credit_id = attributes[:'credit_id']
      end

      if attributes.key?(:'credit_category')
        self.credit_category = attributes[:'credit_category']
      end

      if attributes.key?(:'credit_code')
        self.credit_code = attributes[:'credit_code']
      end

      if attributes.key?(:'credit_name_local')
        self.credit_name_local = attributes[:'credit_name_local']
      end

      if attributes.key?(:'credit_name_foreign')
        self.credit_name_foreign = attributes[:'credit_name_foreign']
      end

      if attributes.key?(:'keywords')
        self.keywords = attributes[:'keywords']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          system_code == o.system_code &&
          category_id == o.category_id &&
          category_name_local == o.category_name_local &&
          category_name_foreign == o.category_name_foreign &&
          debit_id == o.debit_id &&
          debit_category == o.debit_category &&
          debit_code == o.debit_code &&
          debit_name_local == o.debit_name_local &&
          debit_name_foreign == o.debit_name_foreign &&
          credit_id == o.credit_id &&
          credit_category == o.credit_category &&
          credit_code == o.credit_code &&
          credit_name_local == o.credit_name_local &&
          credit_name_foreign == o.credit_name_foreign &&
          keywords == o.keywords
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, system_code, category_id, category_name_local, category_name_foreign, debit_id, debit_category, debit_code, debit_name_local, debit_name_foreign, credit_id, credit_category, credit_code, credit_name_local, credit_name_foreign, keywords].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
