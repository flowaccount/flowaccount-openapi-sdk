=begin
#FlowAccount Open API

## Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64

The version of the OpenAPI document: 2-oas3
Contact: developer_support@flowaccount.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module OpenapiClient
  class SimpleDocumentResponseAllOfData
    # id ของเอกสาร
    attr_accessor :record_id

    # id ของเอกสาร
    attr_accessor :document_id

    # เลขที่เอกสาร
    attr_accessor :document_serial

    # รหัส ลูกค้า/ผู้จำหน่าย
    attr_accessor :contact_code

    # ชื่อ ลูกค้า/ผู้จำหน่าย <br> <ex>Example: บริษัท ลูกค้า จำกัด, คุณลูกค้า ซื้อประจำ</ex>
    attr_accessor :contact_name

    # ที่อยู่ ลูกค้า/ผู้จำหน่าย
    attr_accessor :contact_address

    # เลขประจำตัวผู้เสียภาษี ลูกค้า หรือ ผู้จำหน่าย/ลูกค้า <br> (ถ้ามีจำเป็นต้องครบ 13 หลัก) <br> <ex>Example: 1234567890123 </ex>
    attr_accessor :contact_tax_id

    # สำนักงาน/สาขา
    attr_accessor :contact_branch

    # ชื่อผู้ติดต่อ
    attr_accessor :contact_person

    # อีเมลผู้ติดต่อ <br> <ex>Example: contact@email.com</ex>
    attr_accessor :contact_email

    # เบอร์มือถือผู้ติดต่อ <br> <ex>Example: 099-999-9999</ex>
    attr_accessor :contact_number

    # รหัสไปรษณีย์ติดต่อ
    attr_accessor :contact_zip_code

    # ประผู้ติดต่อ <br> 1 = บุคคลธรรมดา <br> 3 = นิติบุคคล
    attr_accessor :contact_group

    # วันที่เอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
    attr_accessor :published_on

    # รูปแบบเครดิต <br> 1 = เครดิต (วัน) <br> 3 = เงินสด  <br> 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)
    attr_accessor :credit_type

    # จำนวนวันที่ให้เครดิต <br> <ex>Example: 30</ex>
    attr_accessor :credit_days

    # วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
    attr_accessor :due_date

    # ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย <br> <ex>Example: sale@email.com or Mr.Sale Shop</ex>
    attr_accessor :sales_name

    # ชื่อโปรเจค
    attr_accessor :project_name

    # เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง <br> <ex>Example: INV2020010001</ex>
    attr_accessor :reference

    # มูลค่าเอกสารรวมภาษีแล้วหรือไม่
    attr_accessor :is_vat_inclusive

    # เปิดใช้งานฟังก์ชั่น ปรับลดท้ายเอกสาร <br> (เฉพาะเอกสารใบกำกับภาษี / ใบเสร็จรับเงิน และ ใบเสร็จรับเงิน)
    attr_accessor :use_receipt_deduction

    # มูลค่ารวมเป็นเงิน
    attr_accessor :sub_total

    # มูลค่าส่วนลดเป็นเปอร์เซ็นต์
    attr_accessor :discount_percentage

    # มูลค่าส่วนลดเป็นจำนวน (บาท)
    attr_accessor :discount_amount

    # มูลค่าหลังหักส่วนลด
    attr_accessor :total_after_discount

    # มูลค่าไม่รวมภาษีมูลค่าเพิ่ม
    attr_accessor :total_without_vat

    # มูลค่าหลังหักส่วนลด มีภาษีมูลค่าเพิ่ม 7%
    attr_accessor :is_vat

    # ภาษีมูลค่าเพิ่ม
    attr_accessor :vat_amount

    # จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว)
    attr_accessor :grand_total

    # แสดงหรือไม่แสดง หัก ณ ที่จ่ายท้ายเอกสาร
    attr_accessor :document_show_withholding_tax

    # ภาษี ณ ที่จ่าย (%)
    attr_accessor :document_withholding_tax_percentage

    # ประเภทรายการปรับลด <br> 1 = ส่วนลดพิเศษ <br> 3 = ค่านายหน้าและส่วนแบ่งการขาย <br> 5 = ค่าดำเนินการ <br> 7 = ปัดเศษ <br> (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)
    attr_accessor :document_deduction_type

    # จำนวนเงินยอดรายการปรับลด <br> (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)
    attr_accessor :document_deduction_amount

    # หมายเหตุเอกสาร
    attr_accessor :remarks

    # โน๊ตภายในบริษัท
    attr_accessor :internal_notes

    # ลายเซ็นอิเล็กทรอนิกส์และตรายาง
    attr_accessor :show_signature_or_stamp

    # รายการสินค้าใช้งานสำหรับเอกสาร Simple Document
    attr_accessor :items

    # ข้อมูลเอกสารปลายทางที่อ้างอิง ถึง เอกสารฉบับนี้
    attr_accessor :referenced_to_me

    # เอกสารต้นทางที่อ้างอิง ถึง เอกสารฉบับนี้
    attr_accessor :referenced_by_me

    attr_accessor :payments

    attr_accessor :company

    # เลขสถานะเอกสารฉบับนี้
    attr_accessor :status

    # ชื่อสถานะเอกสารฉบับนี้
    attr_accessor :status_string

    # เลขประเภทเอกสารฉบับนี้
    attr_accessor :document_type

    # สามารถลบเอกสาร :<br> true = ลบได้ <br> false = ลบไม่ได้
    attr_accessor :allow_delete

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'record_id' => :'recordId',
        :'document_id' => :'documentId',
        :'document_serial' => :'documentSerial',
        :'contact_code' => :'contactCode',
        :'contact_name' => :'contactName',
        :'contact_address' => :'contactAddress',
        :'contact_tax_id' => :'contactTaxId',
        :'contact_branch' => :'contactBranch',
        :'contact_person' => :'contactPerson',
        :'contact_email' => :'contactEmail',
        :'contact_number' => :'contactNumber',
        :'contact_zip_code' => :'contactZipCode',
        :'contact_group' => :'contactGroup',
        :'published_on' => :'publishedOn',
        :'credit_type' => :'creditType',
        :'credit_days' => :'creditDays',
        :'due_date' => :'dueDate',
        :'sales_name' => :'salesName',
        :'project_name' => :'projectName',
        :'reference' => :'reference',
        :'is_vat_inclusive' => :'isVatInclusive',
        :'use_receipt_deduction' => :'useReceiptDeduction',
        :'sub_total' => :'subTotal',
        :'discount_percentage' => :'discountPercentage',
        :'discount_amount' => :'discountAmount',
        :'total_after_discount' => :'totalAfterDiscount',
        :'total_without_vat' => :'totalWithoutVat',
        :'is_vat' => :'isVat',
        :'vat_amount' => :'vatAmount',
        :'grand_total' => :'grandTotal',
        :'document_show_withholding_tax' => :'documentShowWithholdingTax',
        :'document_withholding_tax_percentage' => :'documentWithholdingTaxPercentage',
        :'document_deduction_type' => :'documentDeductionType',
        :'document_deduction_amount' => :'documentDeductionAmount',
        :'remarks' => :'remarks',
        :'internal_notes' => :'internalNotes',
        :'show_signature_or_stamp' => :'showSignatureOrStamp',
        :'items' => :'items',
        :'referenced_to_me' => :'referencedToMe',
        :'referenced_by_me' => :'referencedByMe',
        :'payments' => :'payments',
        :'company' => :'company',
        :'status' => :'status',
        :'status_string' => :'statusString',
        :'document_type' => :'documentType',
        :'allow_delete' => :'allowDelete'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'record_id' => :'Integer',
        :'document_id' => :'Integer',
        :'document_serial' => :'String',
        :'contact_code' => :'String',
        :'contact_name' => :'String',
        :'contact_address' => :'String',
        :'contact_tax_id' => :'String',
        :'contact_branch' => :'String',
        :'contact_person' => :'String',
        :'contact_email' => :'String',
        :'contact_number' => :'String',
        :'contact_zip_code' => :'String',
        :'contact_group' => :'Integer',
        :'published_on' => :'Date',
        :'credit_type' => :'Integer',
        :'credit_days' => :'Integer',
        :'due_date' => :'Date',
        :'sales_name' => :'String',
        :'project_name' => :'String',
        :'reference' => :'String',
        :'is_vat_inclusive' => :'Boolean',
        :'use_receipt_deduction' => :'Boolean',
        :'sub_total' => :'Float',
        :'discount_percentage' => :'Integer',
        :'discount_amount' => :'Float',
        :'total_after_discount' => :'Float',
        :'total_without_vat' => :'Float',
        :'is_vat' => :'Boolean',
        :'vat_amount' => :'Float',
        :'grand_total' => :'Float',
        :'document_show_withholding_tax' => :'Boolean',
        :'document_withholding_tax_percentage' => :'Integer',
        :'document_deduction_type' => :'Integer',
        :'document_deduction_amount' => :'Float',
        :'remarks' => :'String',
        :'internal_notes' => :'String',
        :'show_signature_or_stamp' => :'Boolean',
        :'items' => :'Array<SimpleProductItem>',
        :'referenced_to_me' => :'Array<ReferencedToMe>',
        :'referenced_by_me' => :'Array<ReferencedByMe>',
        :'payments' => :'SimpleDocumentResponseAllOfDataPayments',
        :'company' => :'SimpleDocumentResponseAllOfDataCompany',
        :'status' => :'Integer',
        :'status_string' => :'Integer',
        :'document_type' => :'Integer',
        :'allow_delete' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::SimpleDocumentResponseAllOfData` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::SimpleDocumentResponseAllOfData`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'record_id')
        self.record_id = attributes[:'record_id']
      else
        self.record_id = 0
      end

      if attributes.key?(:'document_id')
        self.document_id = attributes[:'document_id']
      else
        self.document_id = 0
      end

      if attributes.key?(:'document_serial')
        self.document_serial = attributes[:'document_serial']
      end

      if attributes.key?(:'contact_code')
        self.contact_code = attributes[:'contact_code']
      end

      if attributes.key?(:'contact_name')
        self.contact_name = attributes[:'contact_name']
      end

      if attributes.key?(:'contact_address')
        self.contact_address = attributes[:'contact_address']
      end

      if attributes.key?(:'contact_tax_id')
        self.contact_tax_id = attributes[:'contact_tax_id']
      end

      if attributes.key?(:'contact_branch')
        self.contact_branch = attributes[:'contact_branch']
      end

      if attributes.key?(:'contact_person')
        self.contact_person = attributes[:'contact_person']
      end

      if attributes.key?(:'contact_email')
        self.contact_email = attributes[:'contact_email']
      end

      if attributes.key?(:'contact_number')
        self.contact_number = attributes[:'contact_number']
      end

      if attributes.key?(:'contact_zip_code')
        self.contact_zip_code = attributes[:'contact_zip_code']
      end

      if attributes.key?(:'contact_group')
        self.contact_group = attributes[:'contact_group']
      else
        self.contact_group = 1
      end

      if attributes.key?(:'published_on')
        self.published_on = attributes[:'published_on']
      end

      if attributes.key?(:'credit_type')
        self.credit_type = attributes[:'credit_type']
      else
        self.credit_type = 1
      end

      if attributes.key?(:'credit_days')
        self.credit_days = attributes[:'credit_days']
      else
        self.credit_days = 0
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'sales_name')
        self.sales_name = attributes[:'sales_name']
      else
        self.sales_name = 'อีเมล หรือ ชื่อผู้สร้างเอกสาร'
      end

      if attributes.key?(:'project_name')
        self.project_name = attributes[:'project_name']
      end

      if attributes.key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.key?(:'is_vat_inclusive')
        self.is_vat_inclusive = attributes[:'is_vat_inclusive']
      else
        self.is_vat_inclusive = false
      end

      if attributes.key?(:'use_receipt_deduction')
        self.use_receipt_deduction = attributes[:'use_receipt_deduction']
      else
        self.use_receipt_deduction = false
      end

      if attributes.key?(:'sub_total')
        self.sub_total = attributes[:'sub_total']
      else
        self.sub_total = 0
      end

      if attributes.key?(:'discount_percentage')
        self.discount_percentage = attributes[:'discount_percentage']
      else
        self.discount_percentage = 0
      end

      if attributes.key?(:'discount_amount')
        self.discount_amount = attributes[:'discount_amount']
      else
        self.discount_amount = 0
      end

      if attributes.key?(:'total_after_discount')
        self.total_after_discount = attributes[:'total_after_discount']
      end

      if attributes.key?(:'total_without_vat')
        self.total_without_vat = attributes[:'total_without_vat']
      end

      if attributes.key?(:'is_vat')
        self.is_vat = attributes[:'is_vat']
      else
        self.is_vat = false
      end

      if attributes.key?(:'vat_amount')
        self.vat_amount = attributes[:'vat_amount']
      end

      if attributes.key?(:'grand_total')
        self.grand_total = attributes[:'grand_total']
      end

      if attributes.key?(:'document_show_withholding_tax')
        self.document_show_withholding_tax = attributes[:'document_show_withholding_tax']
      else
        self.document_show_withholding_tax = false
      end

      if attributes.key?(:'document_withholding_tax_percentage')
        self.document_withholding_tax_percentage = attributes[:'document_withholding_tax_percentage']
      else
        self.document_withholding_tax_percentage = 0
      end

      if attributes.key?(:'document_deduction_type')
        self.document_deduction_type = attributes[:'document_deduction_type']
      else
        self.document_deduction_type = 0
      end

      if attributes.key?(:'document_deduction_amount')
        self.document_deduction_amount = attributes[:'document_deduction_amount']
      else
        self.document_deduction_amount = 0
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'internal_notes')
        self.internal_notes = attributes[:'internal_notes']
      end

      if attributes.key?(:'show_signature_or_stamp')
        self.show_signature_or_stamp = attributes[:'show_signature_or_stamp']
      else
        self.show_signature_or_stamp = true
      end

      if attributes.key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.key?(:'referenced_to_me')
        if (value = attributes[:'referenced_to_me']).is_a?(Array)
          self.referenced_to_me = value
        end
      end

      if attributes.key?(:'referenced_by_me')
        if (value = attributes[:'referenced_by_me']).is_a?(Array)
          self.referenced_by_me = value
        end
      end

      if attributes.key?(:'payments')
        self.payments = attributes[:'payments']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'status_string')
        self.status_string = attributes[:'status_string']
      end

      if attributes.key?(:'document_type')
        self.document_type = attributes[:'document_type']
      end

      if attributes.key?(:'allow_delete')
        self.allow_delete = attributes[:'allow_delete']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          record_id == o.record_id &&
          document_id == o.document_id &&
          document_serial == o.document_serial &&
          contact_code == o.contact_code &&
          contact_name == o.contact_name &&
          contact_address == o.contact_address &&
          contact_tax_id == o.contact_tax_id &&
          contact_branch == o.contact_branch &&
          contact_person == o.contact_person &&
          contact_email == o.contact_email &&
          contact_number == o.contact_number &&
          contact_zip_code == o.contact_zip_code &&
          contact_group == o.contact_group &&
          published_on == o.published_on &&
          credit_type == o.credit_type &&
          credit_days == o.credit_days &&
          due_date == o.due_date &&
          sales_name == o.sales_name &&
          project_name == o.project_name &&
          reference == o.reference &&
          is_vat_inclusive == o.is_vat_inclusive &&
          use_receipt_deduction == o.use_receipt_deduction &&
          sub_total == o.sub_total &&
          discount_percentage == o.discount_percentage &&
          discount_amount == o.discount_amount &&
          total_after_discount == o.total_after_discount &&
          total_without_vat == o.total_without_vat &&
          is_vat == o.is_vat &&
          vat_amount == o.vat_amount &&
          grand_total == o.grand_total &&
          document_show_withholding_tax == o.document_show_withholding_tax &&
          document_withholding_tax_percentage == o.document_withholding_tax_percentage &&
          document_deduction_type == o.document_deduction_type &&
          document_deduction_amount == o.document_deduction_amount &&
          remarks == o.remarks &&
          internal_notes == o.internal_notes &&
          show_signature_or_stamp == o.show_signature_or_stamp &&
          items == o.items &&
          referenced_to_me == o.referenced_to_me &&
          referenced_by_me == o.referenced_by_me &&
          payments == o.payments &&
          company == o.company &&
          status == o.status &&
          status_string == o.status_string &&
          document_type == o.document_type &&
          allow_delete == o.allow_delete
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [record_id, document_id, document_serial, contact_code, contact_name, contact_address, contact_tax_id, contact_branch, contact_person, contact_email, contact_number, contact_zip_code, contact_group, published_on, credit_type, credit_days, due_date, sales_name, project_name, reference, is_vat_inclusive, use_receipt_deduction, sub_total, discount_percentage, discount_amount, total_after_discount, total_without_vat, is_vat, vat_amount, grand_total, document_show_withholding_tax, document_withholding_tax_percentage, document_deduction_type, document_deduction_amount, remarks, internal_notes, show_signature_or_stamp, items, referenced_to_me, referenced_by_me, payments, company, status, status_string, document_type, allow_delete].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
