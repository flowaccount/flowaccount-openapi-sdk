=begin
#FlowAccount Open API

## Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64

The version of the OpenAPI document: 2-oas3
Contact: developer_support@flowaccount.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module OpenapiClient
  class Contact
    # เลข id Contact
    attr_accessor :id

    # ประเภทผู้ติดต่อ: 1 = บุคคลธรรมดา / 3 = นิติบุคคล
    attr_accessor :contact_group

    # ประเภท: 3 = ลูกค้า / 5 = ผู้จำหน่าย / 7 = ผู้จำหน่ายและลูกค้า
    attr_accessor :contact_type

    # รหัสผู้ติดต่อ ​<br><ex>Example: C0001</ex>
    attr_accessor :contact_code

    # ชื่อผู้ธุรกิจ หรือ ชื่อลูกค้า หรือ ชื่อผู้จำหน่าย
    attr_accessor :contact_name

    # ที่อยู่ผู้ติดต่อ
    attr_accessor :contact_address

    # รหัสไปรษณีย์ติดต่อ <ex>Example: 10140 </ex>
    attr_accessor :contact_zip_code

    # เลขประจำตัวผู้เสียภาษี 13 หลัก ​<br><ex>Example: 1234567890123</ex>
    attr_accessor :contact_tax_id

    # รหัสสาขา
    attr_accessor :contact_branch_code

    # ชื่อสาขา
    attr_accessor :contact_branch

    # ชื่อผู้ติดต่อ
    attr_accessor :contact_person

    # อีเมลผู้ติดต่อ <br> <ex>Example: contact@email.com</ex>
    attr_accessor :contact_email

    # เบอร์มือถือผู้ติดต่อ <br> <ex>Example: 099-999-9999</ex>
    attr_accessor :contact_mobile

    # รหัสธนาคาร <br> 1 = ธนาคารกรุงเทพ <br> 2 = ธนาคารกสิกรไทย <br> 3 = ธนาคารกรุงไทย <br> 4 = ธนาคารทหารไทย <br> 5 = ธนาคารไทยพาณิชย์ <br> 6 = ธนาคารสแตนดาร์ดชาร์เตอร์ด <br> 7 = ธนาคารซีไอเอ็มบี ไทย <br> 8 = ธนาคารยูโอบี <br> 10 = ธนาคารกรุงศรีอยุธยา <br> 11 = ธนาคารออมสิน <br> 12 = ธนาคารธนชาต <br> 13 = ธนาคารแลนด์ แอนด์ เฮ้าส์ <br> 14 = ธนาคารเกียรตินาคิน <br> 15 = ธนาคารซิตี้แบงก์ <br> 16 = ธนาคารทิสโก้ <br> 53 = ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร <br> 54 = ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย <br> 55 = ธนาคารอาคารสงเคราะห์ <br> 56 = ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย <br> 57 = ธนาคารอิสลามแห่งประเทศไทย <br> 58 = ธนาคารแห่งประเทศจีน (ไทย) <br> 59 = ธนาคารไอซีบีซี (ไทย) <br> 60 = ธนาคารเมกะ สากลพาณิชย์ <br> 61 = ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น <br> 62 = ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) <br> 63 = ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น <br> 64 = ธนาคารไทยเครดิต เพื่อรายย่อย 
    attr_accessor :contact_bank_id

    # เลขที่บัญชีธนาคาร <br> <ex>Example: 1111111111</ex>
    attr_accessor :contact_bank_account_number

    # สาขาธนาคาร <br> <ex>Example: บางรัก</ex>
    attr_accessor :contact_bank_branch

    # ประเภทบัญชีธนาคาร: <br> 1 = บัญชีออมทรัพย์ <br> 3 = บัญชีกระแสรายวัน
    attr_accessor :contact_bank_account_type

    # เครดิต (วัน) <br> <ex>Example: 30</ex>
    attr_accessor :contact_credit_days

    # เบอร์โทรศัพท์สำนักงาน <br> <ex>Example: 02-999-9999</ex>
    attr_accessor :contact_office

    # เบอร์โทรสาร <br> <ex>Example: 02-888-8888</ex>
    attr_accessor :contact_fax

    # เว็บไซต์ ผู้ติดต่อ <br> <ex>Eample: www.flowaccount.com</ex>
    attr_accessor :contact_website

    # ที่อยู่สำหรับจัดส่ง
    attr_accessor :conatact_shipping_address

    # โน๊ต
    attr_accessor :contact_note

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'contact_group' => :'contactGroup',
        :'contact_type' => :'contactType',
        :'contact_code' => :'contactCode',
        :'contact_name' => :'contactName',
        :'contact_address' => :'contactAddress',
        :'contact_zip_code' => :'contactZipCode',
        :'contact_tax_id' => :'contactTaxId',
        :'contact_branch_code' => :'contactBranchCode',
        :'contact_branch' => :'contactBranch',
        :'contact_person' => :'contactPerson',
        :'contact_email' => :'contactEmail',
        :'contact_mobile' => :'contactMobile',
        :'contact_bank_id' => :'contactBankId',
        :'contact_bank_account_number' => :'contactBankAccountNumber',
        :'contact_bank_branch' => :'contactBankBranch',
        :'contact_bank_account_type' => :'contactBankAccountType',
        :'contact_credit_days' => :'contactCreditDays',
        :'contact_office' => :'contactOffice',
        :'contact_fax' => :'contactFax',
        :'contact_website' => :'contactWebsite',
        :'conatact_shipping_address' => :'conatactShippingAddress',
        :'contact_note' => :'contactNote'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'contact_group' => :'Integer',
        :'contact_type' => :'Integer',
        :'contact_code' => :'Integer',
        :'contact_name' => :'String',
        :'contact_address' => :'String',
        :'contact_zip_code' => :'String',
        :'contact_tax_id' => :'Integer',
        :'contact_branch_code' => :'String',
        :'contact_branch' => :'String',
        :'contact_person' => :'String',
        :'contact_email' => :'String',
        :'contact_mobile' => :'String',
        :'contact_bank_id' => :'Integer',
        :'contact_bank_account_number' => :'Integer',
        :'contact_bank_branch' => :'String',
        :'contact_bank_account_type' => :'Integer',
        :'contact_credit_days' => :'Integer',
        :'contact_office' => :'String',
        :'contact_fax' => :'String',
        :'contact_website' => :'String',
        :'conatact_shipping_address' => :'String',
        :'contact_note' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Contact` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Contact`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'contact_group')
        self.contact_group = attributes[:'contact_group']
      else
        self.contact_group = 3
      end

      if attributes.key?(:'contact_type')
        self.contact_type = attributes[:'contact_type']
      else
        self.contact_type = 3
      end

      if attributes.key?(:'contact_code')
        self.contact_code = attributes[:'contact_code']
      end

      if attributes.key?(:'contact_name')
        self.contact_name = attributes[:'contact_name']
      end

      if attributes.key?(:'contact_address')
        self.contact_address = attributes[:'contact_address']
      end

      if attributes.key?(:'contact_zip_code')
        self.contact_zip_code = attributes[:'contact_zip_code']
      end

      if attributes.key?(:'contact_tax_id')
        self.contact_tax_id = attributes[:'contact_tax_id']
      end

      if attributes.key?(:'contact_branch_code')
        self.contact_branch_code = attributes[:'contact_branch_code']
      end

      if attributes.key?(:'contact_branch')
        self.contact_branch = attributes[:'contact_branch']
      else
        self.contact_branch = 'สำนักงานใหญ่'
      end

      if attributes.key?(:'contact_person')
        self.contact_person = attributes[:'contact_person']
      end

      if attributes.key?(:'contact_email')
        self.contact_email = attributes[:'contact_email']
      end

      if attributes.key?(:'contact_mobile')
        self.contact_mobile = attributes[:'contact_mobile']
      end

      if attributes.key?(:'contact_bank_id')
        self.contact_bank_id = attributes[:'contact_bank_id']
      else
        self.contact_bank_id = 0
      end

      if attributes.key?(:'contact_bank_account_number')
        self.contact_bank_account_number = attributes[:'contact_bank_account_number']
      end

      if attributes.key?(:'contact_bank_branch')
        self.contact_bank_branch = attributes[:'contact_bank_branch']
      end

      if attributes.key?(:'contact_bank_account_type')
        self.contact_bank_account_type = attributes[:'contact_bank_account_type']
      else
        self.contact_bank_account_type = 1
      end

      if attributes.key?(:'contact_credit_days')
        self.contact_credit_days = attributes[:'contact_credit_days']
      else
        self.contact_credit_days = 0
      end

      if attributes.key?(:'contact_office')
        self.contact_office = attributes[:'contact_office']
      end

      if attributes.key?(:'contact_fax')
        self.contact_fax = attributes[:'contact_fax']
      end

      if attributes.key?(:'contact_website')
        self.contact_website = attributes[:'contact_website']
      end

      if attributes.key?(:'conatact_shipping_address')
        self.conatact_shipping_address = attributes[:'conatact_shipping_address']
      end

      if attributes.key?(:'contact_note')
        self.contact_note = attributes[:'contact_note']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @contact_group.nil?
        invalid_properties.push('invalid value for "contact_group", contact_group cannot be nil.')
      end

      if @contact_type.nil?
        invalid_properties.push('invalid value for "contact_type", contact_type cannot be nil.')
      end

      if @contact_name.nil?
        invalid_properties.push('invalid value for "contact_name", contact_name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @contact_group.nil?
      return false if @contact_type.nil?
      return false if @contact_name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          contact_group == o.contact_group &&
          contact_type == o.contact_type &&
          contact_code == o.contact_code &&
          contact_name == o.contact_name &&
          contact_address == o.contact_address &&
          contact_zip_code == o.contact_zip_code &&
          contact_tax_id == o.contact_tax_id &&
          contact_branch_code == o.contact_branch_code &&
          contact_branch == o.contact_branch &&
          contact_person == o.contact_person &&
          contact_email == o.contact_email &&
          contact_mobile == o.contact_mobile &&
          contact_bank_id == o.contact_bank_id &&
          contact_bank_account_number == o.contact_bank_account_number &&
          contact_bank_branch == o.contact_bank_branch &&
          contact_bank_account_type == o.contact_bank_account_type &&
          contact_credit_days == o.contact_credit_days &&
          contact_office == o.contact_office &&
          contact_fax == o.contact_fax &&
          contact_website == o.contact_website &&
          conatact_shipping_address == o.conatact_shipping_address &&
          contact_note == o.contact_note
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, contact_group, contact_type, contact_code, contact_name, contact_address, contact_zip_code, contact_tax_id, contact_branch_code, contact_branch, contact_person, contact_email, contact_mobile, contact_bank_id, contact_bank_account_number, contact_bank_branch, contact_bank_account_type, contact_credit_days, contact_office, contact_fax, contact_website, conatact_shipping_address, contact_note].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
