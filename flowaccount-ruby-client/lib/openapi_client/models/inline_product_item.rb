=begin
#FlowAccount Open API

## Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64

The version of the OpenAPI document: 2-oas3
Contact: developer_support@flowaccount.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module OpenapiClient
  class InlineProductItem
    # ประเภทสินค้า <br> 1 = บริการ (service) <br> 3 = สินค้าไม่นับสต๊อก (non inventory) <br> 5 = สินค้านับสต๊อก (inventory)
    attr_accessor :type

    # ชื่อสินค้า
    attr_accessor :name

    # รายละเอียดสินค้า
    attr_accessor :description

    # จำนวนสินค้า
    attr_accessor :quantity

    # หน่วยสินค้า
    attr_accessor :unit_name

    # ราคาสินค้าต่อหน่วย
    attr_accessor :price_per_unit

    # ราคารวมสินค้า
    attr_accessor :total

    # เลือกลงบันทึกบัญชีรายได้ สำหรับเอกสารฝั่งขาย <br> <ex>Example: 41111</ex>
    attr_accessor :sell_chart_of_account_code

    # เลือกลงบันทึกบัญชีค่าใช้จ่าย สำหรับเอกสารฝั่งซื้อ <br> <ex>Example: 51111.02</ex>
    attr_accessor :buy_chart_of_account_code

    # จำนวนส่วนลดสินค้า
    attr_accessor :discount_amount

    # รูปแบบภาษี <br> 7 = ภาษี 7% <br> 0 = ภาษี 0% <br> -1 = ยกเว้นภาษี
    attr_accessor :vat_rate

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'type',
        :'name' => :'name',
        :'description' => :'description',
        :'quantity' => :'quantity',
        :'unit_name' => :'unitName',
        :'price_per_unit' => :'pricePerUnit',
        :'total' => :'total',
        :'sell_chart_of_account_code' => :'sellChartOfAccountCode',
        :'buy_chart_of_account_code' => :'buyChartOfAccountCode',
        :'discount_amount' => :'discountAmount',
        :'vat_rate' => :'vatRate'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'type' => :'Integer',
        :'name' => :'String',
        :'description' => :'String',
        :'quantity' => :'Float',
        :'unit_name' => :'String',
        :'price_per_unit' => :'Float',
        :'total' => :'Float',
        :'sell_chart_of_account_code' => :'String',
        :'buy_chart_of_account_code' => :'String',
        :'discount_amount' => :'Float',
        :'vat_rate' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'InlineProductItemAllOf',
      :'ProductItem'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::InlineProductItem` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::InlineProductItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      else
        self.type = 1
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'unit_name')
        self.unit_name = attributes[:'unit_name']
      end

      if attributes.key?(:'price_per_unit')
        self.price_per_unit = attributes[:'price_per_unit']
      end

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.key?(:'sell_chart_of_account_code')
        self.sell_chart_of_account_code = attributes[:'sell_chart_of_account_code']
      end

      if attributes.key?(:'buy_chart_of_account_code')
        self.buy_chart_of_account_code = attributes[:'buy_chart_of_account_code']
      end

      if attributes.key?(:'discount_amount')
        self.discount_amount = attributes[:'discount_amount']
      else
        self.discount_amount = 0
      end

      if attributes.key?(:'vat_rate')
        self.vat_rate = attributes[:'vat_rate']
      else
        self.vat_rate = 7
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @quantity.nil?
        invalid_properties.push('invalid value for "quantity", quantity cannot be nil.')
      end

      if !@unit_name.nil? && @unit_name.to_s.length > 7
        invalid_properties.push('invalid value for "unit_name", the character length must be smaller than or equal to 7.')
      end

      if @price_per_unit.nil?
        invalid_properties.push('invalid value for "price_per_unit", price_per_unit cannot be nil.')
      end

      if @total.nil?
        invalid_properties.push('invalid value for "total", total cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @quantity.nil?
      return false if !@unit_name.nil? && @unit_name.to_s.length > 7
      return false if @price_per_unit.nil?
      return false if @total.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_name Value to be assigned
    def unit_name=(unit_name)
      if !unit_name.nil? && unit_name.to_s.length > 7
        fail ArgumentError, 'invalid value for "unit_name", the character length must be smaller than or equal to 7.'
      end

      @unit_name = unit_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          name == o.name &&
          description == o.description &&
          quantity == o.quantity &&
          unit_name == o.unit_name &&
          price_per_unit == o.price_per_unit &&
          total == o.total &&
          sell_chart_of_account_code == o.sell_chart_of_account_code &&
          buy_chart_of_account_code == o.buy_chart_of_account_code &&
          discount_amount == o.discount_amount &&
          vat_rate == o.vat_rate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [type, name, description, quantity, unit_name, price_per_unit, total, sell_chart_of_account_code, buy_chart_of_account_code, discount_amount, vat_rate].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
