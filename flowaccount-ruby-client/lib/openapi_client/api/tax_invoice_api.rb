=begin
#FlowAccount Open API

## Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64

The version of the OpenAPI document: 2-oas3
Contact: developer_support@flowaccount.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module OpenapiClient
  class TaxInvoiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Send Email tax invoice document
    # ส่งเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
    # @param authorization [String] 
    # @param send_email_coppies [SendEmailCoppies] 
    # @param [Hash] opts the optional parameters
    # @return [SendEmailResponse]
    def tax_invoices_email_document_post(authorization, send_email_coppies, opts = {})
      data, _status_code, _headers = tax_invoices_email_document_post_with_http_info(authorization, send_email_coppies, opts)
      data
    end

    # Send Email tax invoice document
    # ส่งเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
    # @param authorization [String] 
    # @param send_email_coppies [SendEmailCoppies] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SendEmailResponse, Integer, Hash)>] SendEmailResponse data, response status code and response headers
    def tax_invoices_email_document_post_with_http_info(authorization, send_email_coppies, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_email_document_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_email_document_post"
      end
      # verify the required parameter 'send_email_coppies' is set
      if @api_client.config.client_side_validation && send_email_coppies.nil?
        fail ArgumentError, "Missing the required parameter 'send_email_coppies' when calling TaxInvoiceApi.tax_invoices_email_document_post"
      end
      # resource path
      local_var_path = '/tax-invoices/email-document'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(send_email_coppies) 

      # return_type
      return_type = opts[:return_type] || 'SendEmailResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_email_document_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get list all tax invocie documents.
    # เรียกดูข้อมูลเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน ทั้งหมดในระบบ
    # @param current_page [Integer] Query current page document tax invoices. &lt;br&gt;Example Pattern: &lt;ex&gt;/tax-invoices?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/tax-invoices?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;
    # @param page_size [Integer] Query document tax invoices list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /tax-invoices?pageSize&#x3D;20 &lt;/ex&gt;
    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Query document tax invoices list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /tax-invoices?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/tax-invoices?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/tax-invoices?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/tax-invoices?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;
    # @option opts [String] :filter 
    # @return [AllDocumentResponse]
    def tax_invoices_get(current_page, page_size, authorization, opts = {})
      data, _status_code, _headers = tax_invoices_get_with_http_info(current_page, page_size, authorization, opts)
      data
    end

    # Get list all tax invocie documents.
    # เรียกดูข้อมูลเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน ทั้งหมดในระบบ
    # @param current_page [Integer] Query current page document tax invoices. &lt;br&gt;Example Pattern: &lt;ex&gt;/tax-invoices?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/tax-invoices?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;
    # @param page_size [Integer] Query document tax invoices list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /tax-invoices?pageSize&#x3D;20 &lt;/ex&gt;
    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by Query document tax invoices list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /tax-invoices?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/tax-invoices?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/tax-invoices?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/tax-invoices?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;
    # @option opts [String] :filter 
    # @return [Array<(AllDocumentResponse, Integer, Hash)>] AllDocumentResponse data, response status code and response headers
    def tax_invoices_get_with_http_info(current_page, page_size, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_get ...'
      end
      # verify the required parameter 'current_page' is set
      if @api_client.config.client_side_validation && current_page.nil?
        fail ArgumentError, "Missing the required parameter 'current_page' when calling TaxInvoiceApi.tax_invoices_get"
      end
      # verify the required parameter 'page_size' is set
      if @api_client.config.client_side_validation && page_size.nil?
        fail ArgumentError, "Missing the required parameter 'page_size' when calling TaxInvoiceApi.tax_invoices_get"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_get"
      end
      # resource path
      local_var_path = '/tax-invoices'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'currentPage'] = current_page
      query_params[:'pageSize'] = page_size
      query_params[:'sortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AllDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Attachment to tax Invoices document.
    # แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ
    # @param authorization [String] 
    # @param id [String] documentId หรือ recordId ของเอกสารที่ต้องการแนบ
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary
    # @return [AttachmentResponse]
    def tax_invoices_id_attachment_post(authorization, id, opts = {})
      data, _status_code, _headers = tax_invoices_id_attachment_post_with_http_info(authorization, id, opts)
      data
    end

    # Add Attachment to tax Invoices document.
    # แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ
    # @param authorization [String] 
    # @param id [String] documentId หรือ recordId ของเอกสารที่ต้องการแนบ
    # @param [Hash] opts the optional parameters
    # @option opts [File] :file รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary
    # @return [Array<(AttachmentResponse, Integer, Hash)>] AttachmentResponse data, response status code and response headers
    def tax_invoices_id_attachment_post_with_http_info(authorization, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_id_attachment_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_id_attachment_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TaxInvoiceApi.tax_invoices_id_attachment_post"
      end
      # resource path
      local_var_path = '/tax-invoices/{id}/attachment'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['file'] = opts[:'file'] if !opts[:'file'].nil?

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'AttachmentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_id_attachment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete tax invoices document.
    # ลบ เอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ <br> ** การลบเอกสาร เอกสารต้องอยู่ในสถานะรอดำเนินการ 
    # @param authorization [String] 
    # @param id [String] ID เอกสารใช้ recordId
    # @param [Hash] opts the optional parameters
    # @return [DeleteResponse]
    def tax_invoices_id_delete(authorization, id, opts = {})
      data, _status_code, _headers = tax_invoices_id_delete_with_http_info(authorization, id, opts)
      data
    end

    # Delete tax invoices document.
    # ลบ เอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะรอดำเนินการ 
    # @param authorization [String] 
    # @param id [String] ID เอกสารใช้ recordId
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteResponse, Integer, Hash)>] DeleteResponse data, response status code and response headers
    def tax_invoices_id_delete_with_http_info(authorization, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_id_delete ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_id_delete"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TaxInvoiceApi.tax_invoices_id_delete"
      end
      # resource path
      local_var_path = '/tax-invoices/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DeleteResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get tax invoices document.
    # เรียกดูข้อมูลเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ
    # @param authorization [String] ID เอกสารใช้ recordId
    # @param id [String] ID เอกสารใช้ recordId
    # @param [Hash] opts the optional parameters
    # @return [SimpleDocumentResponse]
    def tax_invoices_id_get(authorization, id, opts = {})
      data, _status_code, _headers = tax_invoices_id_get_with_http_info(authorization, id, opts)
      data
    end

    # Get tax invoices document.
    # เรียกดูข้อมูลเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ
    # @param authorization [String] ID เอกสารใช้ recordId
    # @param id [String] ID เอกสารใช้ recordId
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimpleDocumentResponse, Integer, Hash)>] SimpleDocumentResponse data, response status code and response headers
    def tax_invoices_id_get_with_http_info(authorization, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_id_get ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_id_get"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TaxInvoiceApi.tax_invoices_id_get"
      end
      # resource path
      local_var_path = '/tax-invoices/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SimpleDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change paid status of tax-invoice document.
    # เก็บเงิน เอกสารใบกำกับภาษี/ใบเสร็จรับเงิน เปลี่ยนสถานะเป็น เก็บเงินแล้ว
    # @param authorization [String] 
    # @param id [String] ID เอกสารใช้ recordId หรือ documentId
    # @param payment_receiving_document [PaymentReceivingDocument] 
    # @param [Hash] opts the optional parameters
    # @return [InlineDocumentResponse]
    def tax_invoices_id_payment_post(authorization, id, payment_receiving_document, opts = {})
      data, _status_code, _headers = tax_invoices_id_payment_post_with_http_info(authorization, id, payment_receiving_document, opts)
      data
    end

    # Change paid status of tax-invoice document.
    # เก็บเงิน เอกสารใบกำกับภาษี/ใบเสร็จรับเงิน เปลี่ยนสถานะเป็น เก็บเงินแล้ว
    # @param authorization [String] 
    # @param id [String] ID เอกสารใช้ recordId หรือ documentId
    # @param payment_receiving_document [PaymentReceivingDocument] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineDocumentResponse, Integer, Hash)>] InlineDocumentResponse data, response status code and response headers
    def tax_invoices_id_payment_post_with_http_info(authorization, id, payment_receiving_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_id_payment_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_id_payment_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TaxInvoiceApi.tax_invoices_id_payment_post"
      end
      # verify the required parameter 'payment_receiving_document' is set
      if @api_client.config.client_side_validation && payment_receiving_document.nil?
        fail ArgumentError, "Missing the required parameter 'payment_receiving_document' when calling TaxInvoiceApi.tax_invoices_id_payment_post"
      end
      # resource path
      local_var_path = '/tax-invoices/{id}/payment'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(payment_receiving_document) 

      # return_type
      return_type = opts[:return_type] || 'InlineDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_id_payment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit tax invoices document.
    # แก้ไขข้อมูลเอกสารใบกำกับภาษี ตามเลขที่เอกสารที่ต้องการและเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
    # @param authorization [String] 
    # @param id [String] ID เอกสารใช้ recordId
    # @param update_inline_document [UpdateInlineDocument] 
    # @param [Hash] opts the optional parameters
    # @return [InlineDocumentResponse]
    def tax_invoices_id_put(authorization, id, update_inline_document, opts = {})
      data, _status_code, _headers = tax_invoices_id_put_with_http_info(authorization, id, update_inline_document, opts)
      data
    end

    # Edit tax invoices document.
    # แก้ไขข้อมูลเอกสารใบกำกับภาษี ตามเลขที่เอกสารที่ต้องการและเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
    # @param authorization [String] 
    # @param id [String] ID เอกสารใช้ recordId
    # @param update_inline_document [UpdateInlineDocument] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineDocumentResponse, Integer, Hash)>] InlineDocumentResponse data, response status code and response headers
    def tax_invoices_id_put_with_http_info(authorization, id, update_inline_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_id_put ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_id_put"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TaxInvoiceApi.tax_invoices_id_put"
      end
      # verify the required parameter 'update_inline_document' is set
      if @api_client.config.client_side_validation && update_inline_document.nil?
        fail ArgumentError, "Missing the required parameter 'update_inline_document' when calling TaxInvoiceApi.tax_invoices_id_put"
      end
      # resource path
      local_var_path = '/tax-invoices/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(update_inline_document) 

      # return_type
      return_type = opts[:return_type] || 'InlineDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Change status of tax invoices document.
    # เปลี่ยนสถานะของเอกสารเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
    # @param authorization [String] 
    # @param id [String] ID เอกสารใช้ recordId
    # @param status_id [String] เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; invoicedelivered &#x3D; รอเก็บเงิน &lt;br&gt; void &#x3D; ยกเลิก
    # @param [Hash] opts the optional parameters
    # @return [InlineDocumentResponse]
    def tax_invoices_id_status_status_id_post(authorization, id, status_id, opts = {})
      data, _status_code, _headers = tax_invoices_id_status_status_id_post_with_http_info(authorization, id, status_id, opts)
      data
    end

    # Change status of tax invoices document.
    # เปลี่ยนสถานะของเอกสารเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
    # @param authorization [String] 
    # @param id [String] ID เอกสารใช้ recordId
    # @param status_id [String] เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; invoicedelivered &#x3D; รอเก็บเงิน &lt;br&gt; void &#x3D; ยกเลิก
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineDocumentResponse, Integer, Hash)>] InlineDocumentResponse data, response status code and response headers
    def tax_invoices_id_status_status_id_post_with_http_info(authorization, id, status_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_id_status_status_id_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_id_status_status_id_post"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling TaxInvoiceApi.tax_invoices_id_status_status_id_post"
      end
      # verify the required parameter 'status_id' is set
      if @api_client.config.client_side_validation && status_id.nil?
        fail ArgumentError, "Missing the required parameter 'status_id' when calling TaxInvoiceApi.tax_invoices_id_status_status_id_post"
      end
      # resource path
      local_var_path = '/tax-invoices/{id}/status/{statusId}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'statusId' + '}', CGI.escape(status_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'InlineDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_id_status_status_id_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create tax invocie document with discount and tax inline.
    # สร้างเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting) <br> <br> ข้อมูลการออกเอกสารใบกำกับภาษี : https://flowaccount.com/blog/ใบกำกับภาษี
    # @param authorization [String] 
    # @param inline_document [InlineDocument] 
    # @param [Hash] opts the optional parameters
    # @return [InlineDocumentResponse]
    def tax_invoices_inline_post(authorization, inline_document, opts = {})
      data, _status_code, _headers = tax_invoices_inline_post_with_http_info(authorization, inline_document, opts)
      data
    end

    # Create tax invocie document with discount and tax inline.
    # สร้างเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบกำกับภาษี : https://flowaccount.com/blog/ใบกำกับภาษี
    # @param authorization [String] 
    # @param inline_document [InlineDocument] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineDocumentResponse, Integer, Hash)>] InlineDocumentResponse data, response status code and response headers
    def tax_invoices_inline_post_with_http_info(authorization, inline_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_inline_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_inline_post"
      end
      # verify the required parameter 'inline_document' is set
      if @api_client.config.client_side_validation && inline_document.nil?
        fail ArgumentError, "Missing the required parameter 'inline_document' when calling TaxInvoiceApi.tax_invoices_inline_post"
      end
      # resource path
      local_var_path = '/tax-invoices/inline'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_document) 

      # return_type
      return_type = opts[:return_type] || 'InlineDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_inline_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create tax invocie document with discount and tax inline with payment.
    # สร้างเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้าพร้อมเก็บเงิน <br>เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
    # @param authorization [String] 
    # @param inline_document_with_payment_receiving [InlineDocumentWithPaymentReceiving] 
    # @param [Hash] opts the optional parameters
    # @return [InlineDocumentResponse]
    def tax_invoices_inline_with_payment_post(authorization, inline_document_with_payment_receiving, opts = {})
      data, _status_code, _headers = tax_invoices_inline_with_payment_post_with_http_info(authorization, inline_document_with_payment_receiving, opts)
      data
    end

    # Create tax invocie document with discount and tax inline with payment.
    # สร้างเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้าพร้อมเก็บเงิน &lt;br&gt;เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
    # @param authorization [String] 
    # @param inline_document_with_payment_receiving [InlineDocumentWithPaymentReceiving] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InlineDocumentResponse, Integer, Hash)>] InlineDocumentResponse data, response status code and response headers
    def tax_invoices_inline_with_payment_post_with_http_info(authorization, inline_document_with_payment_receiving, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_inline_with_payment_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_inline_with_payment_post"
      end
      # verify the required parameter 'inline_document_with_payment_receiving' is set
      if @api_client.config.client_side_validation && inline_document_with_payment_receiving.nil?
        fail ArgumentError, "Missing the required parameter 'inline_document_with_payment_receiving' when calling TaxInvoiceApi.tax_invoices_inline_with_payment_post"
      end
      # resource path
      local_var_path = '/tax-invoices/inline/with-payment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_document_with_payment_receiving) 

      # return_type
      return_type = opts[:return_type] || 'InlineDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_inline_with_payment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create tax invocie document.
    # สร้างเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting) <br> <br> ข้อมูลการออกเอกสารใบกำกับภาษี : https://flowaccount.com/blog/ใบกำกับภาษี
    # @param authorization [String] 
    # @param simple_document [SimpleDocument] 
    # @param [Hash] opts the optional parameters
    # @return [SimpleDocumentResponse]
    def tax_invoices_post(authorization, simple_document, opts = {})
      data, _status_code, _headers = tax_invoices_post_with_http_info(authorization, simple_document, opts)
      data
    end

    # Create tax invocie document.
    # สร้างเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบกำกับภาษี : https://flowaccount.com/blog/ใบกำกับภาษี
    # @param authorization [String] 
    # @param simple_document [SimpleDocument] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimpleDocumentResponse, Integer, Hash)>] SimpleDocumentResponse data, response status code and response headers
    def tax_invoices_post_with_http_info(authorization, simple_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_post"
      end
      # verify the required parameter 'simple_document' is set
      if @api_client.config.client_side_validation && simple_document.nil?
        fail ArgumentError, "Missing the required parameter 'simple_document' when calling TaxInvoiceApi.tax_invoices_post"
      end
      # resource path
      local_var_path = '/tax-invoices'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(simple_document) 

      # return_type
      return_type = opts[:return_type] || 'SimpleDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Share link tax invoice document.
    # แชร์ลิงค์ เอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
    # @param authorization [String] 
    # @param share_document [ShareDocument] 
    # @param [Hash] opts the optional parameters
    # @return [ShareDocumentResponse]
    def tax_invoices_sharedocument_post(authorization, share_document, opts = {})
      data, _status_code, _headers = tax_invoices_sharedocument_post_with_http_info(authorization, share_document, opts)
      data
    end

    # Share link tax invoice document.
    # แชร์ลิงค์ เอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
    # @param authorization [String] 
    # @param share_document [ShareDocument] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ShareDocumentResponse, Integer, Hash)>] ShareDocumentResponse data, response status code and response headers
    def tax_invoices_sharedocument_post_with_http_info(authorization, share_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_sharedocument_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_sharedocument_post"
      end
      # verify the required parameter 'share_document' is set
      if @api_client.config.client_side_validation && share_document.nil?
        fail ArgumentError, "Missing the required parameter 'share_document' when calling TaxInvoiceApi.tax_invoices_sharedocument_post"
      end
      # resource path
      local_var_path = '/tax-invoices/sharedocument'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(share_document) 

      # return_type
      return_type = opts[:return_type] || 'ShareDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_sharedocument_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create tax invocie document with payment.
    # สร้างเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน พร้อมเก็บเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
    # @param authorization [String] 
    # @param simple_document_with_payment_receiving [SimpleDocumentWithPaymentReceiving] 
    # @param [Hash] opts the optional parameters
    # @return [SimpleDocumentResponse]
    def tax_invoices_with_payment_post(authorization, simple_document_with_payment_receiving, opts = {})
      data, _status_code, _headers = tax_invoices_with_payment_post_with_http_info(authorization, simple_document_with_payment_receiving, opts)
      data
    end

    # Create tax invocie document with payment.
    # สร้างเอกสารใบกำกับภาษี หรือ ใบกำกับภาษี/ใบเสร็จรับเงิน พร้อมเก็บเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
    # @param authorization [String] 
    # @param simple_document_with_payment_receiving [SimpleDocumentWithPaymentReceiving] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SimpleDocumentResponse, Integer, Hash)>] SimpleDocumentResponse data, response status code and response headers
    def tax_invoices_with_payment_post_with_http_info(authorization, simple_document_with_payment_receiving, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TaxInvoiceApi.tax_invoices_with_payment_post ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling TaxInvoiceApi.tax_invoices_with_payment_post"
      end
      # verify the required parameter 'simple_document_with_payment_receiving' is set
      if @api_client.config.client_side_validation && simple_document_with_payment_receiving.nil?
        fail ArgumentError, "Missing the required parameter 'simple_document_with_payment_receiving' when calling TaxInvoiceApi.tax_invoices_with_payment_post"
      end
      # resource path
      local_var_path = '/tax-invoices/with-payment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(simple_document_with_payment_receiving) 

      # return_type
      return_type = opts[:return_type] || 'SimpleDocumentResponse' 

      # auth_names
      auth_names = opts[:auth_names] || []

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TaxInvoiceApi#tax_invoices_with_payment_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
