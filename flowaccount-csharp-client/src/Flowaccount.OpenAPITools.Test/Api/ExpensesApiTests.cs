/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Flowaccount.OpenAPITools.Client;
using Flowaccount.OpenAPITools.Api;
using Flowaccount.OpenAPITools.Model;

namespace Flowaccount.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing ExpensesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class ExpensesApiTests
    {
        private ExpensesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new ExpensesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of ExpensesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' ExpensesApi
            //Assert.IsInstanceOf(typeof(ExpensesApi), instance);
        }

        
        /// <summary>
        /// Test ExpensesCategoriesAccountingGet
        /// </summary>
        [Test]
        public void ExpensesCategoriesAccountingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.ExpensesCategoriesAccountingGet(authorization);
            //Assert.IsInstanceOf(typeof(BusinessCategory), response, "response is BusinessCategory");
        }
        
        /// <summary>
        /// Test ExpensesCategoriesBusinessGet
        /// </summary>
        [Test]
        public void ExpensesCategoriesBusinessGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.ExpensesCategoriesBusinessGet(authorization);
            //Assert.IsInstanceOf(typeof(BusinessCategory), response, "response is BusinessCategory");
        }
        
        /// <summary>
        /// Test ExpensesEmailDocumentPost
        /// </summary>
        [Test]
        public void ExpensesEmailDocumentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //SendEmailSimple sendEmailSimple = null;
            //var response = instance.ExpensesEmailDocumentPost(authorization, sendEmailSimple);
            //Assert.IsInstanceOf(typeof(SendEmailResponse), response, "response is SendEmailResponse");
        }
        
        /// <summary>
        /// Test ExpensesGet
        /// </summary>
        [Test]
        public void ExpensesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //var response = instance.ExpensesGet(authorization);
            //Assert.IsInstanceOf(typeof(ExpenseInlineDocumentResponse), response, "response is ExpenseInlineDocumentResponse");
        }
        
        /// <summary>
        /// Test ExpensesIdAttachmentPost
        /// </summary>
        [Test]
        public void ExpensesIdAttachmentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //System.IO.Stream file = null;
            //var response = instance.ExpensesIdAttachmentPost(authorization, id, file);
            //Assert.IsInstanceOf(typeof(AttachmentResponse), response, "response is AttachmentResponse");
        }
        
        /// <summary>
        /// Test ExpensesIdDelete
        /// </summary>
        [Test]
        public void ExpensesIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //var response = instance.ExpensesIdDelete(authorization, id);
            //Assert.IsInstanceOf(typeof(DeleteResponse), response, "response is DeleteResponse");
        }
        
        /// <summary>
        /// Test ExpensesIdGet
        /// </summary>
        [Test]
        public void ExpensesIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //var response = instance.ExpensesIdGet(authorization, id);
            //Assert.IsInstanceOf(typeof(ExpenseInlineDocumentResponse), response, "response is ExpenseInlineDocumentResponse");
        }
        
        /// <summary>
        /// Test ExpensesIdPaymentPost
        /// </summary>
        [Test]
        public void ExpensesIdPaymentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //PaymentDocument paymentDocument = null;
            //var response = instance.ExpensesIdPaymentPost(authorization, id, paymentDocument);
            //Assert.IsInstanceOf(typeof(ExpenseDocumentResponse), response, "response is ExpenseDocumentResponse");
        }
        
        /// <summary>
        /// Test ExpensesIdStatusKeyStatusIdPost
        /// </summary>
        [Test]
        public void ExpensesIdStatusKeyStatusIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //string statusId = null;
            //var response = instance.ExpensesIdStatusKeyStatusIdPost(authorization, id, statusId);
            //Assert.IsInstanceOf(typeof(ExpenseInlineDocumentResponse), response, "response is ExpenseInlineDocumentResponse");
        }
        
        /// <summary>
        /// Test ExpensesInlinePost
        /// </summary>
        [Test]
        public void ExpensesInlinePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //ExpenseInlineDocument expenseInlineDocument = null;
            //var response = instance.ExpensesInlinePost(authorization, expenseInlineDocument);
            //Assert.IsInstanceOf(typeof(ExpenseInlineDocumentResponse), response, "response is ExpenseInlineDocumentResponse");
        }
        
        /// <summary>
        /// Test ExpensesPost
        /// </summary>
        [Test]
        public void ExpensesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //ExpenseDocument expenseDocument = null;
            //var response = instance.ExpensesPost(authorization, expenseDocument);
            //Assert.IsInstanceOf(typeof(ExpenseDocumentResponse), response, "response is ExpenseDocumentResponse");
        }
        
        /// <summary>
        /// Test ExpensesSharedocumentPost
        /// </summary>
        [Test]
        public void ExpensesSharedocumentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //ShareDocument shareDocument = null;
            //var response = instance.ExpensesSharedocumentPost(authorization, shareDocument);
            //Assert.IsInstanceOf(typeof(ShareDocumentResponse), response, "response is ShareDocumentResponse");
        }
        
    }

}
