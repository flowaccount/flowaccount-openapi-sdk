/* 
 * FlowAccount Open API
 *
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Flowaccount.OpenAPITools.Client;
using Flowaccount.OpenAPITools.Api;
using Flowaccount.OpenAPITools.Model;

namespace Flowaccount.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing BillingNotesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BillingNotesApiTests
    {
        private BillingNotesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BillingNotesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BillingNotesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' BillingNotesApi
            //Assert.IsInstanceOf(typeof(BillingNotesApi), instance);
        }

        
        /// <summary>
        /// Test BillingNotesEmailDocumentPost
        /// </summary>
        [Test]
        public void BillingNotesEmailDocumentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //SendEmailCoppies sendEmailCoppies = null;
            //var response = instance.BillingNotesEmailDocumentPost(authorization, sendEmailCoppies);
            //Assert.IsInstanceOf(typeof(SendEmailResponse), response, "response is SendEmailResponse");
        }
        
        /// <summary>
        /// Test BillingNotesGet
        /// </summary>
        [Test]
        public void BillingNotesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int currentPage = null;
            //int pageSize = null;
            //string authorization = null;
            //string sortBy = null;
            //string filter = null;
            //var response = instance.BillingNotesGet(currentPage, pageSize, authorization, sortBy, filter);
            //Assert.IsInstanceOf(typeof(AllDocumentResponse), response, "response is AllDocumentResponse");
        }
        
        /// <summary>
        /// Test BillingNotesIdAttachmentPost
        /// </summary>
        [Test]
        public void BillingNotesIdAttachmentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //System.IO.Stream file = null;
            //var response = instance.BillingNotesIdAttachmentPost(authorization, id, file);
            //Assert.IsInstanceOf(typeof(AttachmentResponse), response, "response is AttachmentResponse");
        }
        
        /// <summary>
        /// Test BillingNotesIdDelete
        /// </summary>
        [Test]
        public void BillingNotesIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //var response = instance.BillingNotesIdDelete(authorization, id);
            //Assert.IsInstanceOf(typeof(DeleteResponse), response, "response is DeleteResponse");
        }
        
        /// <summary>
        /// Test BillingNotesIdGet
        /// </summary>
        [Test]
        public void BillingNotesIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //var response = instance.BillingNotesIdGet(authorization, id);
            //Assert.IsInstanceOf(typeof(InlineDocumentResponse), response, "response is InlineDocumentResponse");
        }
        
        /// <summary>
        /// Test BillingNotesIdPut
        /// </summary>
        [Test]
        public void BillingNotesIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //UpdateInlineDocument updateInlineDocument = null;
            //var response = instance.BillingNotesIdPut(authorization, id, updateInlineDocument);
            //Assert.IsInstanceOf(typeof(InlineDocumentResponse), response, "response is InlineDocumentResponse");
        }
        
        /// <summary>
        /// Test BillingNotesIdStatusStatusIdPost
        /// </summary>
        [Test]
        public void BillingNotesIdStatusStatusIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //string id = null;
            //string statusId = null;
            //var response = instance.BillingNotesIdStatusStatusIdPost(authorization, id, statusId);
            //Assert.IsInstanceOf(typeof(InlineDocumentResponse), response, "response is InlineDocumentResponse");
        }
        
        /// <summary>
        /// Test BillingNotesInlinePost
        /// </summary>
        [Test]
        public void BillingNotesInlinePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //InlineDocument inlineDocument = null;
            //var response = instance.BillingNotesInlinePost(authorization, inlineDocument);
            //Assert.IsInstanceOf(typeof(InlineDocumentResponse), response, "response is InlineDocumentResponse");
        }
        
        /// <summary>
        /// Test BillingNotesPost
        /// </summary>
        [Test]
        public void BillingNotesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //SimpleDocument simpleDocument = null;
            //var response = instance.BillingNotesPost(authorization, simpleDocument);
            //Assert.IsInstanceOf(typeof(SimpleDocumentResponse), response, "response is SimpleDocumentResponse");
        }
        
        /// <summary>
        /// Test BillingNotesSharedocumentPost
        /// </summary>
        [Test]
        public void BillingNotesSharedocumentPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string authorization = null;
            //ShareDocument shareDocument = null;
            //var response = instance.BillingNotesSharedocumentPost(authorization, shareDocument);
            //Assert.IsInstanceOf(typeof(ShareDocumentResponse), response, "response is ShareDocumentResponse");
        }
        
    }

}
