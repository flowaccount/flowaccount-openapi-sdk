/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// Contact
    /// </summary>
    [DataContract]
    public partial class Contact :  IEquatable<Contact>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Contact() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Contact" /> class.
        /// </summary>
        /// <param name="contactGroup">ประเภทผู้ติดต่อ: 1 &#x3D; บุคคลธรรมดา / 3 &#x3D; นิติบุคคล (required) (default to 3).</param>
        /// <param name="contactType">ประเภท: 3 &#x3D; ลูกค้า / 5 &#x3D; ผู้จำหน่าย / 7 &#x3D; ผู้จำหน่ายและลูกค้า (required) (default to 3).</param>
        /// <param name="contactCode">รหัสผู้ติดต่อ (required).</param>
        /// <param name="contactName">ชื่อผู้ธุรกิจ หรือ ชื่อลูกค้า หรือ ชื่อผู้จำหน่าย (required).</param>
        /// <param name="contactAddress">ที่อยู่ผู้ติดต่อ.</param>
        /// <param name="contactTaxId">เลขประจำตัวผู้เสียภาษี 13 หลัก ​&lt;br&gt;&lt;ex&gt;Example: 1234567890123&lt;/ex&gt;.</param>
        /// <param name="contactBranchCode">รหัสสาขา.</param>
        /// <param name="contactBranch">ชื่อสาขา (default to &quot;สำนักงานใหญ่&quot;).</param>
        /// <param name="contactPerson">ชื่อผู้ติดต่อ.</param>
        /// <param name="contactEmail">อีเมลผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: contact@email.com&lt;/ex&gt;.</param>
        /// <param name="contactMobile">เบอร์มือถือผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;.</param>
        /// <param name="contactBankId">รหัสธนาคาร &lt;br&gt; 1 &#x3D; ธนาคารกรุงเทพ &lt;br&gt; 2 &#x3D; ธนาคารกสิกรไทย &lt;br&gt; 3 &#x3D; ธนาคารกรุงไทย &lt;br&gt; 4 &#x3D; ธนาคารทหารไทย &lt;br&gt; 5 &#x3D; ธนาคารไทยพาณิชย์ &lt;br&gt; 6 &#x3D; ธนาคารสแตนดาร์ดชาร์เตอร์ด &lt;br&gt; 7 &#x3D; ธนาคารซีไอเอ็มบี ไทย &lt;br&gt; 8 &#x3D; ธนาคารยูโอบี &lt;br&gt; 10 &#x3D; ธนาคารกรุงศรีอยุธยา &lt;br&gt; 11 &#x3D; ธนาคารออมสิน &lt;br&gt; 12 &#x3D; ธนาคารธนชาต &lt;br&gt; 13 &#x3D; ธนาคารแลนด์ แอนด์ เฮ้าส์ &lt;br&gt; 14 &#x3D; ธนาคารเกียรตินาคิน &lt;br&gt; 15 &#x3D; ธนาคารซิตี้แบงก์ &lt;br&gt; 16 &#x3D; ธนาคารทิสโก้ &lt;br&gt; 53 &#x3D; ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร &lt;br&gt; 54 &#x3D; ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย &lt;br&gt; 55 &#x3D; ธนาคารอาคารสงเคราะห์ &lt;br&gt; 56 &#x3D; ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย &lt;br&gt; 57 &#x3D; ธนาคารอิสลามแห่งประเทศไทย &lt;br&gt; 58 &#x3D; ธนาคารแห่งประเทศจีน (ไทย) &lt;br&gt; 59 &#x3D; ธนาคารไอซีบีซี (ไทย) &lt;br&gt; 60 &#x3D; ธนาคารเมกะ สากลพาณิชย์ &lt;br&gt; 61 &#x3D; ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น &lt;br&gt; 62 &#x3D; ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) &lt;br&gt; 63 &#x3D; ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น &lt;br&gt; 64 &#x3D; ธนาคารไทยเครดิต เพื่อรายย่อย  (default to 0).</param>
        /// <param name="contactBankAccountNumber">เลขที่บัญชีธนาคาร &lt;br&gt; &lt;ex&gt;Example: 1111111111&lt;/ex&gt;.</param>
        /// <param name="contactBankBranch">สาขาธนาคาร &lt;br&gt; &lt;ex&gt;Example: บางรัก&lt;/ex&gt;.</param>
        /// <param name="contactBankAccountType">ประเภทบัญชีธนาคาร: &lt;br&gt; 1 &#x3D; บัญชีออมทรัพย์ &lt;br&gt; 3 &#x3D; บัญชีกระแสรายวัน (default to 1).</param>
        /// <param name="contactCreditDays">เครดิต (วัน) &lt;br&gt; &lt;ex&gt;Example: 30&lt;/ex&gt; (default to 0).</param>
        /// <param name="contactOffice">เบอร์โทรศัพท์สำนักงาน &lt;br&gt; &lt;ex&gt;Example: 02-999-9999&lt;/ex&gt;.</param>
        /// <param name="contactFax">เบอร์โทรสาร &lt;br&gt; &lt;ex&gt;Example: 02-888-8888&lt;/ex&gt;.</param>
        /// <param name="contactWebsite">เว็บไซต์ ผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Eample: www.flowaccount.com&lt;/ex&gt;.</param>
        /// <param name="conatactShippingAddress">ที่อยู่สำหรับจัดส่ง.</param>
        /// <param name="contactNote">โน๊ต.</param>
        public Contact(long contactGroup = 3, long contactType = 3, string contactCode = default(string), string contactName = default(string), string contactAddress = default(string), long contactTaxId = default(long), string contactBranchCode = default(string), string contactBranch = "สำนักงานใหญ่", string contactPerson = default(string), string contactEmail = default(string), string contactMobile = default(string), long contactBankId = 0, long contactBankAccountNumber = default(long), string contactBankBranch = default(string), long contactBankAccountType = 1, long contactCreditDays = 0, string contactOffice = default(string), string contactFax = default(string), string contactWebsite = default(string), string conatactShippingAddress = default(string), string contactNote = default(string))
        {
            // to ensure "contactGroup" is required (not null)
            if (contactGroup == null)
            {
                throw new InvalidDataException("contactGroup is a required property for Contact and cannot be null");
            }
            else
            {
                this.ContactGroup = contactGroup;
            }
            
            // to ensure "contactType" is required (not null)
            if (contactType == null)
            {
                throw new InvalidDataException("contactType is a required property for Contact and cannot be null");
            }
            else
            {
                this.ContactType = contactType;
            }
            
            // to ensure "contactCode" is required (not null)
            if (contactCode == null)
            {
                throw new InvalidDataException("contactCode is a required property for Contact and cannot be null");
            }
            else
            {
                this.ContactCode = contactCode;
            }
            
            // to ensure "contactName" is required (not null)
            if (contactName == null)
            {
                throw new InvalidDataException("contactName is a required property for Contact and cannot be null");
            }
            else
            {
                this.ContactName = contactName;
            }
            
            this.ContactAddress = contactAddress;
            this.ContactTaxId = contactTaxId;
            this.ContactBranchCode = contactBranchCode;
            // use default value if no "contactBranch" provided
            if (contactBranch == null)
            {
                this.ContactBranch = "สำนักงานใหญ่";
            }
            else
            {
                this.ContactBranch = contactBranch;
            }
            this.ContactPerson = contactPerson;
            this.ContactEmail = contactEmail;
            this.ContactMobile = contactMobile;
            // use default value if no "contactBankId" provided
            if (contactBankId == null)
            {
                this.ContactBankId = 0;
            }
            else
            {
                this.ContactBankId = contactBankId;
            }
            this.ContactBankAccountNumber = contactBankAccountNumber;
            this.ContactBankBranch = contactBankBranch;
            // use default value if no "contactBankAccountType" provided
            if (contactBankAccountType == null)
            {
                this.ContactBankAccountType = 1;
            }
            else
            {
                this.ContactBankAccountType = contactBankAccountType;
            }
            // use default value if no "contactCreditDays" provided
            if (contactCreditDays == null)
            {
                this.ContactCreditDays = 0;
            }
            else
            {
                this.ContactCreditDays = contactCreditDays;
            }
            this.ContactOffice = contactOffice;
            this.ContactFax = contactFax;
            this.ContactWebsite = contactWebsite;
            this.ConatactShippingAddress = conatactShippingAddress;
            this.ContactNote = contactNote;
        }
        
        /// <summary>
        /// ประเภทผู้ติดต่อ: 1 &#x3D; บุคคลธรรมดา / 3 &#x3D; นิติบุคคล
        /// </summary>
        /// <value>ประเภทผู้ติดต่อ: 1 &#x3D; บุคคลธรรมดา / 3 &#x3D; นิติบุคคล</value>
        [DataMember(Name="contactGroup", EmitDefaultValue=true)]
        public long ContactGroup { get; set; }

        /// <summary>
        /// ประเภท: 3 &#x3D; ลูกค้า / 5 &#x3D; ผู้จำหน่าย / 7 &#x3D; ผู้จำหน่ายและลูกค้า
        /// </summary>
        /// <value>ประเภท: 3 &#x3D; ลูกค้า / 5 &#x3D; ผู้จำหน่าย / 7 &#x3D; ผู้จำหน่ายและลูกค้า</value>
        [DataMember(Name="contactType", EmitDefaultValue=true)]
        public long ContactType { get; set; }

        /// <summary>
        /// รหัสผู้ติดต่อ
        /// </summary>
        /// <value>รหัสผู้ติดต่อ</value>
        [DataMember(Name="contactCode", EmitDefaultValue=true)]
        public string ContactCode { get; set; }

        /// <summary>
        /// ชื่อผู้ธุรกิจ หรือ ชื่อลูกค้า หรือ ชื่อผู้จำหน่าย
        /// </summary>
        /// <value>ชื่อผู้ธุรกิจ หรือ ชื่อลูกค้า หรือ ชื่อผู้จำหน่าย</value>
        [DataMember(Name="contactName", EmitDefaultValue=true)]
        public string ContactName { get; set; }

        /// <summary>
        /// ที่อยู่ผู้ติดต่อ
        /// </summary>
        /// <value>ที่อยู่ผู้ติดต่อ</value>
        [DataMember(Name="contactAddress", EmitDefaultValue=true)]
        public string ContactAddress { get; set; }

        /// <summary>
        /// เลขประจำตัวผู้เสียภาษี 13 หลัก ​&lt;br&gt;&lt;ex&gt;Example: 1234567890123&lt;/ex&gt;
        /// </summary>
        /// <value>เลขประจำตัวผู้เสียภาษี 13 หลัก ​&lt;br&gt;&lt;ex&gt;Example: 1234567890123&lt;/ex&gt;</value>
        [DataMember(Name="contactTaxId", EmitDefaultValue=true)]
        public long ContactTaxId { get; set; }

        /// <summary>
        /// รหัสสาขา
        /// </summary>
        /// <value>รหัสสาขา</value>
        [DataMember(Name="contactBranchCode", EmitDefaultValue=true)]
        public string ContactBranchCode { get; set; }

        /// <summary>
        /// ชื่อสาขา
        /// </summary>
        /// <value>ชื่อสาขา</value>
        [DataMember(Name="contactBranch", EmitDefaultValue=true)]
        public string ContactBranch { get; set; }

        /// <summary>
        /// ชื่อผู้ติดต่อ
        /// </summary>
        /// <value>ชื่อผู้ติดต่อ</value>
        [DataMember(Name="contactPerson", EmitDefaultValue=true)]
        public string ContactPerson { get; set; }

        /// <summary>
        /// อีเมลผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: contact@email.com&lt;/ex&gt;
        /// </summary>
        /// <value>อีเมลผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: contact@email.com&lt;/ex&gt;</value>
        [DataMember(Name="contactEmail", EmitDefaultValue=true)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// เบอร์มือถือผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;
        /// </summary>
        /// <value>เบอร์มือถือผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;</value>
        [DataMember(Name="contactMobile", EmitDefaultValue=true)]
        public string ContactMobile { get; set; }

        /// <summary>
        /// รหัสธนาคาร &lt;br&gt; 1 &#x3D; ธนาคารกรุงเทพ &lt;br&gt; 2 &#x3D; ธนาคารกสิกรไทย &lt;br&gt; 3 &#x3D; ธนาคารกรุงไทย &lt;br&gt; 4 &#x3D; ธนาคารทหารไทย &lt;br&gt; 5 &#x3D; ธนาคารไทยพาณิชย์ &lt;br&gt; 6 &#x3D; ธนาคารสแตนดาร์ดชาร์เตอร์ด &lt;br&gt; 7 &#x3D; ธนาคารซีไอเอ็มบี ไทย &lt;br&gt; 8 &#x3D; ธนาคารยูโอบี &lt;br&gt; 10 &#x3D; ธนาคารกรุงศรีอยุธยา &lt;br&gt; 11 &#x3D; ธนาคารออมสิน &lt;br&gt; 12 &#x3D; ธนาคารธนชาต &lt;br&gt; 13 &#x3D; ธนาคารแลนด์ แอนด์ เฮ้าส์ &lt;br&gt; 14 &#x3D; ธนาคารเกียรตินาคิน &lt;br&gt; 15 &#x3D; ธนาคารซิตี้แบงก์ &lt;br&gt; 16 &#x3D; ธนาคารทิสโก้ &lt;br&gt; 53 &#x3D; ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร &lt;br&gt; 54 &#x3D; ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย &lt;br&gt; 55 &#x3D; ธนาคารอาคารสงเคราะห์ &lt;br&gt; 56 &#x3D; ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย &lt;br&gt; 57 &#x3D; ธนาคารอิสลามแห่งประเทศไทย &lt;br&gt; 58 &#x3D; ธนาคารแห่งประเทศจีน (ไทย) &lt;br&gt; 59 &#x3D; ธนาคารไอซีบีซี (ไทย) &lt;br&gt; 60 &#x3D; ธนาคารเมกะ สากลพาณิชย์ &lt;br&gt; 61 &#x3D; ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น &lt;br&gt; 62 &#x3D; ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) &lt;br&gt; 63 &#x3D; ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น &lt;br&gt; 64 &#x3D; ธนาคารไทยเครดิต เพื่อรายย่อย 
        /// </summary>
        /// <value>รหัสธนาคาร &lt;br&gt; 1 &#x3D; ธนาคารกรุงเทพ &lt;br&gt; 2 &#x3D; ธนาคารกสิกรไทย &lt;br&gt; 3 &#x3D; ธนาคารกรุงไทย &lt;br&gt; 4 &#x3D; ธนาคารทหารไทย &lt;br&gt; 5 &#x3D; ธนาคารไทยพาณิชย์ &lt;br&gt; 6 &#x3D; ธนาคารสแตนดาร์ดชาร์เตอร์ด &lt;br&gt; 7 &#x3D; ธนาคารซีไอเอ็มบี ไทย &lt;br&gt; 8 &#x3D; ธนาคารยูโอบี &lt;br&gt; 10 &#x3D; ธนาคารกรุงศรีอยุธยา &lt;br&gt; 11 &#x3D; ธนาคารออมสิน &lt;br&gt; 12 &#x3D; ธนาคารธนชาต &lt;br&gt; 13 &#x3D; ธนาคารแลนด์ แอนด์ เฮ้าส์ &lt;br&gt; 14 &#x3D; ธนาคารเกียรตินาคิน &lt;br&gt; 15 &#x3D; ธนาคารซิตี้แบงก์ &lt;br&gt; 16 &#x3D; ธนาคารทิสโก้ &lt;br&gt; 53 &#x3D; ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร &lt;br&gt; 54 &#x3D; ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย &lt;br&gt; 55 &#x3D; ธนาคารอาคารสงเคราะห์ &lt;br&gt; 56 &#x3D; ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย &lt;br&gt; 57 &#x3D; ธนาคารอิสลามแห่งประเทศไทย &lt;br&gt; 58 &#x3D; ธนาคารแห่งประเทศจีน (ไทย) &lt;br&gt; 59 &#x3D; ธนาคารไอซีบีซี (ไทย) &lt;br&gt; 60 &#x3D; ธนาคารเมกะ สากลพาณิชย์ &lt;br&gt; 61 &#x3D; ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น &lt;br&gt; 62 &#x3D; ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) &lt;br&gt; 63 &#x3D; ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น &lt;br&gt; 64 &#x3D; ธนาคารไทยเครดิต เพื่อรายย่อย </value>
        [DataMember(Name="contactBankId", EmitDefaultValue=true)]
        public long ContactBankId { get; set; }

        /// <summary>
        /// เลขที่บัญชีธนาคาร &lt;br&gt; &lt;ex&gt;Example: 1111111111&lt;/ex&gt;
        /// </summary>
        /// <value>เลขที่บัญชีธนาคาร &lt;br&gt; &lt;ex&gt;Example: 1111111111&lt;/ex&gt;</value>
        [DataMember(Name="contactBankAccountNumber", EmitDefaultValue=true)]
        public long ContactBankAccountNumber { get; set; }

        /// <summary>
        /// สาขาธนาคาร &lt;br&gt; &lt;ex&gt;Example: บางรัก&lt;/ex&gt;
        /// </summary>
        /// <value>สาขาธนาคาร &lt;br&gt; &lt;ex&gt;Example: บางรัก&lt;/ex&gt;</value>
        [DataMember(Name="contactBankBranch", EmitDefaultValue=true)]
        public string ContactBankBranch { get; set; }

        /// <summary>
        /// ประเภทบัญชีธนาคาร: &lt;br&gt; 1 &#x3D; บัญชีออมทรัพย์ &lt;br&gt; 3 &#x3D; บัญชีกระแสรายวัน
        /// </summary>
        /// <value>ประเภทบัญชีธนาคาร: &lt;br&gt; 1 &#x3D; บัญชีออมทรัพย์ &lt;br&gt; 3 &#x3D; บัญชีกระแสรายวัน</value>
        [DataMember(Name="contactBankAccountType", EmitDefaultValue=true)]
        public long ContactBankAccountType { get; set; }

        /// <summary>
        /// เครดิต (วัน) &lt;br&gt; &lt;ex&gt;Example: 30&lt;/ex&gt;
        /// </summary>
        /// <value>เครดิต (วัน) &lt;br&gt; &lt;ex&gt;Example: 30&lt;/ex&gt;</value>
        [DataMember(Name="contactCreditDays", EmitDefaultValue=true)]
        public long ContactCreditDays { get; set; }

        /// <summary>
        /// เบอร์โทรศัพท์สำนักงาน &lt;br&gt; &lt;ex&gt;Example: 02-999-9999&lt;/ex&gt;
        /// </summary>
        /// <value>เบอร์โทรศัพท์สำนักงาน &lt;br&gt; &lt;ex&gt;Example: 02-999-9999&lt;/ex&gt;</value>
        [DataMember(Name="contactOffice", EmitDefaultValue=true)]
        public string ContactOffice { get; set; }

        /// <summary>
        /// เบอร์โทรสาร &lt;br&gt; &lt;ex&gt;Example: 02-888-8888&lt;/ex&gt;
        /// </summary>
        /// <value>เบอร์โทรสาร &lt;br&gt; &lt;ex&gt;Example: 02-888-8888&lt;/ex&gt;</value>
        [DataMember(Name="contactFax", EmitDefaultValue=true)]
        public string ContactFax { get; set; }

        /// <summary>
        /// เว็บไซต์ ผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Eample: www.flowaccount.com&lt;/ex&gt;
        /// </summary>
        /// <value>เว็บไซต์ ผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Eample: www.flowaccount.com&lt;/ex&gt;</value>
        [DataMember(Name="contactWebsite", EmitDefaultValue=true)]
        public string ContactWebsite { get; set; }

        /// <summary>
        /// ที่อยู่สำหรับจัดส่ง
        /// </summary>
        /// <value>ที่อยู่สำหรับจัดส่ง</value>
        [DataMember(Name="conatactShippingAddress", EmitDefaultValue=true)]
        public string ConatactShippingAddress { get; set; }

        /// <summary>
        /// โน๊ต
        /// </summary>
        /// <value>โน๊ต</value>
        [DataMember(Name="contactNote", EmitDefaultValue=true)]
        public string ContactNote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Contact {\n");
            sb.Append("  ContactGroup: ").Append(ContactGroup).Append("\n");
            sb.Append("  ContactType: ").Append(ContactType).Append("\n");
            sb.Append("  ContactCode: ").Append(ContactCode).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactAddress: ").Append(ContactAddress).Append("\n");
            sb.Append("  ContactTaxId: ").Append(ContactTaxId).Append("\n");
            sb.Append("  ContactBranchCode: ").Append(ContactBranchCode).Append("\n");
            sb.Append("  ContactBranch: ").Append(ContactBranch).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ContactMobile: ").Append(ContactMobile).Append("\n");
            sb.Append("  ContactBankId: ").Append(ContactBankId).Append("\n");
            sb.Append("  ContactBankAccountNumber: ").Append(ContactBankAccountNumber).Append("\n");
            sb.Append("  ContactBankBranch: ").Append(ContactBankBranch).Append("\n");
            sb.Append("  ContactBankAccountType: ").Append(ContactBankAccountType).Append("\n");
            sb.Append("  ContactCreditDays: ").Append(ContactCreditDays).Append("\n");
            sb.Append("  ContactOffice: ").Append(ContactOffice).Append("\n");
            sb.Append("  ContactFax: ").Append(ContactFax).Append("\n");
            sb.Append("  ContactWebsite: ").Append(ContactWebsite).Append("\n");
            sb.Append("  ConatactShippingAddress: ").Append(ConatactShippingAddress).Append("\n");
            sb.Append("  ContactNote: ").Append(ContactNote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Contact);
        }

        /// <summary>
        /// Returns true if Contact instances are equal
        /// </summary>
        /// <param name="input">Instance of Contact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Contact input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContactGroup == input.ContactGroup ||
                    (this.ContactGroup != null &&
                    this.ContactGroup.Equals(input.ContactGroup))
                ) && 
                (
                    this.ContactType == input.ContactType ||
                    (this.ContactType != null &&
                    this.ContactType.Equals(input.ContactType))
                ) && 
                (
                    this.ContactCode == input.ContactCode ||
                    (this.ContactCode != null &&
                    this.ContactCode.Equals(input.ContactCode))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactAddress == input.ContactAddress ||
                    (this.ContactAddress != null &&
                    this.ContactAddress.Equals(input.ContactAddress))
                ) && 
                (
                    this.ContactTaxId == input.ContactTaxId ||
                    (this.ContactTaxId != null &&
                    this.ContactTaxId.Equals(input.ContactTaxId))
                ) && 
                (
                    this.ContactBranchCode == input.ContactBranchCode ||
                    (this.ContactBranchCode != null &&
                    this.ContactBranchCode.Equals(input.ContactBranchCode))
                ) && 
                (
                    this.ContactBranch == input.ContactBranch ||
                    (this.ContactBranch != null &&
                    this.ContactBranch.Equals(input.ContactBranch))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.ContactMobile == input.ContactMobile ||
                    (this.ContactMobile != null &&
                    this.ContactMobile.Equals(input.ContactMobile))
                ) && 
                (
                    this.ContactBankId == input.ContactBankId ||
                    (this.ContactBankId != null &&
                    this.ContactBankId.Equals(input.ContactBankId))
                ) && 
                (
                    this.ContactBankAccountNumber == input.ContactBankAccountNumber ||
                    (this.ContactBankAccountNumber != null &&
                    this.ContactBankAccountNumber.Equals(input.ContactBankAccountNumber))
                ) && 
                (
                    this.ContactBankBranch == input.ContactBankBranch ||
                    (this.ContactBankBranch != null &&
                    this.ContactBankBranch.Equals(input.ContactBankBranch))
                ) && 
                (
                    this.ContactBankAccountType == input.ContactBankAccountType ||
                    (this.ContactBankAccountType != null &&
                    this.ContactBankAccountType.Equals(input.ContactBankAccountType))
                ) && 
                (
                    this.ContactCreditDays == input.ContactCreditDays ||
                    (this.ContactCreditDays != null &&
                    this.ContactCreditDays.Equals(input.ContactCreditDays))
                ) && 
                (
                    this.ContactOffice == input.ContactOffice ||
                    (this.ContactOffice != null &&
                    this.ContactOffice.Equals(input.ContactOffice))
                ) && 
                (
                    this.ContactFax == input.ContactFax ||
                    (this.ContactFax != null &&
                    this.ContactFax.Equals(input.ContactFax))
                ) && 
                (
                    this.ContactWebsite == input.ContactWebsite ||
                    (this.ContactWebsite != null &&
                    this.ContactWebsite.Equals(input.ContactWebsite))
                ) && 
                (
                    this.ConatactShippingAddress == input.ConatactShippingAddress ||
                    (this.ConatactShippingAddress != null &&
                    this.ConatactShippingAddress.Equals(input.ConatactShippingAddress))
                ) && 
                (
                    this.ContactNote == input.ContactNote ||
                    (this.ContactNote != null &&
                    this.ContactNote.Equals(input.ContactNote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactGroup != null)
                    hashCode = hashCode * 59 + this.ContactGroup.GetHashCode();
                if (this.ContactType != null)
                    hashCode = hashCode * 59 + this.ContactType.GetHashCode();
                if (this.ContactCode != null)
                    hashCode = hashCode * 59 + this.ContactCode.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.ContactAddress != null)
                    hashCode = hashCode * 59 + this.ContactAddress.GetHashCode();
                if (this.ContactTaxId != null)
                    hashCode = hashCode * 59 + this.ContactTaxId.GetHashCode();
                if (this.ContactBranchCode != null)
                    hashCode = hashCode * 59 + this.ContactBranchCode.GetHashCode();
                if (this.ContactBranch != null)
                    hashCode = hashCode * 59 + this.ContactBranch.GetHashCode();
                if (this.ContactPerson != null)
                    hashCode = hashCode * 59 + this.ContactPerson.GetHashCode();
                if (this.ContactEmail != null)
                    hashCode = hashCode * 59 + this.ContactEmail.GetHashCode();
                if (this.ContactMobile != null)
                    hashCode = hashCode * 59 + this.ContactMobile.GetHashCode();
                if (this.ContactBankId != null)
                    hashCode = hashCode * 59 + this.ContactBankId.GetHashCode();
                if (this.ContactBankAccountNumber != null)
                    hashCode = hashCode * 59 + this.ContactBankAccountNumber.GetHashCode();
                if (this.ContactBankBranch != null)
                    hashCode = hashCode * 59 + this.ContactBankBranch.GetHashCode();
                if (this.ContactBankAccountType != null)
                    hashCode = hashCode * 59 + this.ContactBankAccountType.GetHashCode();
                if (this.ContactCreditDays != null)
                    hashCode = hashCode * 59 + this.ContactCreditDays.GetHashCode();
                if (this.ContactOffice != null)
                    hashCode = hashCode * 59 + this.ContactOffice.GetHashCode();
                if (this.ContactFax != null)
                    hashCode = hashCode * 59 + this.ContactFax.GetHashCode();
                if (this.ContactWebsite != null)
                    hashCode = hashCode * 59 + this.ContactWebsite.GetHashCode();
                if (this.ConatactShippingAddress != null)
                    hashCode = hashCode * 59 + this.ConatactShippingAddress.GetHashCode();
                if (this.ContactNote != null)
                    hashCode = hashCode * 59 + this.ContactNote.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
