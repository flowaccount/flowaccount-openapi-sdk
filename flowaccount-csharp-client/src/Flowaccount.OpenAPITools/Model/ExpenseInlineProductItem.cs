/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// ExpenseInlineProductItem
    /// </summary>
    [DataContract]
    public partial class ExpenseInlineProductItem :  IEquatable<ExpenseInlineProductItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseInlineProductItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExpenseInlineProductItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseInlineProductItem" /> class.
        /// </summary>
        /// <param name="systemCode">เลขที่ system code หมวดหมู่ค่าใช้จ่าย (เลือกใช้ หมวดหมู่ค่าใช้จ่ายสำหรับธุรกิจ) (required).</param>
        /// <param name="categoryId">เลขที่ id หมวดหมู่ค่าใช้จ่าย (เลือกใช้ หมวดหมู่ค่าใช้จ่ายสำหรับธุรกิจ) &lt;br&gt; &lt;ex&gt;Example: 40238&lt;/ex&gt; (required).</param>
        /// <param name="description">รายละเอียดค่าใช้จ่าย (required).</param>
        /// <param name="nameLocal">ชื่อหมวดหมู่ค่าใช้จ่าย &lt;br&gt; &lt;ex&gt;Example: การตลาดและโฆษณา&lt;/ex&gt; (required).</param>
        /// <param name="nameForeign">ชื่อหมวดหมู่ค่าใช้จ่าย (ภาษาอังกฤษ) &lt;br&gt; &lt;ex&gt;Example: Marketing &amp; Advertising&lt;/ex&gt; (required).</param>
        /// <param name="creditCategory">เลขหมวดหมู่ ฝั่งเครดิต ของ หมวดหมู่ค่าใช้จ่าย &lt;br&gt; &lt;ex&gt;Example: 2&lt;/ex&gt; (required).</param>
        /// <param name="creditId">เลข id หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิิต &lt;br&gt; &lt;ex&gt;Example: 1081994&lt;/ex&gt; (required).</param>
        /// <param name="creditCode">เลขที่หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิต &lt;br&gt; &lt;ex&gt;Example: 21399&lt;/ex&gt; (required).</param>
        /// <param name="creditNameLocal">ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิต &lt;br&gt; &lt;ex&gt;Example: 21399 / เจ้าหนี้อื่นๆ&lt;/ex&gt; (required).</param>
        /// <param name="creditNameForeign">ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิต (ภาษาอังกฤษ) &lt;br&gt; &lt;ex&gt;Example: 21399 / Other Payables&lt;/ex&gt; (required).</param>
        /// <param name="debitCategory">เลขหมวดหมู่ ฝั่งเดบิต ของ หมวดหมู่ค่าใช้จ่าย (required).</param>
        /// <param name="debitId">เลข id หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต &lt;br&gt; &lt;ex&gt;Example: 1082099&lt;/ex&gt; (required).</param>
        /// <param name="debitCode">เลขที่หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต &lt;br&gt; &lt;ex&gt;Example: 53029&lt;/ex&gt; (required).</param>
        /// <param name="debitNameLocal">ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต &lt;br&gt; &lt;ex&gt;Example: 53029 / ค่าใช้จ่ายด้านโฆษณาและการตลาดอื่นๆ&lt;/ex&gt; (required).</param>
        /// <param name="debitNameForeign">ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต (ภาษาอังกฤษ) &lt;br&gt; &lt;ex&gt;Example: 53029 / Other advertising and marketing expenses&lt;/ex&gt; (required).</param>
        /// <param name="quantity">จำนวนรายการค่าใช้จ่าย (required).</param>
        /// <param name="unitName">หน่วยรายการค่าใช้จ่าย.</param>
        /// <param name="pricePerUnit">ราคาต่อหน่วยค่าใช้จ่าย (required).</param>
        /// <param name="discountAmount">จำนวนส่วนลดรายการค่าใช้จ่าย (required) (default to 0).</param>
        /// <param name="vatRate">รูปแบบภาษี &lt;br&gt; 7 &#x3D; ภาษี 7% &lt;br&gt; 0 &#x3D; ภาษี 0% &lt;br&gt; -1 &#x3D; ยกเว้นภาษี (required) (default to 7).</param>
        /// <param name="total">มูลค่ารวม (required).</param>
        public ExpenseInlineProductItem(int systemCode = default(int), int categoryId = default(int), string description = default(string), string nameLocal = default(string), string nameForeign = default(string), int creditCategory = default(int), int creditId = default(int), string creditCode = default(string), string creditNameLocal = default(string), string creditNameForeign = default(string), int debitCategory = default(int), int debitId = default(int), string debitCode = default(string), string debitNameLocal = default(string), string debitNameForeign = default(string), decimal quantity = default(decimal), string unitName = default(string), decimal pricePerUnit = default(decimal), int discountAmount = 0, int vatRate = 7, decimal total = default(decimal))
        {
            // to ensure "systemCode" is required (not null)
            if (systemCode == null)
            {
                throw new InvalidDataException("systemCode is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.SystemCode = systemCode;
            }
            
            // to ensure "categoryId" is required (not null)
            if (categoryId == null)
            {
                throw new InvalidDataException("categoryId is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.CategoryId = categoryId;
            }
            
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new InvalidDataException("description is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.Description = description;
            }
            
            // to ensure "nameLocal" is required (not null)
            if (nameLocal == null)
            {
                throw new InvalidDataException("nameLocal is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.NameLocal = nameLocal;
            }
            
            // to ensure "nameForeign" is required (not null)
            if (nameForeign == null)
            {
                throw new InvalidDataException("nameForeign is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.NameForeign = nameForeign;
            }
            
            // to ensure "creditCategory" is required (not null)
            if (creditCategory == null)
            {
                throw new InvalidDataException("creditCategory is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.CreditCategory = creditCategory;
            }
            
            // to ensure "creditId" is required (not null)
            if (creditId == null)
            {
                throw new InvalidDataException("creditId is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.CreditId = creditId;
            }
            
            // to ensure "creditCode" is required (not null)
            if (creditCode == null)
            {
                throw new InvalidDataException("creditCode is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.CreditCode = creditCode;
            }
            
            // to ensure "creditNameLocal" is required (not null)
            if (creditNameLocal == null)
            {
                throw new InvalidDataException("creditNameLocal is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.CreditNameLocal = creditNameLocal;
            }
            
            // to ensure "creditNameForeign" is required (not null)
            if (creditNameForeign == null)
            {
                throw new InvalidDataException("creditNameForeign is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.CreditNameForeign = creditNameForeign;
            }
            
            // to ensure "debitCategory" is required (not null)
            if (debitCategory == null)
            {
                throw new InvalidDataException("debitCategory is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.DebitCategory = debitCategory;
            }
            
            // to ensure "debitId" is required (not null)
            if (debitId == null)
            {
                throw new InvalidDataException("debitId is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.DebitId = debitId;
            }
            
            // to ensure "debitCode" is required (not null)
            if (debitCode == null)
            {
                throw new InvalidDataException("debitCode is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.DebitCode = debitCode;
            }
            
            // to ensure "debitNameLocal" is required (not null)
            if (debitNameLocal == null)
            {
                throw new InvalidDataException("debitNameLocal is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.DebitNameLocal = debitNameLocal;
            }
            
            // to ensure "debitNameForeign" is required (not null)
            if (debitNameForeign == null)
            {
                throw new InvalidDataException("debitNameForeign is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.DebitNameForeign = debitNameForeign;
            }
            
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            
            // to ensure "pricePerUnit" is required (not null)
            if (pricePerUnit == null)
            {
                throw new InvalidDataException("pricePerUnit is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.PricePerUnit = pricePerUnit;
            }
            
            // to ensure "discountAmount" is required (not null)
            if (discountAmount == null)
            {
                throw new InvalidDataException("discountAmount is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.DiscountAmount = discountAmount;
            }
            
            // to ensure "vatRate" is required (not null)
            if (vatRate == null)
            {
                throw new InvalidDataException("vatRate is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.VatRate = vatRate;
            }
            
            // to ensure "total" is required (not null)
            if (total == null)
            {
                throw new InvalidDataException("total is a required property for ExpenseInlineProductItem and cannot be null");
            }
            else
            {
                this.Total = total;
            }
            
            this.UnitName = unitName;
        }
        
        /// <summary>
        /// เลขที่ system code หมวดหมู่ค่าใช้จ่าย (เลือกใช้ หมวดหมู่ค่าใช้จ่ายสำหรับธุรกิจ)
        /// </summary>
        /// <value>เลขที่ system code หมวดหมู่ค่าใช้จ่าย (เลือกใช้ หมวดหมู่ค่าใช้จ่ายสำหรับธุรกิจ)</value>
        [DataMember(Name="systemCode", EmitDefaultValue=true)]
        public int SystemCode { get; set; }

        /// <summary>
        /// เลขที่ id หมวดหมู่ค่าใช้จ่าย (เลือกใช้ หมวดหมู่ค่าใช้จ่ายสำหรับธุรกิจ) &lt;br&gt; &lt;ex&gt;Example: 40238&lt;/ex&gt;
        /// </summary>
        /// <value>เลขที่ id หมวดหมู่ค่าใช้จ่าย (เลือกใช้ หมวดหมู่ค่าใช้จ่ายสำหรับธุรกิจ) &lt;br&gt; &lt;ex&gt;Example: 40238&lt;/ex&gt;</value>
        [DataMember(Name="categoryId", EmitDefaultValue=true)]
        public int CategoryId { get; set; }

        /// <summary>
        /// รายละเอียดค่าใช้จ่าย
        /// </summary>
        /// <value>รายละเอียดค่าใช้จ่าย</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// ชื่อหมวดหมู่ค่าใช้จ่าย &lt;br&gt; &lt;ex&gt;Example: การตลาดและโฆษณา&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อหมวดหมู่ค่าใช้จ่าย &lt;br&gt; &lt;ex&gt;Example: การตลาดและโฆษณา&lt;/ex&gt;</value>
        [DataMember(Name="nameLocal", EmitDefaultValue=true)]
        public string NameLocal { get; set; }

        /// <summary>
        /// ชื่อหมวดหมู่ค่าใช้จ่าย (ภาษาอังกฤษ) &lt;br&gt; &lt;ex&gt;Example: Marketing &amp; Advertising&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อหมวดหมู่ค่าใช้จ่าย (ภาษาอังกฤษ) &lt;br&gt; &lt;ex&gt;Example: Marketing &amp; Advertising&lt;/ex&gt;</value>
        [DataMember(Name="nameForeign", EmitDefaultValue=true)]
        public string NameForeign { get; set; }

        /// <summary>
        /// เลขหมวดหมู่ ฝั่งเครดิต ของ หมวดหมู่ค่าใช้จ่าย &lt;br&gt; &lt;ex&gt;Example: 2&lt;/ex&gt;
        /// </summary>
        /// <value>เลขหมวดหมู่ ฝั่งเครดิต ของ หมวดหมู่ค่าใช้จ่าย &lt;br&gt; &lt;ex&gt;Example: 2&lt;/ex&gt;</value>
        [DataMember(Name="creditCategory", EmitDefaultValue=true)]
        public int CreditCategory { get; set; }

        /// <summary>
        /// เลข id หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิิต &lt;br&gt; &lt;ex&gt;Example: 1081994&lt;/ex&gt;
        /// </summary>
        /// <value>เลข id หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิิต &lt;br&gt; &lt;ex&gt;Example: 1081994&lt;/ex&gt;</value>
        [DataMember(Name="creditId", EmitDefaultValue=true)]
        public int CreditId { get; set; }

        /// <summary>
        /// เลขที่หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิต &lt;br&gt; &lt;ex&gt;Example: 21399&lt;/ex&gt;
        /// </summary>
        /// <value>เลขที่หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิต &lt;br&gt; &lt;ex&gt;Example: 21399&lt;/ex&gt;</value>
        [DataMember(Name="creditCode", EmitDefaultValue=true)]
        public string CreditCode { get; set; }

        /// <summary>
        /// ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิต &lt;br&gt; &lt;ex&gt;Example: 21399 / เจ้าหนี้อื่นๆ&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิต &lt;br&gt; &lt;ex&gt;Example: 21399 / เจ้าหนี้อื่นๆ&lt;/ex&gt;</value>
        [DataMember(Name="creditNameLocal", EmitDefaultValue=true)]
        public string CreditNameLocal { get; set; }

        /// <summary>
        /// ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิต (ภาษาอังกฤษ) &lt;br&gt; &lt;ex&gt;Example: 21399 / Other Payables&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเครดิต (ภาษาอังกฤษ) &lt;br&gt; &lt;ex&gt;Example: 21399 / Other Payables&lt;/ex&gt;</value>
        [DataMember(Name="creditNameForeign", EmitDefaultValue=true)]
        public string CreditNameForeign { get; set; }

        /// <summary>
        /// เลขหมวดหมู่ ฝั่งเดบิต ของ หมวดหมู่ค่าใช้จ่าย
        /// </summary>
        /// <value>เลขหมวดหมู่ ฝั่งเดบิต ของ หมวดหมู่ค่าใช้จ่าย</value>
        [DataMember(Name="debitCategory", EmitDefaultValue=true)]
        public int DebitCategory { get; set; }

        /// <summary>
        /// เลข id หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต &lt;br&gt; &lt;ex&gt;Example: 1082099&lt;/ex&gt;
        /// </summary>
        /// <value>เลข id หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต &lt;br&gt; &lt;ex&gt;Example: 1082099&lt;/ex&gt;</value>
        [DataMember(Name="debitId", EmitDefaultValue=true)]
        public int DebitId { get; set; }

        /// <summary>
        /// เลขที่หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต &lt;br&gt; &lt;ex&gt;Example: 53029&lt;/ex&gt;
        /// </summary>
        /// <value>เลขที่หมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต &lt;br&gt; &lt;ex&gt;Example: 53029&lt;/ex&gt;</value>
        [DataMember(Name="debitCode", EmitDefaultValue=true)]
        public string DebitCode { get; set; }

        /// <summary>
        /// ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต &lt;br&gt; &lt;ex&gt;Example: 53029 / ค่าใช้จ่ายด้านโฆษณาและการตลาดอื่นๆ&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต &lt;br&gt; &lt;ex&gt;Example: 53029 / ค่าใช้จ่ายด้านโฆษณาและการตลาดอื่นๆ&lt;/ex&gt;</value>
        [DataMember(Name="debitNameLocal", EmitDefaultValue=true)]
        public string DebitNameLocal { get; set; }

        /// <summary>
        /// ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต (ภาษาอังกฤษ) &lt;br&gt; &lt;ex&gt;Example: 53029 / Other advertising and marketing expenses&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อหมวดหมู่ค่าใช้จ่ายทางบัญชี ฝั่งเดบิต (ภาษาอังกฤษ) &lt;br&gt; &lt;ex&gt;Example: 53029 / Other advertising and marketing expenses&lt;/ex&gt;</value>
        [DataMember(Name="debitNameForeign", EmitDefaultValue=true)]
        public string DebitNameForeign { get; set; }

        /// <summary>
        /// จำนวนรายการค่าใช้จ่าย
        /// </summary>
        /// <value>จำนวนรายการค่าใช้จ่าย</value>
        [DataMember(Name="quantity", EmitDefaultValue=true)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// หน่วยรายการค่าใช้จ่าย
        /// </summary>
        /// <value>หน่วยรายการค่าใช้จ่าย</value>
        [DataMember(Name="unitName", EmitDefaultValue=true)]
        public string UnitName { get; set; }

        /// <summary>
        /// ราคาต่อหน่วยค่าใช้จ่าย
        /// </summary>
        /// <value>ราคาต่อหน่วยค่าใช้จ่าย</value>
        [DataMember(Name="pricePerUnit", EmitDefaultValue=true)]
        public decimal PricePerUnit { get; set; }

        /// <summary>
        /// จำนวนส่วนลดรายการค่าใช้จ่าย
        /// </summary>
        /// <value>จำนวนส่วนลดรายการค่าใช้จ่าย</value>
        [DataMember(Name="discountAmount", EmitDefaultValue=true)]
        public int DiscountAmount { get; set; }

        /// <summary>
        /// รูปแบบภาษี &lt;br&gt; 7 &#x3D; ภาษี 7% &lt;br&gt; 0 &#x3D; ภาษี 0% &lt;br&gt; -1 &#x3D; ยกเว้นภาษี
        /// </summary>
        /// <value>รูปแบบภาษี &lt;br&gt; 7 &#x3D; ภาษี 7% &lt;br&gt; 0 &#x3D; ภาษี 0% &lt;br&gt; -1 &#x3D; ยกเว้นภาษี</value>
        [DataMember(Name="vatRate", EmitDefaultValue=true)]
        public int VatRate { get; set; }

        /// <summary>
        /// มูลค่ารวม
        /// </summary>
        /// <value>มูลค่ารวม</value>
        [DataMember(Name="total", EmitDefaultValue=true)]
        public decimal Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExpenseInlineProductItem {\n");
            sb.Append("  SystemCode: ").Append(SystemCode).Append("\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NameLocal: ").Append(NameLocal).Append("\n");
            sb.Append("  NameForeign: ").Append(NameForeign).Append("\n");
            sb.Append("  CreditCategory: ").Append(CreditCategory).Append("\n");
            sb.Append("  CreditId: ").Append(CreditId).Append("\n");
            sb.Append("  CreditCode: ").Append(CreditCode).Append("\n");
            sb.Append("  CreditNameLocal: ").Append(CreditNameLocal).Append("\n");
            sb.Append("  CreditNameForeign: ").Append(CreditNameForeign).Append("\n");
            sb.Append("  DebitCategory: ").Append(DebitCategory).Append("\n");
            sb.Append("  DebitId: ").Append(DebitId).Append("\n");
            sb.Append("  DebitCode: ").Append(DebitCode).Append("\n");
            sb.Append("  DebitNameLocal: ").Append(DebitNameLocal).Append("\n");
            sb.Append("  DebitNameForeign: ").Append(DebitNameForeign).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitName: ").Append(UnitName).Append("\n");
            sb.Append("  PricePerUnit: ").Append(PricePerUnit).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  VatRate: ").Append(VatRate).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseInlineProductItem);
        }

        /// <summary>
        /// Returns true if ExpenseInlineProductItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseInlineProductItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseInlineProductItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SystemCode == input.SystemCode ||
                    (this.SystemCode != null &&
                    this.SystemCode.Equals(input.SystemCode))
                ) && 
                (
                    this.CategoryId == input.CategoryId ||
                    (this.CategoryId != null &&
                    this.CategoryId.Equals(input.CategoryId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.NameLocal == input.NameLocal ||
                    (this.NameLocal != null &&
                    this.NameLocal.Equals(input.NameLocal))
                ) && 
                (
                    this.NameForeign == input.NameForeign ||
                    (this.NameForeign != null &&
                    this.NameForeign.Equals(input.NameForeign))
                ) && 
                (
                    this.CreditCategory == input.CreditCategory ||
                    (this.CreditCategory != null &&
                    this.CreditCategory.Equals(input.CreditCategory))
                ) && 
                (
                    this.CreditId == input.CreditId ||
                    (this.CreditId != null &&
                    this.CreditId.Equals(input.CreditId))
                ) && 
                (
                    this.CreditCode == input.CreditCode ||
                    (this.CreditCode != null &&
                    this.CreditCode.Equals(input.CreditCode))
                ) && 
                (
                    this.CreditNameLocal == input.CreditNameLocal ||
                    (this.CreditNameLocal != null &&
                    this.CreditNameLocal.Equals(input.CreditNameLocal))
                ) && 
                (
                    this.CreditNameForeign == input.CreditNameForeign ||
                    (this.CreditNameForeign != null &&
                    this.CreditNameForeign.Equals(input.CreditNameForeign))
                ) && 
                (
                    this.DebitCategory == input.DebitCategory ||
                    (this.DebitCategory != null &&
                    this.DebitCategory.Equals(input.DebitCategory))
                ) && 
                (
                    this.DebitId == input.DebitId ||
                    (this.DebitId != null &&
                    this.DebitId.Equals(input.DebitId))
                ) && 
                (
                    this.DebitCode == input.DebitCode ||
                    (this.DebitCode != null &&
                    this.DebitCode.Equals(input.DebitCode))
                ) && 
                (
                    this.DebitNameLocal == input.DebitNameLocal ||
                    (this.DebitNameLocal != null &&
                    this.DebitNameLocal.Equals(input.DebitNameLocal))
                ) && 
                (
                    this.DebitNameForeign == input.DebitNameForeign ||
                    (this.DebitNameForeign != null &&
                    this.DebitNameForeign.Equals(input.DebitNameForeign))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.UnitName == input.UnitName ||
                    (this.UnitName != null &&
                    this.UnitName.Equals(input.UnitName))
                ) && 
                (
                    this.PricePerUnit == input.PricePerUnit ||
                    (this.PricePerUnit != null &&
                    this.PricePerUnit.Equals(input.PricePerUnit))
                ) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && 
                (
                    this.VatRate == input.VatRate ||
                    (this.VatRate != null &&
                    this.VatRate.Equals(input.VatRate))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SystemCode != null)
                    hashCode = hashCode * 59 + this.SystemCode.GetHashCode();
                if (this.CategoryId != null)
                    hashCode = hashCode * 59 + this.CategoryId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.NameLocal != null)
                    hashCode = hashCode * 59 + this.NameLocal.GetHashCode();
                if (this.NameForeign != null)
                    hashCode = hashCode * 59 + this.NameForeign.GetHashCode();
                if (this.CreditCategory != null)
                    hashCode = hashCode * 59 + this.CreditCategory.GetHashCode();
                if (this.CreditId != null)
                    hashCode = hashCode * 59 + this.CreditId.GetHashCode();
                if (this.CreditCode != null)
                    hashCode = hashCode * 59 + this.CreditCode.GetHashCode();
                if (this.CreditNameLocal != null)
                    hashCode = hashCode * 59 + this.CreditNameLocal.GetHashCode();
                if (this.CreditNameForeign != null)
                    hashCode = hashCode * 59 + this.CreditNameForeign.GetHashCode();
                if (this.DebitCategory != null)
                    hashCode = hashCode * 59 + this.DebitCategory.GetHashCode();
                if (this.DebitId != null)
                    hashCode = hashCode * 59 + this.DebitId.GetHashCode();
                if (this.DebitCode != null)
                    hashCode = hashCode * 59 + this.DebitCode.GetHashCode();
                if (this.DebitNameLocal != null)
                    hashCode = hashCode * 59 + this.DebitNameLocal.GetHashCode();
                if (this.DebitNameForeign != null)
                    hashCode = hashCode * 59 + this.DebitNameForeign.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.UnitName != null)
                    hashCode = hashCode * 59 + this.UnitName.GetHashCode();
                if (this.PricePerUnit != null)
                    hashCode = hashCode * 59 + this.PricePerUnit.GetHashCode();
                if (this.DiscountAmount != null)
                    hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                if (this.VatRate != null)
                    hashCode = hashCode * 59 + this.VatRate.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UnitName (string) maxLength
            if(this.UnitName != null && this.UnitName.Length > 7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitName, length must be less than 7.", new [] { "UnitName" });
            }

            yield break;
        }
    }

}
