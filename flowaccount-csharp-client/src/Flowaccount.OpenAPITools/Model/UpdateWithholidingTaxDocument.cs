/* 
 * FlowAccount Open API
 *
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// UpdateWithholidingTaxDocument
    /// </summary>
    [DataContract]
    public partial class UpdateWithholidingTaxDocument :  IEquatable<UpdateWithholidingTaxDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateWithholidingTaxDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateWithholidingTaxDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateWithholidingTaxDocument" /> class.
        /// </summary>
        /// <param name="companyName">ชื่อบริษัท (required).</param>
        /// <param name="companyNameEn">ชื่อบริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ).</param>
        /// <param name="companyAddress">ที่อยู่บริษัท (required).</param>
        /// <param name="companyAddressEn">ที่อยู่บริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ).</param>
        /// <param name="companyTaxId">เลขประจำตัวผู้เสียภาษี บริษัท &lt;br&gt;&lt;ex&gt;Example: 0105558096348&lt;/ex&gt;.</param>
        /// <param name="companyBranch">ชื่อ และ รหัสสาขา &lt;br&gt;&lt;ex&gt;Example: สำนักงานใหญ่ 00000&lt;/ex&gt; (required).</param>
        /// <param name="companyBranchEn">ชื่อ และ รหัสสาขา ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ) &lt;br&gt;&lt;ex&gt;Example: Head Office 00000&lt;/ex&gt;.</param>
        /// <param name="companyPhone">เบอร์โทรสำนักงาน &lt;br&gt;&lt;ex&gt;Example: 02-999-9999&lt;/ex&gt;.</param>
        /// <param name="companyMobile">เบอร์โทรศัพท์มือถือ &lt;br&gt;&lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;.</param>
        /// <param name="companyFax">เบอร์โทรสาร &lt;br&gt;&lt;ex&gt;Example: 02-999-9999 ต่อ 1&lt;/ex&gt;.</param>
        /// <param name="companyWebsite">เว็บไซต์ &lt;br&gt;&lt;ex&gt;Example: www.flowaccount.com&lt;/ex&gt;.</param>
        /// <param name="contactCode">รหัส ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า.</param>
        /// <param name="contactName">ชื่อ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า (required).</param>
        /// <param name="contactAddress">ที่อยู่ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า.</param>
        /// <param name="contactTaxId">เลขประจำตัวผู้เสียภาษี ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า &lt;br&gt; (ถ้ามีจำเป็นต้องครบ 13 หลัก) &lt;br&gt; &lt;ex&gt;Example: 1234567890123 &lt;/ex&gt;.</param>
        /// <param name="contactBranch">สำนักงาน/สาขา.</param>
        /// <param name="contactPerson">ชื่อผู้ติดต่อ.</param>
        /// <param name="contactEmail">อีเมลผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: contact@email.com&lt;/ex&gt;.</param>
        /// <param name="contactNumber">เบอร์มือถือผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;.</param>
        /// <param name="contactZipCode">รหัสไปรษณีย์ติดต่อ.</param>
        /// <param name="contactGroup">ประผู้ติดต่อ &lt;br&gt; 1 &#x3D; บุคคลธรรมดา &lt;br&gt; 3 &#x3D; นิติบุคคล (default to 1).</param>
        /// <param name="publishedOn">วันที่เอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt; (required).</param>
        /// <param name="entity">แบบฟอร์มเอกสารหัก ณ ที่จ่าย &lt;br&gt; ภงด 3 &#x3D; 1 &lt;br&gt; ภงด 53 &#x3D; 3 &lt;br&gt; ภงด 1ก &#x3D; 1 &lt;br&gt; ภงด 1ก (พิเศษ) &#x3D; 7 &lt;br&gt; ภงด 2 &#x3D; 9 &lt;br&gt; ภงด 2ก &#x3D; 11 &lt;br&gt; ภงด 3ก &#x3D; 13 (required) (default to 1).</param>
        /// <param name="textOther">ระบุปีของเอกสาร เช่น 2020 (สำหรับแบบฟอร์มเอกสาร ภงด 1ก หรือ ภงด 1ก (พิเศษ) &lt;br&gt;Example: 2020&lt;/ex&gt;.</param>
        /// <param name="withholdingTaxItems">รายการหัก ของเอกสารหัก ณ ที่จ่าย (required).</param>
        /// <param name="total">จำนวนเงิน (ไม่รวมภาษี) (required).</param>
        /// <param name="totalTaxWithheld">ภาษีที่หัก (required).</param>
        /// <param name="taxPayment">ผู้จ่ายเงิน &lt;br&gt; 1 &#x3D; ภาษีหัก ณ ที่จ่าย &lt;br&gt; 3 &#x3D; ออกภาษีให้ตลอดไป &lt;br&gt; 5 &#x3D; ออกภาษีให้ครั้งเดียว &lt;br&gt; 7 &#x3D; อื่น ๆ (default to 1).</param>
        /// <param name="taxPaymentOthers">ข้อความ สำหรับผู้จ่ายเงิน อื่นๆ .</param>
        /// <param name="providentFundNumber">ใบอนุญาตเลขที่.</param>
        /// <param name="providentFundAmount">จำนวนเงินที่ต้องจ่ายเข้า กองทุนสำรองเลี้ยงชีพ.</param>
        /// <param name="socialSecurityAmount">จำนวนเงินที่ต้องจ่ายเข้า กองทุนประกันสังคม.</param>
        /// <param name="remarks">หมายเหตุเอกสาร.</param>
        /// <param name="internalNotes">โน๊ตภายในบริษัท.</param>
        /// <param name="showSignatureOrStamp">ลายเซ็นอิเล็กทรอนิกส์และตรายาง (default to true).</param>
        public UpdateWithholidingTaxDocument(string companyName = default(string), string companyNameEn = default(string), string companyAddress = default(string), string companyAddressEn = default(string), string companyTaxId = default(string), string companyBranch = default(string), string companyBranchEn = default(string), string companyPhone = default(string), string companyMobile = default(string), string companyFax = default(string), string companyWebsite = default(string), string contactCode = default(string), string contactName = default(string), string contactAddress = default(string), string contactTaxId = default(string), string contactBranch = default(string), string contactPerson = default(string), string contactEmail = default(string), string contactNumber = default(string), string contactZipCode = default(string), int contactGroup = 1, DateTime publishedOn = default(DateTime), int entity = 1, string textOther = default(string), List<WithholidingTaxItem> withholdingTaxItems = default(List<WithholidingTaxItem>), decimal total = default(decimal), decimal totalTaxWithheld = default(decimal), int taxPayment = 1, string taxPaymentOthers = default(string), string providentFundNumber = default(string), string providentFundAmount = default(string), string socialSecurityAmount = default(string), string remarks = default(string), string internalNotes = default(string), bool showSignatureOrStamp = true)
        {
            // to ensure "companyName" is required (not null)
            if (companyName == null)
            {
                throw new InvalidDataException("companyName is a required property for UpdateWithholidingTaxDocument and cannot be null");
            }
            else
            {
                this.CompanyName = companyName;
            }
            
            // to ensure "companyAddress" is required (not null)
            if (companyAddress == null)
            {
                throw new InvalidDataException("companyAddress is a required property for UpdateWithholidingTaxDocument and cannot be null");
            }
            else
            {
                this.CompanyAddress = companyAddress;
            }
            
            // to ensure "companyBranch" is required (not null)
            if (companyBranch == null)
            {
                throw new InvalidDataException("companyBranch is a required property for UpdateWithholidingTaxDocument and cannot be null");
            }
            else
            {
                this.CompanyBranch = companyBranch;
            }
            
            // to ensure "contactName" is required (not null)
            if (contactName == null)
            {
                throw new InvalidDataException("contactName is a required property for UpdateWithholidingTaxDocument and cannot be null");
            }
            else
            {
                this.ContactName = contactName;
            }
            
            // to ensure "publishedOn" is required (not null)
            if (publishedOn == null)
            {
                throw new InvalidDataException("publishedOn is a required property for UpdateWithholidingTaxDocument and cannot be null");
            }
            else
            {
                this.PublishedOn = publishedOn;
            }
            
            // to ensure "entity" is required (not null)
            if (entity == null)
            {
                throw new InvalidDataException("entity is a required property for UpdateWithholidingTaxDocument and cannot be null");
            }
            else
            {
                this.Entity = entity;
            }
            
            // to ensure "withholdingTaxItems" is required (not null)
            if (withholdingTaxItems == null)
            {
                throw new InvalidDataException("withholdingTaxItems is a required property for UpdateWithholidingTaxDocument and cannot be null");
            }
            else
            {
                this.WithholdingTaxItems = withholdingTaxItems;
            }
            
            // to ensure "total" is required (not null)
            if (total == null)
            {
                throw new InvalidDataException("total is a required property for UpdateWithholidingTaxDocument and cannot be null");
            }
            else
            {
                this.Total = total;
            }
            
            // to ensure "totalTaxWithheld" is required (not null)
            if (totalTaxWithheld == null)
            {
                throw new InvalidDataException("totalTaxWithheld is a required property for UpdateWithholidingTaxDocument and cannot be null");
            }
            else
            {
                this.TotalTaxWithheld = totalTaxWithheld;
            }
            
            this.CompanyNameEn = companyNameEn;
            this.CompanyAddressEn = companyAddressEn;
            this.CompanyTaxId = companyTaxId;
            this.CompanyBranchEn = companyBranchEn;
            this.CompanyPhone = companyPhone;
            this.CompanyMobile = companyMobile;
            this.CompanyFax = companyFax;
            this.CompanyWebsite = companyWebsite;
            this.ContactCode = contactCode;
            this.ContactAddress = contactAddress;
            this.ContactTaxId = contactTaxId;
            this.ContactBranch = contactBranch;
            this.ContactPerson = contactPerson;
            this.ContactEmail = contactEmail;
            this.ContactNumber = contactNumber;
            this.ContactZipCode = contactZipCode;
            // use default value if no "contactGroup" provided
            if (contactGroup == null)
            {
                this.ContactGroup = 1;
            }
            else
            {
                this.ContactGroup = contactGroup;
            }
            this.TextOther = textOther;
            // use default value if no "taxPayment" provided
            if (taxPayment == null)
            {
                this.TaxPayment = 1;
            }
            else
            {
                this.TaxPayment = taxPayment;
            }
            this.TaxPaymentOthers = taxPaymentOthers;
            this.ProvidentFundNumber = providentFundNumber;
            this.ProvidentFundAmount = providentFundAmount;
            this.SocialSecurityAmount = socialSecurityAmount;
            this.Remarks = remarks;
            this.InternalNotes = internalNotes;
            // use default value if no "showSignatureOrStamp" provided
            if (showSignatureOrStamp == null)
            {
                this.ShowSignatureOrStamp = true;
            }
            else
            {
                this.ShowSignatureOrStamp = showSignatureOrStamp;
            }
        }
        
        /// <summary>
        /// ชื่อบริษัท
        /// </summary>
        /// <value>ชื่อบริษัท</value>
        [DataMember(Name="companyName", EmitDefaultValue=true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// ชื่อบริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ)
        /// </summary>
        /// <value>ชื่อบริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ)</value>
        [DataMember(Name="companyNameEn", EmitDefaultValue=true)]
        public string CompanyNameEn { get; set; }

        /// <summary>
        /// ที่อยู่บริษัท
        /// </summary>
        /// <value>ที่อยู่บริษัท</value>
        [DataMember(Name="companyAddress", EmitDefaultValue=true)]
        public string CompanyAddress { get; set; }

        /// <summary>
        /// ที่อยู่บริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ)
        /// </summary>
        /// <value>ที่อยู่บริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ)</value>
        [DataMember(Name="companyAddressEn", EmitDefaultValue=true)]
        public string CompanyAddressEn { get; set; }

        /// <summary>
        /// เลขประจำตัวผู้เสียภาษี บริษัท &lt;br&gt;&lt;ex&gt;Example: 0105558096348&lt;/ex&gt;
        /// </summary>
        /// <value>เลขประจำตัวผู้เสียภาษี บริษัท &lt;br&gt;&lt;ex&gt;Example: 0105558096348&lt;/ex&gt;</value>
        [DataMember(Name="companyTaxId", EmitDefaultValue=true)]
        public string CompanyTaxId { get; set; }

        /// <summary>
        /// ชื่อ และ รหัสสาขา &lt;br&gt;&lt;ex&gt;Example: สำนักงานใหญ่ 00000&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อ และ รหัสสาขา &lt;br&gt;&lt;ex&gt;Example: สำนักงานใหญ่ 00000&lt;/ex&gt;</value>
        [DataMember(Name="companyBranch", EmitDefaultValue=true)]
        public string CompanyBranch { get; set; }

        /// <summary>
        /// ชื่อ และ รหัสสาขา ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ) &lt;br&gt;&lt;ex&gt;Example: Head Office 00000&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อ และ รหัสสาขา ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ) &lt;br&gt;&lt;ex&gt;Example: Head Office 00000&lt;/ex&gt;</value>
        [DataMember(Name="companyBranchEn", EmitDefaultValue=true)]
        public string CompanyBranchEn { get; set; }

        /// <summary>
        /// เบอร์โทรสำนักงาน &lt;br&gt;&lt;ex&gt;Example: 02-999-9999&lt;/ex&gt;
        /// </summary>
        /// <value>เบอร์โทรสำนักงาน &lt;br&gt;&lt;ex&gt;Example: 02-999-9999&lt;/ex&gt;</value>
        [DataMember(Name="companyPhone", EmitDefaultValue=true)]
        public string CompanyPhone { get; set; }

        /// <summary>
        /// เบอร์โทรศัพท์มือถือ &lt;br&gt;&lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;
        /// </summary>
        /// <value>เบอร์โทรศัพท์มือถือ &lt;br&gt;&lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;</value>
        [DataMember(Name="companyMobile", EmitDefaultValue=true)]
        public string CompanyMobile { get; set; }

        /// <summary>
        /// เบอร์โทรสาร &lt;br&gt;&lt;ex&gt;Example: 02-999-9999 ต่อ 1&lt;/ex&gt;
        /// </summary>
        /// <value>เบอร์โทรสาร &lt;br&gt;&lt;ex&gt;Example: 02-999-9999 ต่อ 1&lt;/ex&gt;</value>
        [DataMember(Name="companyFax", EmitDefaultValue=true)]
        public string CompanyFax { get; set; }

        /// <summary>
        /// เว็บไซต์ &lt;br&gt;&lt;ex&gt;Example: www.flowaccount.com&lt;/ex&gt;
        /// </summary>
        /// <value>เว็บไซต์ &lt;br&gt;&lt;ex&gt;Example: www.flowaccount.com&lt;/ex&gt;</value>
        [DataMember(Name="companyWebsite", EmitDefaultValue=true)]
        public string CompanyWebsite { get; set; }

        /// <summary>
        /// รหัส ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า
        /// </summary>
        /// <value>รหัส ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า</value>
        [DataMember(Name="contactCode", EmitDefaultValue=true)]
        public string ContactCode { get; set; }

        /// <summary>
        /// ชื่อ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า
        /// </summary>
        /// <value>ชื่อ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า</value>
        [DataMember(Name="contactName", EmitDefaultValue=true)]
        public string ContactName { get; set; }

        /// <summary>
        /// ที่อยู่ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า
        /// </summary>
        /// <value>ที่อยู่ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า</value>
        [DataMember(Name="contactAddress", EmitDefaultValue=true)]
        public string ContactAddress { get; set; }

        /// <summary>
        /// เลขประจำตัวผู้เสียภาษี ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า &lt;br&gt; (ถ้ามีจำเป็นต้องครบ 13 หลัก) &lt;br&gt; &lt;ex&gt;Example: 1234567890123 &lt;/ex&gt;
        /// </summary>
        /// <value>เลขประจำตัวผู้เสียภาษี ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า &lt;br&gt; (ถ้ามีจำเป็นต้องครบ 13 หลัก) &lt;br&gt; &lt;ex&gt;Example: 1234567890123 &lt;/ex&gt;</value>
        [DataMember(Name="contactTaxId", EmitDefaultValue=true)]
        public string ContactTaxId { get; set; }

        /// <summary>
        /// สำนักงาน/สาขา
        /// </summary>
        /// <value>สำนักงาน/สาขา</value>
        [DataMember(Name="contactBranch", EmitDefaultValue=true)]
        public string ContactBranch { get; set; }

        /// <summary>
        /// ชื่อผู้ติดต่อ
        /// </summary>
        /// <value>ชื่อผู้ติดต่อ</value>
        [DataMember(Name="contactPerson", EmitDefaultValue=true)]
        public string ContactPerson { get; set; }

        /// <summary>
        /// อีเมลผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: contact@email.com&lt;/ex&gt;
        /// </summary>
        /// <value>อีเมลผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: contact@email.com&lt;/ex&gt;</value>
        [DataMember(Name="contactEmail", EmitDefaultValue=true)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// เบอร์มือถือผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;
        /// </summary>
        /// <value>เบอร์มือถือผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;</value>
        [DataMember(Name="contactNumber", EmitDefaultValue=true)]
        public string ContactNumber { get; set; }

        /// <summary>
        /// รหัสไปรษณีย์ติดต่อ
        /// </summary>
        /// <value>รหัสไปรษณีย์ติดต่อ</value>
        [DataMember(Name="contactZipCode", EmitDefaultValue=true)]
        public string ContactZipCode { get; set; }

        /// <summary>
        /// ประผู้ติดต่อ &lt;br&gt; 1 &#x3D; บุคคลธรรมดา &lt;br&gt; 3 &#x3D; นิติบุคคล
        /// </summary>
        /// <value>ประผู้ติดต่อ &lt;br&gt; 1 &#x3D; บุคคลธรรมดา &lt;br&gt; 3 &#x3D; นิติบุคคล</value>
        [DataMember(Name="contactGroup", EmitDefaultValue=true)]
        public int ContactGroup { get; set; }

        /// <summary>
        /// วันที่เอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;
        /// </summary>
        /// <value>วันที่เอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;</value>
        [DataMember(Name="publishedOn", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime PublishedOn { get; set; }

        /// <summary>
        /// แบบฟอร์มเอกสารหัก ณ ที่จ่าย &lt;br&gt; ภงด 3 &#x3D; 1 &lt;br&gt; ภงด 53 &#x3D; 3 &lt;br&gt; ภงด 1ก &#x3D; 1 &lt;br&gt; ภงด 1ก (พิเศษ) &#x3D; 7 &lt;br&gt; ภงด 2 &#x3D; 9 &lt;br&gt; ภงด 2ก &#x3D; 11 &lt;br&gt; ภงด 3ก &#x3D; 13
        /// </summary>
        /// <value>แบบฟอร์มเอกสารหัก ณ ที่จ่าย &lt;br&gt; ภงด 3 &#x3D; 1 &lt;br&gt; ภงด 53 &#x3D; 3 &lt;br&gt; ภงด 1ก &#x3D; 1 &lt;br&gt; ภงด 1ก (พิเศษ) &#x3D; 7 &lt;br&gt; ภงด 2 &#x3D; 9 &lt;br&gt; ภงด 2ก &#x3D; 11 &lt;br&gt; ภงด 3ก &#x3D; 13</value>
        [DataMember(Name="entity", EmitDefaultValue=true)]
        public int Entity { get; set; }

        /// <summary>
        /// ระบุปีของเอกสาร เช่น 2020 (สำหรับแบบฟอร์มเอกสาร ภงด 1ก หรือ ภงด 1ก (พิเศษ) &lt;br&gt;Example: 2020&lt;/ex&gt;
        /// </summary>
        /// <value>ระบุปีของเอกสาร เช่น 2020 (สำหรับแบบฟอร์มเอกสาร ภงด 1ก หรือ ภงด 1ก (พิเศษ) &lt;br&gt;Example: 2020&lt;/ex&gt;</value>
        [DataMember(Name="textOther", EmitDefaultValue=true)]
        public string TextOther { get; set; }

        /// <summary>
        /// รายการหัก ของเอกสารหัก ณ ที่จ่าย
        /// </summary>
        /// <value>รายการหัก ของเอกสารหัก ณ ที่จ่าย</value>
        [DataMember(Name="withholdingTaxItems", EmitDefaultValue=true)]
        public List<WithholidingTaxItem> WithholdingTaxItems { get; set; }

        /// <summary>
        /// จำนวนเงิน (ไม่รวมภาษี)
        /// </summary>
        /// <value>จำนวนเงิน (ไม่รวมภาษี)</value>
        [DataMember(Name="total", EmitDefaultValue=true)]
        public decimal Total { get; set; }

        /// <summary>
        /// ภาษีที่หัก
        /// </summary>
        /// <value>ภาษีที่หัก</value>
        [DataMember(Name="totalTaxWithheld", EmitDefaultValue=true)]
        public decimal TotalTaxWithheld { get; set; }

        /// <summary>
        /// ผู้จ่ายเงิน &lt;br&gt; 1 &#x3D; ภาษีหัก ณ ที่จ่าย &lt;br&gt; 3 &#x3D; ออกภาษีให้ตลอดไป &lt;br&gt; 5 &#x3D; ออกภาษีให้ครั้งเดียว &lt;br&gt; 7 &#x3D; อื่น ๆ
        /// </summary>
        /// <value>ผู้จ่ายเงิน &lt;br&gt; 1 &#x3D; ภาษีหัก ณ ที่จ่าย &lt;br&gt; 3 &#x3D; ออกภาษีให้ตลอดไป &lt;br&gt; 5 &#x3D; ออกภาษีให้ครั้งเดียว &lt;br&gt; 7 &#x3D; อื่น ๆ</value>
        [DataMember(Name="taxPayment", EmitDefaultValue=true)]
        public int TaxPayment { get; set; }

        /// <summary>
        /// ข้อความ สำหรับผู้จ่ายเงิน อื่นๆ 
        /// </summary>
        /// <value>ข้อความ สำหรับผู้จ่ายเงิน อื่นๆ </value>
        [DataMember(Name="taxPaymentOthers", EmitDefaultValue=true)]
        public string TaxPaymentOthers { get; set; }

        /// <summary>
        /// ใบอนุญาตเลขที่
        /// </summary>
        /// <value>ใบอนุญาตเลขที่</value>
        [DataMember(Name="providentFundNumber", EmitDefaultValue=true)]
        public string ProvidentFundNumber { get; set; }

        /// <summary>
        /// จำนวนเงินที่ต้องจ่ายเข้า กองทุนสำรองเลี้ยงชีพ
        /// </summary>
        /// <value>จำนวนเงินที่ต้องจ่ายเข้า กองทุนสำรองเลี้ยงชีพ</value>
        [DataMember(Name="providentFundAmount", EmitDefaultValue=true)]
        public string ProvidentFundAmount { get; set; }

        /// <summary>
        /// จำนวนเงินที่ต้องจ่ายเข้า กองทุนประกันสังคม
        /// </summary>
        /// <value>จำนวนเงินที่ต้องจ่ายเข้า กองทุนประกันสังคม</value>
        [DataMember(Name="socialSecurityAmount", EmitDefaultValue=true)]
        public string SocialSecurityAmount { get; set; }

        /// <summary>
        /// หมายเหตุเอกสาร
        /// </summary>
        /// <value>หมายเหตุเอกสาร</value>
        [DataMember(Name="remarks", EmitDefaultValue=true)]
        public string Remarks { get; set; }

        /// <summary>
        /// โน๊ตภายในบริษัท
        /// </summary>
        /// <value>โน๊ตภายในบริษัท</value>
        [DataMember(Name="internalNotes", EmitDefaultValue=true)]
        public string InternalNotes { get; set; }

        /// <summary>
        /// ลายเซ็นอิเล็กทรอนิกส์และตรายาง
        /// </summary>
        /// <value>ลายเซ็นอิเล็กทรอนิกส์และตรายาง</value>
        [DataMember(Name="showSignatureOrStamp", EmitDefaultValue=true)]
        public bool ShowSignatureOrStamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateWithholidingTaxDocument {\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyNameEn: ").Append(CompanyNameEn).Append("\n");
            sb.Append("  CompanyAddress: ").Append(CompanyAddress).Append("\n");
            sb.Append("  CompanyAddressEn: ").Append(CompanyAddressEn).Append("\n");
            sb.Append("  CompanyTaxId: ").Append(CompanyTaxId).Append("\n");
            sb.Append("  CompanyBranch: ").Append(CompanyBranch).Append("\n");
            sb.Append("  CompanyBranchEn: ").Append(CompanyBranchEn).Append("\n");
            sb.Append("  CompanyPhone: ").Append(CompanyPhone).Append("\n");
            sb.Append("  CompanyMobile: ").Append(CompanyMobile).Append("\n");
            sb.Append("  CompanyFax: ").Append(CompanyFax).Append("\n");
            sb.Append("  CompanyWebsite: ").Append(CompanyWebsite).Append("\n");
            sb.Append("  ContactCode: ").Append(ContactCode).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactAddress: ").Append(ContactAddress).Append("\n");
            sb.Append("  ContactTaxId: ").Append(ContactTaxId).Append("\n");
            sb.Append("  ContactBranch: ").Append(ContactBranch).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  ContactZipCode: ").Append(ContactZipCode).Append("\n");
            sb.Append("  ContactGroup: ").Append(ContactGroup).Append("\n");
            sb.Append("  PublishedOn: ").Append(PublishedOn).Append("\n");
            sb.Append("  Entity: ").Append(Entity).Append("\n");
            sb.Append("  TextOther: ").Append(TextOther).Append("\n");
            sb.Append("  WithholdingTaxItems: ").Append(WithholdingTaxItems).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  TotalTaxWithheld: ").Append(TotalTaxWithheld).Append("\n");
            sb.Append("  TaxPayment: ").Append(TaxPayment).Append("\n");
            sb.Append("  TaxPaymentOthers: ").Append(TaxPaymentOthers).Append("\n");
            sb.Append("  ProvidentFundNumber: ").Append(ProvidentFundNumber).Append("\n");
            sb.Append("  ProvidentFundAmount: ").Append(ProvidentFundAmount).Append("\n");
            sb.Append("  SocialSecurityAmount: ").Append(SocialSecurityAmount).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  InternalNotes: ").Append(InternalNotes).Append("\n");
            sb.Append("  ShowSignatureOrStamp: ").Append(ShowSignatureOrStamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateWithholidingTaxDocument);
        }

        /// <summary>
        /// Returns true if UpdateWithholidingTaxDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateWithholidingTaxDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateWithholidingTaxDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.CompanyNameEn == input.CompanyNameEn ||
                    (this.CompanyNameEn != null &&
                    this.CompanyNameEn.Equals(input.CompanyNameEn))
                ) && 
                (
                    this.CompanyAddress == input.CompanyAddress ||
                    (this.CompanyAddress != null &&
                    this.CompanyAddress.Equals(input.CompanyAddress))
                ) && 
                (
                    this.CompanyAddressEn == input.CompanyAddressEn ||
                    (this.CompanyAddressEn != null &&
                    this.CompanyAddressEn.Equals(input.CompanyAddressEn))
                ) && 
                (
                    this.CompanyTaxId == input.CompanyTaxId ||
                    (this.CompanyTaxId != null &&
                    this.CompanyTaxId.Equals(input.CompanyTaxId))
                ) && 
                (
                    this.CompanyBranch == input.CompanyBranch ||
                    (this.CompanyBranch != null &&
                    this.CompanyBranch.Equals(input.CompanyBranch))
                ) && 
                (
                    this.CompanyBranchEn == input.CompanyBranchEn ||
                    (this.CompanyBranchEn != null &&
                    this.CompanyBranchEn.Equals(input.CompanyBranchEn))
                ) && 
                (
                    this.CompanyPhone == input.CompanyPhone ||
                    (this.CompanyPhone != null &&
                    this.CompanyPhone.Equals(input.CompanyPhone))
                ) && 
                (
                    this.CompanyMobile == input.CompanyMobile ||
                    (this.CompanyMobile != null &&
                    this.CompanyMobile.Equals(input.CompanyMobile))
                ) && 
                (
                    this.CompanyFax == input.CompanyFax ||
                    (this.CompanyFax != null &&
                    this.CompanyFax.Equals(input.CompanyFax))
                ) && 
                (
                    this.CompanyWebsite == input.CompanyWebsite ||
                    (this.CompanyWebsite != null &&
                    this.CompanyWebsite.Equals(input.CompanyWebsite))
                ) && 
                (
                    this.ContactCode == input.ContactCode ||
                    (this.ContactCode != null &&
                    this.ContactCode.Equals(input.ContactCode))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactAddress == input.ContactAddress ||
                    (this.ContactAddress != null &&
                    this.ContactAddress.Equals(input.ContactAddress))
                ) && 
                (
                    this.ContactTaxId == input.ContactTaxId ||
                    (this.ContactTaxId != null &&
                    this.ContactTaxId.Equals(input.ContactTaxId))
                ) && 
                (
                    this.ContactBranch == input.ContactBranch ||
                    (this.ContactBranch != null &&
                    this.ContactBranch.Equals(input.ContactBranch))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.ContactNumber == input.ContactNumber ||
                    (this.ContactNumber != null &&
                    this.ContactNumber.Equals(input.ContactNumber))
                ) && 
                (
                    this.ContactZipCode == input.ContactZipCode ||
                    (this.ContactZipCode != null &&
                    this.ContactZipCode.Equals(input.ContactZipCode))
                ) && 
                (
                    this.ContactGroup == input.ContactGroup ||
                    (this.ContactGroup != null &&
                    this.ContactGroup.Equals(input.ContactGroup))
                ) && 
                (
                    this.PublishedOn == input.PublishedOn ||
                    (this.PublishedOn != null &&
                    this.PublishedOn.Equals(input.PublishedOn))
                ) && 
                (
                    this.Entity == input.Entity ||
                    (this.Entity != null &&
                    this.Entity.Equals(input.Entity))
                ) && 
                (
                    this.TextOther == input.TextOther ||
                    (this.TextOther != null &&
                    this.TextOther.Equals(input.TextOther))
                ) && 
                (
                    this.WithholdingTaxItems == input.WithholdingTaxItems ||
                    this.WithholdingTaxItems != null &&
                    input.WithholdingTaxItems != null &&
                    this.WithholdingTaxItems.SequenceEqual(input.WithholdingTaxItems)
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.TotalTaxWithheld == input.TotalTaxWithheld ||
                    (this.TotalTaxWithheld != null &&
                    this.TotalTaxWithheld.Equals(input.TotalTaxWithheld))
                ) && 
                (
                    this.TaxPayment == input.TaxPayment ||
                    (this.TaxPayment != null &&
                    this.TaxPayment.Equals(input.TaxPayment))
                ) && 
                (
                    this.TaxPaymentOthers == input.TaxPaymentOthers ||
                    (this.TaxPaymentOthers != null &&
                    this.TaxPaymentOthers.Equals(input.TaxPaymentOthers))
                ) && 
                (
                    this.ProvidentFundNumber == input.ProvidentFundNumber ||
                    (this.ProvidentFundNumber != null &&
                    this.ProvidentFundNumber.Equals(input.ProvidentFundNumber))
                ) && 
                (
                    this.ProvidentFundAmount == input.ProvidentFundAmount ||
                    (this.ProvidentFundAmount != null &&
                    this.ProvidentFundAmount.Equals(input.ProvidentFundAmount))
                ) && 
                (
                    this.SocialSecurityAmount == input.SocialSecurityAmount ||
                    (this.SocialSecurityAmount != null &&
                    this.SocialSecurityAmount.Equals(input.SocialSecurityAmount))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.InternalNotes == input.InternalNotes ||
                    (this.InternalNotes != null &&
                    this.InternalNotes.Equals(input.InternalNotes))
                ) && 
                (
                    this.ShowSignatureOrStamp == input.ShowSignatureOrStamp ||
                    (this.ShowSignatureOrStamp != null &&
                    this.ShowSignatureOrStamp.Equals(input.ShowSignatureOrStamp))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyNameEn != null)
                    hashCode = hashCode * 59 + this.CompanyNameEn.GetHashCode();
                if (this.CompanyAddress != null)
                    hashCode = hashCode * 59 + this.CompanyAddress.GetHashCode();
                if (this.CompanyAddressEn != null)
                    hashCode = hashCode * 59 + this.CompanyAddressEn.GetHashCode();
                if (this.CompanyTaxId != null)
                    hashCode = hashCode * 59 + this.CompanyTaxId.GetHashCode();
                if (this.CompanyBranch != null)
                    hashCode = hashCode * 59 + this.CompanyBranch.GetHashCode();
                if (this.CompanyBranchEn != null)
                    hashCode = hashCode * 59 + this.CompanyBranchEn.GetHashCode();
                if (this.CompanyPhone != null)
                    hashCode = hashCode * 59 + this.CompanyPhone.GetHashCode();
                if (this.CompanyMobile != null)
                    hashCode = hashCode * 59 + this.CompanyMobile.GetHashCode();
                if (this.CompanyFax != null)
                    hashCode = hashCode * 59 + this.CompanyFax.GetHashCode();
                if (this.CompanyWebsite != null)
                    hashCode = hashCode * 59 + this.CompanyWebsite.GetHashCode();
                if (this.ContactCode != null)
                    hashCode = hashCode * 59 + this.ContactCode.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.ContactAddress != null)
                    hashCode = hashCode * 59 + this.ContactAddress.GetHashCode();
                if (this.ContactTaxId != null)
                    hashCode = hashCode * 59 + this.ContactTaxId.GetHashCode();
                if (this.ContactBranch != null)
                    hashCode = hashCode * 59 + this.ContactBranch.GetHashCode();
                if (this.ContactPerson != null)
                    hashCode = hashCode * 59 + this.ContactPerson.GetHashCode();
                if (this.ContactEmail != null)
                    hashCode = hashCode * 59 + this.ContactEmail.GetHashCode();
                if (this.ContactNumber != null)
                    hashCode = hashCode * 59 + this.ContactNumber.GetHashCode();
                if (this.ContactZipCode != null)
                    hashCode = hashCode * 59 + this.ContactZipCode.GetHashCode();
                if (this.ContactGroup != null)
                    hashCode = hashCode * 59 + this.ContactGroup.GetHashCode();
                if (this.PublishedOn != null)
                    hashCode = hashCode * 59 + this.PublishedOn.GetHashCode();
                if (this.Entity != null)
                    hashCode = hashCode * 59 + this.Entity.GetHashCode();
                if (this.TextOther != null)
                    hashCode = hashCode * 59 + this.TextOther.GetHashCode();
                if (this.WithholdingTaxItems != null)
                    hashCode = hashCode * 59 + this.WithholdingTaxItems.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.TotalTaxWithheld != null)
                    hashCode = hashCode * 59 + this.TotalTaxWithheld.GetHashCode();
                if (this.TaxPayment != null)
                    hashCode = hashCode * 59 + this.TaxPayment.GetHashCode();
                if (this.TaxPaymentOthers != null)
                    hashCode = hashCode * 59 + this.TaxPaymentOthers.GetHashCode();
                if (this.ProvidentFundNumber != null)
                    hashCode = hashCode * 59 + this.ProvidentFundNumber.GetHashCode();
                if (this.ProvidentFundAmount != null)
                    hashCode = hashCode * 59 + this.ProvidentFundAmount.GetHashCode();
                if (this.SocialSecurityAmount != null)
                    hashCode = hashCode * 59 + this.SocialSecurityAmount.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                if (this.InternalNotes != null)
                    hashCode = hashCode * 59 + this.InternalNotes.GetHashCode();
                if (this.ShowSignatureOrStamp != null)
                    hashCode = hashCode * 59 + this.ShowSignatureOrStamp.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
