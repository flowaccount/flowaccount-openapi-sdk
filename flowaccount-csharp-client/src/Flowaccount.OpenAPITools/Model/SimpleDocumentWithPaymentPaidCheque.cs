/* 
 * FlowAccount Open API
 *
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// SimpleDocumentWithPaymentPaidCheque
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "documentPaymentStructureType")]
    public partial class SimpleDocumentWithPaymentPaidCheque :  IEquatable<SimpleDocumentWithPaymentPaidCheque>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleDocumentWithPaymentPaidCheque" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SimpleDocumentWithPaymentPaidCheque() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SimpleDocumentWithPaymentPaidCheque" /> class.
        /// </summary>
        /// <param name="contactCode">รหัส ลูกค้า/ผู้จำหน่าย.</param>
        /// <param name="contactName">ชื่อ ลูกค้า/ผู้จำหน่าย &lt;br&gt; &lt;ex&gt;Example: บริษัท ลูกค้า จำกัด, คุณลูกค้า ซื้อประจำ&lt;/ex&gt; (required).</param>
        /// <param name="contactAddress">ที่อยู่ ลูกค้า/ผู้จำหน่าย.</param>
        /// <param name="contactTaxId">เลขประจำตัวผู้เสียภาษี ลูกค้า หรือ ผู้จำหน่าย/ลูกค้า &lt;br&gt; (ถ้ามีจำเป็นต้องครบ 13 หลัก) &lt;br&gt; &lt;ex&gt;Example: 1234567890123 &lt;/ex&gt;.</param>
        /// <param name="contactBranch">สำนักงาน/สาขา.</param>
        /// <param name="contactPerson">ชื่อผู้ติดต่อ.</param>
        /// <param name="contactEmail">อีเมลผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: contact@email.com&lt;/ex&gt;.</param>
        /// <param name="contactNumber">เบอร์มือถือผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;.</param>
        /// <param name="contactZipCode">รหัสไปรษณีย์ติดต่อ.</param>
        /// <param name="contactGroup">ประผู้ติดต่อ &lt;br&gt; 1 &#x3D; บุคคลธรรมดา &lt;br&gt; 3 &#x3D; นิติบุคคล (default to 1).</param>
        /// <param name="publishedOn">วันที่เอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt; (required).</param>
        /// <param name="creditType">รูปแบบเครดิต &lt;br&gt; 1 &#x3D; เครดิต (วัน) &lt;br&gt; 3 &#x3D; เงินสด  &lt;br&gt; 5 &#x3D; เครดิต (ไม่แสดงวันที่ครบกำหนด) (default to 1).</param>
        /// <param name="creditDays">จำนวนวันที่ให้เครดิต &lt;br&gt; &lt;ex&gt;Example: 30&lt;/ex&gt; (default to 0).</param>
        /// <param name="dueDate">วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt; (required).</param>
        /// <param name="salesName">ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย &lt;br&gt; &lt;ex&gt;Example: sale@email.com or Mr.Sale Shop&lt;/ex&gt; (default to &quot;อีเมล หรือ ชื่อผู้สร้างเอกสาร&quot;).</param>
        /// <param name="projectName">ชื่อโปรเจค.</param>
        /// <param name="reference">เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง &lt;br&gt; &lt;ex&gt;Example: INV2020010001&lt;/ex&gt;.</param>
        /// <param name="isVatInclusive">มูลค่าเอกสารรวมภาษีแล้วหรือไม่ (default to false).</param>
        /// <param name="useReceiptDeduction">เปิดใช้งานฟังก์ชั่น ปรับลดท้ายเอกสาร &lt;br&gt; (เฉพาะเอกสารใบกำกับภาษี / ใบเสร็จรับเงิน และ ใบเสร็จรับเงิน) (default to false).</param>
        /// <param name="subTotal">มูลค่ารวมเป็นเงิน (default to 0M).</param>
        /// <param name="discountPercentage">มูลค่าส่วนลดเป็นเปอร์เซ็นต์ (default to 0).</param>
        /// <param name="discountAmount">มูลค่าส่วนลดเป็นจำนวน (บาท) (default to 0M).</param>
        /// <param name="totalAfterDiscount">มูลค่าหลังหักส่วนลด (required).</param>
        /// <param name="isVat">มูลค่าหลังหักส่วนลด มีภาษีมูลค่าเพิ่ม 7% (default to false).</param>
        /// <param name="vatAmount">ภาษีมูลค่าเพิ่ม.</param>
        /// <param name="grandTotal">จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว) (required).</param>
        /// <param name="documentShowWithholdingTax">แสดงหรือไม่แสดง หัก ณ ที่จ่ายท้ายเอกสาร (default to false).</param>
        /// <param name="documentWithholdingTaxPercentage">ภาษี ณ ที่จ่าย (%) (default to 0).</param>
        /// <param name="documentWithholdingTaxAmount">มูลค่าภาษีหัก ณ ที่จ่าย (default to 0M).</param>
        /// <param name="documentDeductionType">ประเภทรายการปรับลด &lt;br&gt; 1 &#x3D; ส่วนลดพิเศษ &lt;br&gt; 3 &#x3D; ค่านายหน้าและส่วนแบ่งการขาย &lt;br&gt; 5 &#x3D; ค่าดำเนินการ &lt;br&gt; 7 &#x3D; ปัดเศษ &lt;br&gt; (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน) (default to 0).</param>
        /// <param name="documentDeductionAmount">จำนวนเงินยอดรายการปรับลด &lt;br&gt; (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน) (default to 0M).</param>
        /// <param name="remarks">หมายเหตุเอกสาร.</param>
        /// <param name="internalNotes">โน๊ตภายในบริษัท.</param>
        /// <param name="showSignatureOrStamp">ลายเซ็นอิเล็กทรอนิกส์และตรายาง (default to true).</param>
        /// <param name="items">รายการสินค้าใช้งานสำหรับเอกสาร Simple.</param>
        /// <param name="documentReference">สำหรับอัพเกรดเอกสาร โดยอ้างอิงเอกสารต้นทาง (ยกเว้นเอกสารใบเสนอราคา).</param>
        /// <param name="documentPaymentStructureType">สร้างเอกสารแบบ Simple พร้อมชำระเงิน ด้วยเช็ค (required).</param>
        /// <param name="paymentMethod">ประเภทการชำระเงิน &lt;br&gt; 3 &#x3D; เช็ค (required) (default to 1).</param>
        /// <param name="paymentDate">วันที่รับชำระเงิน / วันที่ชำระเงิน รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt; (required).</param>
        /// <param name="collected">จำนวนเงินยอดจ่ายสุทธิ &lt;br&gt; &lt;ex&gt; Example : 100.00 &lt;/ex&gt; (required) (default to 0M).</param>
        /// <param name="withheldPercentage">เปอร์เซ็น หัก ณ ที่จ่าย &lt;br&gt; 0.5 &#x3D; 0.5% &lt;br&gt; 0.75 &#x3D; 0.75% &lt;br&gt; 1 &#x3D; 1% &lt;br&gt; 1.5 &#x3D; 1.5% &lt;br&gt; 2 &#x3D; 2% &lt;br&gt; 3 &#x3D; 3% &lt;br&gt; 5 &#x3D; 5% &lt;br&gt; 10 &#x3D; 10% &lt;br&gt; 15 &#x3D; 15% &lt;br&gt; -1 &#x3D; จำนวนเงิน &lt;red&gt;(สำหรับเอกสารที่ใช้ภาษีแยกตามรายการสินค้า ต้องใช้เป็นจำนวนเงิน)&lt;/red&gt; (default to 0).</param>
        /// <param name="withheldAmount">จำนวน ยอดหัก ณ ที่จ่าย &lt;br&gt; &lt;ex&gt; Example : 100.00 &lt;/ex&gt; (default to 0M).</param>
        /// <param name="chequeDate">วันที่หน้าเช็ค รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;.</param>
        /// <param name="chequeNumber">เลขที่เช็คธนาคาร &lt;br&gt; &lt;ex&gt;Example: 122-122-122&lt;/ex&gt;.</param>
        /// <param name="chequeBankAccountId">ธนาคารที่ระบุหน้าเช็ค &lt;br&gt; 1 &#x3D; ธนาคารกรุงเทพ &lt;br&gt; 2 &#x3D; ธนาคารกสิกรไทย &lt;br&gt; 3 &#x3D; ธนาคารกรุงไทย &lt;br&gt; 4 &#x3D; ธนาคารทหารไทย &lt;br&gt; 5 &#x3D; ธนาคารไทยพาณิชย์ &lt;br&gt; 6 &#x3D; ธนาคารสแตนดาร์ดชาร์เตอร์ด &lt;br&gt; 7 &#x3D; ธนาคารซีไอเอ็มบี ไทย &lt;br&gt; 8 &#x3D; ธนาคารยูโอบี &lt;br&gt; 10 &#x3D; ธนาคารกรุงศรีอยุธยา &lt;br&gt; 11 &#x3D; ธนาคารออมสิน &lt;br&gt; 12 &#x3D; ธนาคารธนชาต &lt;br&gt; 13 &#x3D; ธนาคารแลนด์ แอนด์ เฮ้าส์ &lt;br&gt; 14 &#x3D; ธนาคารเกียรตินาคิน &lt;br&gt; 15 &#x3D; ธนาคารซิตี้แบงก์ &lt;br&gt; 16 &#x3D; ธนาคารทิสโก้ &lt;br&gt; 53 &#x3D; ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร &lt;br&gt; 54 &#x3D; ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย &lt;br&gt; 55 &#x3D; ธนาคารอาคารสงเคราะห์ &lt;br&gt; 56 &#x3D; ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย &lt;br&gt; 57 &#x3D; ธนาคารอิสลามแห่งประเทศไทย &lt;br&gt; 58 &#x3D; ธนาคารแห่งประเทศจีน (ไทย) &lt;br&gt; 59 &#x3D; ธนาคารไอซีบีซี (ไทย) &lt;br&gt; 60 &#x3D; ธนาคารเมกะ สากลพาณิชย์ &lt;br&gt; 61 &#x3D; ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น &lt;br&gt; 62 &#x3D; ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) &lt;br&gt; 63 &#x3D; ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น &lt;br&gt; 64 &#x3D; ธนาคารไทยเครดิต เพื่อรายย่อย  (default to 0).</param>
        /// <param name="bankAccountId">เลข id บัญชีธนาคารที่ใช้ชำระเงิน &lt;br&gt;&lt;red&gt;สามารถ GET มาได้จาก My Company &gt; Bank Account &lt;/red&gt;&lt;br&gt; &lt;ex&gt;Example: 12345&lt;/ex&gt; (default to 0).</param>
        /// <param name="paymentCharge">ค่าธรรมเนียม ที่ชำระโดยเช็ค &lt;br&gt; &lt;ex&gt; Example : 100.00 &lt;/ex&gt; (default to 0M).</param>
        /// <param name="paymentRemarks">หมายเหตุ การรับชำระเงิน หรือ ชำระเงิน.</param>
        /// <param name="remainingCollectedType">สาเหตุเงินขาด เงินเกิน &lt;br&gt; 51 &#x3D; เงินขาดหรือเงินกิน &lt;br&gt; 55 &#x3D; ค่าธรรมเนียมธนาคาร  (default to 0).</param>
        /// <param name="remainingCollected">จำนวน ยอดเงินขาด หรือ เงินเกิน &lt;br&gt; &lt;ex&gt; Example : 100.00 &lt;/ex&gt; (default to 0M).</param>
        public SimpleDocumentWithPaymentPaidCheque(string contactCode = default(string), string contactName = default(string), string contactAddress = default(string), string contactTaxId = default(string), string contactBranch = default(string), string contactPerson = default(string), string contactEmail = default(string), string contactNumber = default(string), string contactZipCode = default(string), int contactGroup = 1, DateTime publishedOn = default(DateTime), int creditType = 1, int creditDays = 0, DateTime dueDate = default(DateTime), string salesName = "อีเมล หรือ ชื่อผู้สร้างเอกสาร", string projectName = default(string), string reference = default(string), bool isVatInclusive = false, bool useReceiptDeduction = false, decimal subTotal = 0M, int discountPercentage = 0, decimal discountAmount = 0M, decimal totalAfterDiscount = default(decimal), bool isVat = false, decimal vatAmount = default(decimal), decimal grandTotal = default(decimal), bool documentShowWithholdingTax = false, int documentWithholdingTaxPercentage = 0, decimal documentWithholdingTaxAmount = 0M, int documentDeductionType = 0, decimal documentDeductionAmount = 0M, string remarks = default(string), string internalNotes = default(string), bool showSignatureOrStamp = true, List<SimpleProductItem> items = default(List<SimpleProductItem>), List<UpgradeDocument> documentReference = default(List<UpgradeDocument>), string documentPaymentStructureType = default(string), long paymentMethod = 1, DateTime paymentDate = default(DateTime), decimal collected = 0M, long withheldPercentage = 0, decimal withheldAmount = 0M, DateTime chequeDate = default(DateTime), string chequeNumber = default(string), long chequeBankAccountId = 0, long bankAccountId = 0, decimal paymentCharge = 0M, string paymentRemarks = default(string), long remainingCollectedType = 0, decimal remainingCollected = 0M)
        {
            // to ensure "contactName" is required (not null)
            if (contactName == null)
            {
                throw new InvalidDataException("contactName is a required property for SimpleDocumentWithPaymentPaidCheque and cannot be null");
            }
            else
            {
                this.ContactName = contactName;
            }
            
            // to ensure "publishedOn" is required (not null)
            if (publishedOn == null)
            {
                throw new InvalidDataException("publishedOn is a required property for SimpleDocumentWithPaymentPaidCheque and cannot be null");
            }
            else
            {
                this.PublishedOn = publishedOn;
            }
            
            // to ensure "dueDate" is required (not null)
            if (dueDate == null)
            {
                throw new InvalidDataException("dueDate is a required property for SimpleDocumentWithPaymentPaidCheque and cannot be null");
            }
            else
            {
                this.DueDate = dueDate;
            }
            
            // to ensure "totalAfterDiscount" is required (not null)
            if (totalAfterDiscount == null)
            {
                throw new InvalidDataException("totalAfterDiscount is a required property for SimpleDocumentWithPaymentPaidCheque and cannot be null");
            }
            else
            {
                this.TotalAfterDiscount = totalAfterDiscount;
            }
            
            // to ensure "grandTotal" is required (not null)
            if (grandTotal == null)
            {
                throw new InvalidDataException("grandTotal is a required property for SimpleDocumentWithPaymentPaidCheque and cannot be null");
            }
            else
            {
                this.GrandTotal = grandTotal;
            }
            
            // to ensure "documentPaymentStructureType" is required (not null)
            if (documentPaymentStructureType == null)
            {
                throw new InvalidDataException("documentPaymentStructureType is a required property for SimpleDocumentWithPaymentPaidCheque and cannot be null");
            }
            else
            {
                this.DocumentPaymentStructureType = documentPaymentStructureType;
            }
            
            this.DocumentPaymentStructureType = documentPaymentStructureType;
            // to ensure "paymentMethod" is required (not null)
            if (paymentMethod == null)
            {
                throw new InvalidDataException("paymentMethod is a required property for SimpleDocumentWithPaymentPaidCheque and cannot be null");
            }
            else
            {
                this.PaymentMethod = paymentMethod;
            }
            
            // to ensure "paymentDate" is required (not null)
            if (paymentDate == null)
            {
                throw new InvalidDataException("paymentDate is a required property for SimpleDocumentWithPaymentPaidCheque and cannot be null");
            }
            else
            {
                this.PaymentDate = paymentDate;
            }
            
            // to ensure "collected" is required (not null)
            if (collected == null)
            {
                throw new InvalidDataException("collected is a required property for SimpleDocumentWithPaymentPaidCheque and cannot be null");
            }
            else
            {
                this.Collected = collected;
            }
            
            this.ContactCode = contactCode;
            this.ContactAddress = contactAddress;
            this.ContactTaxId = contactTaxId;
            this.ContactBranch = contactBranch;
            this.ContactPerson = contactPerson;
            this.ContactEmail = contactEmail;
            this.ContactNumber = contactNumber;
            this.ContactZipCode = contactZipCode;
            // use default value if no "contactGroup" provided
            if (contactGroup == null)
            {
                this.ContactGroup = 1;
            }
            else
            {
                this.ContactGroup = contactGroup;
            }
            // use default value if no "creditType" provided
            if (creditType == null)
            {
                this.CreditType = 1;
            }
            else
            {
                this.CreditType = creditType;
            }
            // use default value if no "creditDays" provided
            if (creditDays == null)
            {
                this.CreditDays = 0;
            }
            else
            {
                this.CreditDays = creditDays;
            }
            // use default value if no "salesName" provided
            if (salesName == null)
            {
                this.SalesName = "อีเมล หรือ ชื่อผู้สร้างเอกสาร";
            }
            else
            {
                this.SalesName = salesName;
            }
            this.ProjectName = projectName;
            this.Reference = reference;
            // use default value if no "isVatInclusive" provided
            if (isVatInclusive == null)
            {
                this.IsVatInclusive = false;
            }
            else
            {
                this.IsVatInclusive = isVatInclusive;
            }
            // use default value if no "useReceiptDeduction" provided
            if (useReceiptDeduction == null)
            {
                this.UseReceiptDeduction = false;
            }
            else
            {
                this.UseReceiptDeduction = useReceiptDeduction;
            }
            // use default value if no "subTotal" provided
            if (subTotal == null)
            {
                this.SubTotal = 0M;
            }
            else
            {
                this.SubTotal = subTotal;
            }
            // use default value if no "discountPercentage" provided
            if (discountPercentage == null)
            {
                this.DiscountPercentage = 0;
            }
            else
            {
                this.DiscountPercentage = discountPercentage;
            }
            // use default value if no "discountAmount" provided
            if (discountAmount == null)
            {
                this.DiscountAmount = 0M;
            }
            else
            {
                this.DiscountAmount = discountAmount;
            }
            // use default value if no "isVat" provided
            if (isVat == null)
            {
                this.IsVat = false;
            }
            else
            {
                this.IsVat = isVat;
            }
            this.VatAmount = vatAmount;
            // use default value if no "documentShowWithholdingTax" provided
            if (documentShowWithholdingTax == null)
            {
                this.DocumentShowWithholdingTax = false;
            }
            else
            {
                this.DocumentShowWithholdingTax = documentShowWithholdingTax;
            }
            // use default value if no "documentWithholdingTaxPercentage" provided
            if (documentWithholdingTaxPercentage == null)
            {
                this.DocumentWithholdingTaxPercentage = 0;
            }
            else
            {
                this.DocumentWithholdingTaxPercentage = documentWithholdingTaxPercentage;
            }
            // use default value if no "documentWithholdingTaxAmount" provided
            if (documentWithholdingTaxAmount == null)
            {
                this.DocumentWithholdingTaxAmount = 0M;
            }
            else
            {
                this.DocumentWithholdingTaxAmount = documentWithholdingTaxAmount;
            }
            // use default value if no "documentDeductionType" provided
            if (documentDeductionType == null)
            {
                this.DocumentDeductionType = 0;
            }
            else
            {
                this.DocumentDeductionType = documentDeductionType;
            }
            // use default value if no "documentDeductionAmount" provided
            if (documentDeductionAmount == null)
            {
                this.DocumentDeductionAmount = 0M;
            }
            else
            {
                this.DocumentDeductionAmount = documentDeductionAmount;
            }
            this.Remarks = remarks;
            this.InternalNotes = internalNotes;
            // use default value if no "showSignatureOrStamp" provided
            if (showSignatureOrStamp == null)
            {
                this.ShowSignatureOrStamp = true;
            }
            else
            {
                this.ShowSignatureOrStamp = showSignatureOrStamp;
            }
            this.Items = items;
            this.DocumentReference = documentReference;
            // use default value if no "withheldPercentage" provided
            if (withheldPercentage == null)
            {
                this.WithheldPercentage = 0;
            }
            else
            {
                this.WithheldPercentage = withheldPercentage;
            }
            // use default value if no "withheldAmount" provided
            if (withheldAmount == null)
            {
                this.WithheldAmount = 0M;
            }
            else
            {
                this.WithheldAmount = withheldAmount;
            }
            this.ChequeDate = chequeDate;
            this.ChequeNumber = chequeNumber;
            // use default value if no "chequeBankAccountId" provided
            if (chequeBankAccountId == null)
            {
                this.ChequeBankAccountId = 0;
            }
            else
            {
                this.ChequeBankAccountId = chequeBankAccountId;
            }
            // use default value if no "bankAccountId" provided
            if (bankAccountId == null)
            {
                this.BankAccountId = 0;
            }
            else
            {
                this.BankAccountId = bankAccountId;
            }
            // use default value if no "paymentCharge" provided
            if (paymentCharge == null)
            {
                this.PaymentCharge = 0M;
            }
            else
            {
                this.PaymentCharge = paymentCharge;
            }
            this.PaymentRemarks = paymentRemarks;
            // use default value if no "remainingCollectedType" provided
            if (remainingCollectedType == null)
            {
                this.RemainingCollectedType = 0;
            }
            else
            {
                this.RemainingCollectedType = remainingCollectedType;
            }
            // use default value if no "remainingCollected" provided
            if (remainingCollected == null)
            {
                this.RemainingCollected = 0M;
            }
            else
            {
                this.RemainingCollected = remainingCollected;
            }
        }
        
        /// <summary>
        /// รหัส ลูกค้า/ผู้จำหน่าย
        /// </summary>
        /// <value>รหัส ลูกค้า/ผู้จำหน่าย</value>
        [DataMember(Name="contactCode", EmitDefaultValue=true)]
        public string ContactCode { get; set; }

        /// <summary>
        /// ชื่อ ลูกค้า/ผู้จำหน่าย &lt;br&gt; &lt;ex&gt;Example: บริษัท ลูกค้า จำกัด, คุณลูกค้า ซื้อประจำ&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อ ลูกค้า/ผู้จำหน่าย &lt;br&gt; &lt;ex&gt;Example: บริษัท ลูกค้า จำกัด, คุณลูกค้า ซื้อประจำ&lt;/ex&gt;</value>
        [DataMember(Name="contactName", EmitDefaultValue=true)]
        public string ContactName { get; set; }

        /// <summary>
        /// ที่อยู่ ลูกค้า/ผู้จำหน่าย
        /// </summary>
        /// <value>ที่อยู่ ลูกค้า/ผู้จำหน่าย</value>
        [DataMember(Name="contactAddress", EmitDefaultValue=true)]
        public string ContactAddress { get; set; }

        /// <summary>
        /// เลขประจำตัวผู้เสียภาษี ลูกค้า หรือ ผู้จำหน่าย/ลูกค้า &lt;br&gt; (ถ้ามีจำเป็นต้องครบ 13 หลัก) &lt;br&gt; &lt;ex&gt;Example: 1234567890123 &lt;/ex&gt;
        /// </summary>
        /// <value>เลขประจำตัวผู้เสียภาษี ลูกค้า หรือ ผู้จำหน่าย/ลูกค้า &lt;br&gt; (ถ้ามีจำเป็นต้องครบ 13 หลัก) &lt;br&gt; &lt;ex&gt;Example: 1234567890123 &lt;/ex&gt;</value>
        [DataMember(Name="contactTaxId", EmitDefaultValue=true)]
        public string ContactTaxId { get; set; }

        /// <summary>
        /// สำนักงาน/สาขา
        /// </summary>
        /// <value>สำนักงาน/สาขา</value>
        [DataMember(Name="contactBranch", EmitDefaultValue=true)]
        public string ContactBranch { get; set; }

        /// <summary>
        /// ชื่อผู้ติดต่อ
        /// </summary>
        /// <value>ชื่อผู้ติดต่อ</value>
        [DataMember(Name="contactPerson", EmitDefaultValue=true)]
        public string ContactPerson { get; set; }

        /// <summary>
        /// อีเมลผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: contact@email.com&lt;/ex&gt;
        /// </summary>
        /// <value>อีเมลผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: contact@email.com&lt;/ex&gt;</value>
        [DataMember(Name="contactEmail", EmitDefaultValue=true)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// เบอร์มือถือผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;
        /// </summary>
        /// <value>เบอร์มือถือผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;</value>
        [DataMember(Name="contactNumber", EmitDefaultValue=true)]
        public string ContactNumber { get; set; }

        /// <summary>
        /// รหัสไปรษณีย์ติดต่อ
        /// </summary>
        /// <value>รหัสไปรษณีย์ติดต่อ</value>
        [DataMember(Name="contactZipCode", EmitDefaultValue=true)]
        public string ContactZipCode { get; set; }

        /// <summary>
        /// ประผู้ติดต่อ &lt;br&gt; 1 &#x3D; บุคคลธรรมดา &lt;br&gt; 3 &#x3D; นิติบุคคล
        /// </summary>
        /// <value>ประผู้ติดต่อ &lt;br&gt; 1 &#x3D; บุคคลธรรมดา &lt;br&gt; 3 &#x3D; นิติบุคคล</value>
        [DataMember(Name="contactGroup", EmitDefaultValue=true)]
        public int ContactGroup { get; set; }

        /// <summary>
        /// วันที่เอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;
        /// </summary>
        /// <value>วันที่เอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;</value>
        [DataMember(Name="publishedOn", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime PublishedOn { get; set; }

        /// <summary>
        /// รูปแบบเครดิต &lt;br&gt; 1 &#x3D; เครดิต (วัน) &lt;br&gt; 3 &#x3D; เงินสด  &lt;br&gt; 5 &#x3D; เครดิต (ไม่แสดงวันที่ครบกำหนด)
        /// </summary>
        /// <value>รูปแบบเครดิต &lt;br&gt; 1 &#x3D; เครดิต (วัน) &lt;br&gt; 3 &#x3D; เงินสด  &lt;br&gt; 5 &#x3D; เครดิต (ไม่แสดงวันที่ครบกำหนด)</value>
        [DataMember(Name="creditType", EmitDefaultValue=true)]
        public int CreditType { get; set; }

        /// <summary>
        /// จำนวนวันที่ให้เครดิต &lt;br&gt; &lt;ex&gt;Example: 30&lt;/ex&gt;
        /// </summary>
        /// <value>จำนวนวันที่ให้เครดิต &lt;br&gt; &lt;ex&gt;Example: 30&lt;/ex&gt;</value>
        [DataMember(Name="creditDays", EmitDefaultValue=true)]
        public int CreditDays { get; set; }

        /// <summary>
        /// วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;
        /// </summary>
        /// <value>วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;</value>
        [DataMember(Name="dueDate", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย &lt;br&gt; &lt;ex&gt;Example: sale@email.com or Mr.Sale Shop&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย &lt;br&gt; &lt;ex&gt;Example: sale@email.com or Mr.Sale Shop&lt;/ex&gt;</value>
        [DataMember(Name="salesName", EmitDefaultValue=true)]
        public string SalesName { get; set; }

        /// <summary>
        /// ชื่อโปรเจค
        /// </summary>
        /// <value>ชื่อโปรเจค</value>
        [DataMember(Name="projectName", EmitDefaultValue=true)]
        public string ProjectName { get; set; }

        /// <summary>
        /// เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง &lt;br&gt; &lt;ex&gt;Example: INV2020010001&lt;/ex&gt;
        /// </summary>
        /// <value>เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง &lt;br&gt; &lt;ex&gt;Example: INV2020010001&lt;/ex&gt;</value>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public string Reference { get; set; }

        /// <summary>
        /// มูลค่าเอกสารรวมภาษีแล้วหรือไม่
        /// </summary>
        /// <value>มูลค่าเอกสารรวมภาษีแล้วหรือไม่</value>
        [DataMember(Name="isVatInclusive", EmitDefaultValue=true)]
        public bool IsVatInclusive { get; set; }

        /// <summary>
        /// เปิดใช้งานฟังก์ชั่น ปรับลดท้ายเอกสาร &lt;br&gt; (เฉพาะเอกสารใบกำกับภาษี / ใบเสร็จรับเงิน และ ใบเสร็จรับเงิน)
        /// </summary>
        /// <value>เปิดใช้งานฟังก์ชั่น ปรับลดท้ายเอกสาร &lt;br&gt; (เฉพาะเอกสารใบกำกับภาษี / ใบเสร็จรับเงิน และ ใบเสร็จรับเงิน)</value>
        [DataMember(Name="useReceiptDeduction", EmitDefaultValue=true)]
        public bool UseReceiptDeduction { get; set; }

        /// <summary>
        /// มูลค่ารวมเป็นเงิน
        /// </summary>
        /// <value>มูลค่ารวมเป็นเงิน</value>
        [DataMember(Name="subTotal", EmitDefaultValue=true)]
        public decimal SubTotal { get; set; }

        /// <summary>
        /// มูลค่าส่วนลดเป็นเปอร์เซ็นต์
        /// </summary>
        /// <value>มูลค่าส่วนลดเป็นเปอร์เซ็นต์</value>
        [DataMember(Name="discountPercentage", EmitDefaultValue=true)]
        public int DiscountPercentage { get; set; }

        /// <summary>
        /// มูลค่าส่วนลดเป็นจำนวน (บาท)
        /// </summary>
        /// <value>มูลค่าส่วนลดเป็นจำนวน (บาท)</value>
        [DataMember(Name="discountAmount", EmitDefaultValue=true)]
        public decimal DiscountAmount { get; set; }

        /// <summary>
        /// มูลค่าหลังหักส่วนลด
        /// </summary>
        /// <value>มูลค่าหลังหักส่วนลด</value>
        [DataMember(Name="totalAfterDiscount", EmitDefaultValue=true)]
        public decimal TotalAfterDiscount { get; set; }

        /// <summary>
        /// มูลค่าหลังหักส่วนลด มีภาษีมูลค่าเพิ่ม 7%
        /// </summary>
        /// <value>มูลค่าหลังหักส่วนลด มีภาษีมูลค่าเพิ่ม 7%</value>
        [DataMember(Name="isVat", EmitDefaultValue=true)]
        public bool IsVat { get; set; }

        /// <summary>
        /// ภาษีมูลค่าเพิ่ม
        /// </summary>
        /// <value>ภาษีมูลค่าเพิ่ม</value>
        [DataMember(Name="vatAmount", EmitDefaultValue=true)]
        public decimal VatAmount { get; set; }

        /// <summary>
        /// จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว)
        /// </summary>
        /// <value>จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว)</value>
        [DataMember(Name="grandTotal", EmitDefaultValue=true)]
        public decimal GrandTotal { get; set; }

        /// <summary>
        /// แสดงหรือไม่แสดง หัก ณ ที่จ่ายท้ายเอกสาร
        /// </summary>
        /// <value>แสดงหรือไม่แสดง หัก ณ ที่จ่ายท้ายเอกสาร</value>
        [DataMember(Name="documentShowWithholdingTax", EmitDefaultValue=true)]
        public bool DocumentShowWithholdingTax { get; set; }

        /// <summary>
        /// ภาษี ณ ที่จ่าย (%)
        /// </summary>
        /// <value>ภาษี ณ ที่จ่าย (%)</value>
        [DataMember(Name="documentWithholdingTaxPercentage", EmitDefaultValue=true)]
        public int DocumentWithholdingTaxPercentage { get; set; }

        /// <summary>
        /// มูลค่าภาษีหัก ณ ที่จ่าย
        /// </summary>
        /// <value>มูลค่าภาษีหัก ณ ที่จ่าย</value>
        [DataMember(Name="documentWithholdingTaxAmount", EmitDefaultValue=true)]
        public decimal DocumentWithholdingTaxAmount { get; set; }

        /// <summary>
        /// ประเภทรายการปรับลด &lt;br&gt; 1 &#x3D; ส่วนลดพิเศษ &lt;br&gt; 3 &#x3D; ค่านายหน้าและส่วนแบ่งการขาย &lt;br&gt; 5 &#x3D; ค่าดำเนินการ &lt;br&gt; 7 &#x3D; ปัดเศษ &lt;br&gt; (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)
        /// </summary>
        /// <value>ประเภทรายการปรับลด &lt;br&gt; 1 &#x3D; ส่วนลดพิเศษ &lt;br&gt; 3 &#x3D; ค่านายหน้าและส่วนแบ่งการขาย &lt;br&gt; 5 &#x3D; ค่าดำเนินการ &lt;br&gt; 7 &#x3D; ปัดเศษ &lt;br&gt; (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)</value>
        [DataMember(Name="documentDeductionType", EmitDefaultValue=true)]
        public int DocumentDeductionType { get; set; }

        /// <summary>
        /// จำนวนเงินยอดรายการปรับลด &lt;br&gt; (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)
        /// </summary>
        /// <value>จำนวนเงินยอดรายการปรับลด &lt;br&gt; (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)</value>
        [DataMember(Name="documentDeductionAmount", EmitDefaultValue=true)]
        public decimal DocumentDeductionAmount { get; set; }

        /// <summary>
        /// หมายเหตุเอกสาร
        /// </summary>
        /// <value>หมายเหตุเอกสาร</value>
        [DataMember(Name="remarks", EmitDefaultValue=true)]
        public string Remarks { get; set; }

        /// <summary>
        /// โน๊ตภายในบริษัท
        /// </summary>
        /// <value>โน๊ตภายในบริษัท</value>
        [DataMember(Name="internalNotes", EmitDefaultValue=true)]
        public string InternalNotes { get; set; }

        /// <summary>
        /// ลายเซ็นอิเล็กทรอนิกส์และตรายาง
        /// </summary>
        /// <value>ลายเซ็นอิเล็กทรอนิกส์และตรายาง</value>
        [DataMember(Name="showSignatureOrStamp", EmitDefaultValue=true)]
        public bool ShowSignatureOrStamp { get; set; }

        /// <summary>
        /// รายการสินค้าใช้งานสำหรับเอกสาร Simple
        /// </summary>
        /// <value>รายการสินค้าใช้งานสำหรับเอกสาร Simple</value>
        [DataMember(Name="items", EmitDefaultValue=true)]
        public List<SimpleProductItem> Items { get; set; }

        /// <summary>
        /// สำหรับอัพเกรดเอกสาร โดยอ้างอิงเอกสารต้นทาง (ยกเว้นเอกสารใบเสนอราคา)
        /// </summary>
        /// <value>สำหรับอัพเกรดเอกสาร โดยอ้างอิงเอกสารต้นทาง (ยกเว้นเอกสารใบเสนอราคา)</value>
        [DataMember(Name="documentReference", EmitDefaultValue=true)]
        public List<UpgradeDocument> DocumentReference { get; set; }

        /// <summary>
        /// สร้างเอกสารแบบ Simple พร้อมชำระเงิน ด้วยเช็ค
        /// </summary>
        /// <value>สร้างเอกสารแบบ Simple พร้อมชำระเงิน ด้วยเช็ค</value>
        [DataMember(Name="documentPaymentStructureType", EmitDefaultValue=true)]
        public string DocumentPaymentStructureType { get; set; }

        /// <summary>
        /// ประเภทการชำระเงิน &lt;br&gt; 3 &#x3D; เช็ค
        /// </summary>
        /// <value>ประเภทการชำระเงิน &lt;br&gt; 3 &#x3D; เช็ค</value>
        [DataMember(Name="paymentMethod", EmitDefaultValue=true)]
        public long PaymentMethod { get; set; }

        /// <summary>
        /// วันที่รับชำระเงิน / วันที่ชำระเงิน รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;
        /// </summary>
        /// <value>วันที่รับชำระเงิน / วันที่ชำระเงิน รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;</value>
        [DataMember(Name="paymentDate", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime PaymentDate { get; set; }

        /// <summary>
        /// จำนวนเงินยอดจ่ายสุทธิ &lt;br&gt; &lt;ex&gt; Example : 100.00 &lt;/ex&gt;
        /// </summary>
        /// <value>จำนวนเงินยอดจ่ายสุทธิ &lt;br&gt; &lt;ex&gt; Example : 100.00 &lt;/ex&gt;</value>
        [DataMember(Name="collected", EmitDefaultValue=true)]
        public decimal Collected { get; set; }

        /// <summary>
        /// เปอร์เซ็น หัก ณ ที่จ่าย &lt;br&gt; 0.5 &#x3D; 0.5% &lt;br&gt; 0.75 &#x3D; 0.75% &lt;br&gt; 1 &#x3D; 1% &lt;br&gt; 1.5 &#x3D; 1.5% &lt;br&gt; 2 &#x3D; 2% &lt;br&gt; 3 &#x3D; 3% &lt;br&gt; 5 &#x3D; 5% &lt;br&gt; 10 &#x3D; 10% &lt;br&gt; 15 &#x3D; 15% &lt;br&gt; -1 &#x3D; จำนวนเงิน &lt;red&gt;(สำหรับเอกสารที่ใช้ภาษีแยกตามรายการสินค้า ต้องใช้เป็นจำนวนเงิน)&lt;/red&gt;
        /// </summary>
        /// <value>เปอร์เซ็น หัก ณ ที่จ่าย &lt;br&gt; 0.5 &#x3D; 0.5% &lt;br&gt; 0.75 &#x3D; 0.75% &lt;br&gt; 1 &#x3D; 1% &lt;br&gt; 1.5 &#x3D; 1.5% &lt;br&gt; 2 &#x3D; 2% &lt;br&gt; 3 &#x3D; 3% &lt;br&gt; 5 &#x3D; 5% &lt;br&gt; 10 &#x3D; 10% &lt;br&gt; 15 &#x3D; 15% &lt;br&gt; -1 &#x3D; จำนวนเงิน &lt;red&gt;(สำหรับเอกสารที่ใช้ภาษีแยกตามรายการสินค้า ต้องใช้เป็นจำนวนเงิน)&lt;/red&gt;</value>
        [DataMember(Name="withheldPercentage", EmitDefaultValue=true)]
        public long WithheldPercentage { get; set; }

        /// <summary>
        /// จำนวน ยอดหัก ณ ที่จ่าย &lt;br&gt; &lt;ex&gt; Example : 100.00 &lt;/ex&gt;
        /// </summary>
        /// <value>จำนวน ยอดหัก ณ ที่จ่าย &lt;br&gt; &lt;ex&gt; Example : 100.00 &lt;/ex&gt;</value>
        [DataMember(Name="withheldAmount", EmitDefaultValue=true)]
        public decimal WithheldAmount { get; set; }

        /// <summary>
        /// วันที่หน้าเช็ค รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;
        /// </summary>
        /// <value>วันที่หน้าเช็ค รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;</value>
        [DataMember(Name="chequeDate", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ChequeDate { get; set; }

        /// <summary>
        /// เลขที่เช็คธนาคาร &lt;br&gt; &lt;ex&gt;Example: 122-122-122&lt;/ex&gt;
        /// </summary>
        /// <value>เลขที่เช็คธนาคาร &lt;br&gt; &lt;ex&gt;Example: 122-122-122&lt;/ex&gt;</value>
        [DataMember(Name="chequeNumber", EmitDefaultValue=true)]
        public string ChequeNumber { get; set; }

        /// <summary>
        /// ธนาคารที่ระบุหน้าเช็ค &lt;br&gt; 1 &#x3D; ธนาคารกรุงเทพ &lt;br&gt; 2 &#x3D; ธนาคารกสิกรไทย &lt;br&gt; 3 &#x3D; ธนาคารกรุงไทย &lt;br&gt; 4 &#x3D; ธนาคารทหารไทย &lt;br&gt; 5 &#x3D; ธนาคารไทยพาณิชย์ &lt;br&gt; 6 &#x3D; ธนาคารสแตนดาร์ดชาร์เตอร์ด &lt;br&gt; 7 &#x3D; ธนาคารซีไอเอ็มบี ไทย &lt;br&gt; 8 &#x3D; ธนาคารยูโอบี &lt;br&gt; 10 &#x3D; ธนาคารกรุงศรีอยุธยา &lt;br&gt; 11 &#x3D; ธนาคารออมสิน &lt;br&gt; 12 &#x3D; ธนาคารธนชาต &lt;br&gt; 13 &#x3D; ธนาคารแลนด์ แอนด์ เฮ้าส์ &lt;br&gt; 14 &#x3D; ธนาคารเกียรตินาคิน &lt;br&gt; 15 &#x3D; ธนาคารซิตี้แบงก์ &lt;br&gt; 16 &#x3D; ธนาคารทิสโก้ &lt;br&gt; 53 &#x3D; ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร &lt;br&gt; 54 &#x3D; ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย &lt;br&gt; 55 &#x3D; ธนาคารอาคารสงเคราะห์ &lt;br&gt; 56 &#x3D; ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย &lt;br&gt; 57 &#x3D; ธนาคารอิสลามแห่งประเทศไทย &lt;br&gt; 58 &#x3D; ธนาคารแห่งประเทศจีน (ไทย) &lt;br&gt; 59 &#x3D; ธนาคารไอซีบีซี (ไทย) &lt;br&gt; 60 &#x3D; ธนาคารเมกะ สากลพาณิชย์ &lt;br&gt; 61 &#x3D; ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น &lt;br&gt; 62 &#x3D; ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) &lt;br&gt; 63 &#x3D; ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น &lt;br&gt; 64 &#x3D; ธนาคารไทยเครดิต เพื่อรายย่อย 
        /// </summary>
        /// <value>ธนาคารที่ระบุหน้าเช็ค &lt;br&gt; 1 &#x3D; ธนาคารกรุงเทพ &lt;br&gt; 2 &#x3D; ธนาคารกสิกรไทย &lt;br&gt; 3 &#x3D; ธนาคารกรุงไทย &lt;br&gt; 4 &#x3D; ธนาคารทหารไทย &lt;br&gt; 5 &#x3D; ธนาคารไทยพาณิชย์ &lt;br&gt; 6 &#x3D; ธนาคารสแตนดาร์ดชาร์เตอร์ด &lt;br&gt; 7 &#x3D; ธนาคารซีไอเอ็มบี ไทย &lt;br&gt; 8 &#x3D; ธนาคารยูโอบี &lt;br&gt; 10 &#x3D; ธนาคารกรุงศรีอยุธยา &lt;br&gt; 11 &#x3D; ธนาคารออมสิน &lt;br&gt; 12 &#x3D; ธนาคารธนชาต &lt;br&gt; 13 &#x3D; ธนาคารแลนด์ แอนด์ เฮ้าส์ &lt;br&gt; 14 &#x3D; ธนาคารเกียรตินาคิน &lt;br&gt; 15 &#x3D; ธนาคารซิตี้แบงก์ &lt;br&gt; 16 &#x3D; ธนาคารทิสโก้ &lt;br&gt; 53 &#x3D; ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร &lt;br&gt; 54 &#x3D; ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย &lt;br&gt; 55 &#x3D; ธนาคารอาคารสงเคราะห์ &lt;br&gt; 56 &#x3D; ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย &lt;br&gt; 57 &#x3D; ธนาคารอิสลามแห่งประเทศไทย &lt;br&gt; 58 &#x3D; ธนาคารแห่งประเทศจีน (ไทย) &lt;br&gt; 59 &#x3D; ธนาคารไอซีบีซี (ไทย) &lt;br&gt; 60 &#x3D; ธนาคารเมกะ สากลพาณิชย์ &lt;br&gt; 61 &#x3D; ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น &lt;br&gt; 62 &#x3D; ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) &lt;br&gt; 63 &#x3D; ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น &lt;br&gt; 64 &#x3D; ธนาคารไทยเครดิต เพื่อรายย่อย </value>
        [DataMember(Name="chequeBankAccountId", EmitDefaultValue=true)]
        public long ChequeBankAccountId { get; set; }

        /// <summary>
        /// เลข id บัญชีธนาคารที่ใช้ชำระเงิน &lt;br&gt;&lt;red&gt;สามารถ GET มาได้จาก My Company &gt; Bank Account &lt;/red&gt;&lt;br&gt; &lt;ex&gt;Example: 12345&lt;/ex&gt;
        /// </summary>
        /// <value>เลข id บัญชีธนาคารที่ใช้ชำระเงิน &lt;br&gt;&lt;red&gt;สามารถ GET มาได้จาก My Company &gt; Bank Account &lt;/red&gt;&lt;br&gt; &lt;ex&gt;Example: 12345&lt;/ex&gt;</value>
        [DataMember(Name="bankAccountId", EmitDefaultValue=true)]
        public long BankAccountId { get; set; }

        /// <summary>
        /// ค่าธรรมเนียม ที่ชำระโดยเช็ค &lt;br&gt; &lt;ex&gt; Example : 100.00 &lt;/ex&gt;
        /// </summary>
        /// <value>ค่าธรรมเนียม ที่ชำระโดยเช็ค &lt;br&gt; &lt;ex&gt; Example : 100.00 &lt;/ex&gt;</value>
        [DataMember(Name="paymentCharge", EmitDefaultValue=true)]
        public decimal PaymentCharge { get; set; }

        /// <summary>
        /// หมายเหตุ การรับชำระเงิน หรือ ชำระเงิน
        /// </summary>
        /// <value>หมายเหตุ การรับชำระเงิน หรือ ชำระเงิน</value>
        [DataMember(Name="paymentRemarks", EmitDefaultValue=true)]
        public string PaymentRemarks { get; set; }

        /// <summary>
        /// สาเหตุเงินขาด เงินเกิน &lt;br&gt; 51 &#x3D; เงินขาดหรือเงินกิน &lt;br&gt; 55 &#x3D; ค่าธรรมเนียมธนาคาร 
        /// </summary>
        /// <value>สาเหตุเงินขาด เงินเกิน &lt;br&gt; 51 &#x3D; เงินขาดหรือเงินกิน &lt;br&gt; 55 &#x3D; ค่าธรรมเนียมธนาคาร </value>
        [DataMember(Name="remainingCollectedType", EmitDefaultValue=true)]
        public long RemainingCollectedType { get; set; }

        /// <summary>
        /// จำนวน ยอดเงินขาด หรือ เงินเกิน &lt;br&gt; &lt;ex&gt; Example : 100.00 &lt;/ex&gt;
        /// </summary>
        /// <value>จำนวน ยอดเงินขาด หรือ เงินเกิน &lt;br&gt; &lt;ex&gt; Example : 100.00 &lt;/ex&gt;</value>
        [DataMember(Name="remainingCollected", EmitDefaultValue=true)]
        public decimal RemainingCollected { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SimpleDocumentWithPaymentPaidCheque {\n");
            sb.Append("  ContactCode: ").Append(ContactCode).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactAddress: ").Append(ContactAddress).Append("\n");
            sb.Append("  ContactTaxId: ").Append(ContactTaxId).Append("\n");
            sb.Append("  ContactBranch: ").Append(ContactBranch).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  ContactZipCode: ").Append(ContactZipCode).Append("\n");
            sb.Append("  ContactGroup: ").Append(ContactGroup).Append("\n");
            sb.Append("  PublishedOn: ").Append(PublishedOn).Append("\n");
            sb.Append("  CreditType: ").Append(CreditType).Append("\n");
            sb.Append("  CreditDays: ").Append(CreditDays).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  SalesName: ").Append(SalesName).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  IsVatInclusive: ").Append(IsVatInclusive).Append("\n");
            sb.Append("  UseReceiptDeduction: ").Append(UseReceiptDeduction).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  DiscountPercentage: ").Append(DiscountPercentage).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  TotalAfterDiscount: ").Append(TotalAfterDiscount).Append("\n");
            sb.Append("  IsVat: ").Append(IsVat).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  GrandTotal: ").Append(GrandTotal).Append("\n");
            sb.Append("  DocumentShowWithholdingTax: ").Append(DocumentShowWithholdingTax).Append("\n");
            sb.Append("  DocumentWithholdingTaxPercentage: ").Append(DocumentWithholdingTaxPercentage).Append("\n");
            sb.Append("  DocumentWithholdingTaxAmount: ").Append(DocumentWithholdingTaxAmount).Append("\n");
            sb.Append("  DocumentDeductionType: ").Append(DocumentDeductionType).Append("\n");
            sb.Append("  DocumentDeductionAmount: ").Append(DocumentDeductionAmount).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  InternalNotes: ").Append(InternalNotes).Append("\n");
            sb.Append("  ShowSignatureOrStamp: ").Append(ShowSignatureOrStamp).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  DocumentReference: ").Append(DocumentReference).Append("\n");
            sb.Append("  DocumentPaymentStructureType: ").Append(DocumentPaymentStructureType).Append("\n");
            sb.Append("  PaymentMethod: ").Append(PaymentMethod).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  Collected: ").Append(Collected).Append("\n");
            sb.Append("  WithheldPercentage: ").Append(WithheldPercentage).Append("\n");
            sb.Append("  WithheldAmount: ").Append(WithheldAmount).Append("\n");
            sb.Append("  ChequeDate: ").Append(ChequeDate).Append("\n");
            sb.Append("  ChequeNumber: ").Append(ChequeNumber).Append("\n");
            sb.Append("  ChequeBankAccountId: ").Append(ChequeBankAccountId).Append("\n");
            sb.Append("  BankAccountId: ").Append(BankAccountId).Append("\n");
            sb.Append("  PaymentCharge: ").Append(PaymentCharge).Append("\n");
            sb.Append("  PaymentRemarks: ").Append(PaymentRemarks).Append("\n");
            sb.Append("  RemainingCollectedType: ").Append(RemainingCollectedType).Append("\n");
            sb.Append("  RemainingCollected: ").Append(RemainingCollected).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SimpleDocumentWithPaymentPaidCheque);
        }

        /// <summary>
        /// Returns true if SimpleDocumentWithPaymentPaidCheque instances are equal
        /// </summary>
        /// <param name="input">Instance of SimpleDocumentWithPaymentPaidCheque to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SimpleDocumentWithPaymentPaidCheque input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContactCode == input.ContactCode ||
                    (this.ContactCode != null &&
                    this.ContactCode.Equals(input.ContactCode))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactAddress == input.ContactAddress ||
                    (this.ContactAddress != null &&
                    this.ContactAddress.Equals(input.ContactAddress))
                ) && 
                (
                    this.ContactTaxId == input.ContactTaxId ||
                    (this.ContactTaxId != null &&
                    this.ContactTaxId.Equals(input.ContactTaxId))
                ) && 
                (
                    this.ContactBranch == input.ContactBranch ||
                    (this.ContactBranch != null &&
                    this.ContactBranch.Equals(input.ContactBranch))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.ContactNumber == input.ContactNumber ||
                    (this.ContactNumber != null &&
                    this.ContactNumber.Equals(input.ContactNumber))
                ) && 
                (
                    this.ContactZipCode == input.ContactZipCode ||
                    (this.ContactZipCode != null &&
                    this.ContactZipCode.Equals(input.ContactZipCode))
                ) && 
                (
                    this.ContactGroup == input.ContactGroup ||
                    (this.ContactGroup != null &&
                    this.ContactGroup.Equals(input.ContactGroup))
                ) && 
                (
                    this.PublishedOn == input.PublishedOn ||
                    (this.PublishedOn != null &&
                    this.PublishedOn.Equals(input.PublishedOn))
                ) && 
                (
                    this.CreditType == input.CreditType ||
                    (this.CreditType != null &&
                    this.CreditType.Equals(input.CreditType))
                ) && 
                (
                    this.CreditDays == input.CreditDays ||
                    (this.CreditDays != null &&
                    this.CreditDays.Equals(input.CreditDays))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.SalesName == input.SalesName ||
                    (this.SalesName != null &&
                    this.SalesName.Equals(input.SalesName))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.IsVatInclusive == input.IsVatInclusive ||
                    (this.IsVatInclusive != null &&
                    this.IsVatInclusive.Equals(input.IsVatInclusive))
                ) && 
                (
                    this.UseReceiptDeduction == input.UseReceiptDeduction ||
                    (this.UseReceiptDeduction != null &&
                    this.UseReceiptDeduction.Equals(input.UseReceiptDeduction))
                ) && 
                (
                    this.SubTotal == input.SubTotal ||
                    (this.SubTotal != null &&
                    this.SubTotal.Equals(input.SubTotal))
                ) && 
                (
                    this.DiscountPercentage == input.DiscountPercentage ||
                    (this.DiscountPercentage != null &&
                    this.DiscountPercentage.Equals(input.DiscountPercentage))
                ) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && 
                (
                    this.TotalAfterDiscount == input.TotalAfterDiscount ||
                    (this.TotalAfterDiscount != null &&
                    this.TotalAfterDiscount.Equals(input.TotalAfterDiscount))
                ) && 
                (
                    this.IsVat == input.IsVat ||
                    (this.IsVat != null &&
                    this.IsVat.Equals(input.IsVat))
                ) && 
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) && 
                (
                    this.GrandTotal == input.GrandTotal ||
                    (this.GrandTotal != null &&
                    this.GrandTotal.Equals(input.GrandTotal))
                ) && 
                (
                    this.DocumentShowWithholdingTax == input.DocumentShowWithholdingTax ||
                    (this.DocumentShowWithholdingTax != null &&
                    this.DocumentShowWithholdingTax.Equals(input.DocumentShowWithholdingTax))
                ) && 
                (
                    this.DocumentWithholdingTaxPercentage == input.DocumentWithholdingTaxPercentage ||
                    (this.DocumentWithholdingTaxPercentage != null &&
                    this.DocumentWithholdingTaxPercentage.Equals(input.DocumentWithholdingTaxPercentage))
                ) && 
                (
                    this.DocumentWithholdingTaxAmount == input.DocumentWithholdingTaxAmount ||
                    (this.DocumentWithholdingTaxAmount != null &&
                    this.DocumentWithholdingTaxAmount.Equals(input.DocumentWithholdingTaxAmount))
                ) && 
                (
                    this.DocumentDeductionType == input.DocumentDeductionType ||
                    (this.DocumentDeductionType != null &&
                    this.DocumentDeductionType.Equals(input.DocumentDeductionType))
                ) && 
                (
                    this.DocumentDeductionAmount == input.DocumentDeductionAmount ||
                    (this.DocumentDeductionAmount != null &&
                    this.DocumentDeductionAmount.Equals(input.DocumentDeductionAmount))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.InternalNotes == input.InternalNotes ||
                    (this.InternalNotes != null &&
                    this.InternalNotes.Equals(input.InternalNotes))
                ) && 
                (
                    this.ShowSignatureOrStamp == input.ShowSignatureOrStamp ||
                    (this.ShowSignatureOrStamp != null &&
                    this.ShowSignatureOrStamp.Equals(input.ShowSignatureOrStamp))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                ) && 
                (
                    this.DocumentReference == input.DocumentReference ||
                    this.DocumentReference != null &&
                    input.DocumentReference != null &&
                    this.DocumentReference.SequenceEqual(input.DocumentReference)
                ) && 
                (
                    this.DocumentPaymentStructureType == input.DocumentPaymentStructureType ||
                    (this.DocumentPaymentStructureType != null &&
                    this.DocumentPaymentStructureType.Equals(input.DocumentPaymentStructureType))
                ) && 
                (
                    this.PaymentMethod == input.PaymentMethod ||
                    (this.PaymentMethod != null &&
                    this.PaymentMethod.Equals(input.PaymentMethod))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.Collected == input.Collected ||
                    (this.Collected != null &&
                    this.Collected.Equals(input.Collected))
                ) && 
                (
                    this.WithheldPercentage == input.WithheldPercentage ||
                    (this.WithheldPercentage != null &&
                    this.WithheldPercentage.Equals(input.WithheldPercentage))
                ) && 
                (
                    this.WithheldAmount == input.WithheldAmount ||
                    (this.WithheldAmount != null &&
                    this.WithheldAmount.Equals(input.WithheldAmount))
                ) && 
                (
                    this.ChequeDate == input.ChequeDate ||
                    (this.ChequeDate != null &&
                    this.ChequeDate.Equals(input.ChequeDate))
                ) && 
                (
                    this.ChequeNumber == input.ChequeNumber ||
                    (this.ChequeNumber != null &&
                    this.ChequeNumber.Equals(input.ChequeNumber))
                ) && 
                (
                    this.ChequeBankAccountId == input.ChequeBankAccountId ||
                    (this.ChequeBankAccountId != null &&
                    this.ChequeBankAccountId.Equals(input.ChequeBankAccountId))
                ) && 
                (
                    this.BankAccountId == input.BankAccountId ||
                    (this.BankAccountId != null &&
                    this.BankAccountId.Equals(input.BankAccountId))
                ) && 
                (
                    this.PaymentCharge == input.PaymentCharge ||
                    (this.PaymentCharge != null &&
                    this.PaymentCharge.Equals(input.PaymentCharge))
                ) && 
                (
                    this.PaymentRemarks == input.PaymentRemarks ||
                    (this.PaymentRemarks != null &&
                    this.PaymentRemarks.Equals(input.PaymentRemarks))
                ) && 
                (
                    this.RemainingCollectedType == input.RemainingCollectedType ||
                    (this.RemainingCollectedType != null &&
                    this.RemainingCollectedType.Equals(input.RemainingCollectedType))
                ) && 
                (
                    this.RemainingCollected == input.RemainingCollected ||
                    (this.RemainingCollected != null &&
                    this.RemainingCollected.Equals(input.RemainingCollected))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContactCode != null)
                    hashCode = hashCode * 59 + this.ContactCode.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.ContactAddress != null)
                    hashCode = hashCode * 59 + this.ContactAddress.GetHashCode();
                if (this.ContactTaxId != null)
                    hashCode = hashCode * 59 + this.ContactTaxId.GetHashCode();
                if (this.ContactBranch != null)
                    hashCode = hashCode * 59 + this.ContactBranch.GetHashCode();
                if (this.ContactPerson != null)
                    hashCode = hashCode * 59 + this.ContactPerson.GetHashCode();
                if (this.ContactEmail != null)
                    hashCode = hashCode * 59 + this.ContactEmail.GetHashCode();
                if (this.ContactNumber != null)
                    hashCode = hashCode * 59 + this.ContactNumber.GetHashCode();
                if (this.ContactZipCode != null)
                    hashCode = hashCode * 59 + this.ContactZipCode.GetHashCode();
                if (this.ContactGroup != null)
                    hashCode = hashCode * 59 + this.ContactGroup.GetHashCode();
                if (this.PublishedOn != null)
                    hashCode = hashCode * 59 + this.PublishedOn.GetHashCode();
                if (this.CreditType != null)
                    hashCode = hashCode * 59 + this.CreditType.GetHashCode();
                if (this.CreditDays != null)
                    hashCode = hashCode * 59 + this.CreditDays.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.SalesName != null)
                    hashCode = hashCode * 59 + this.SalesName.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.IsVatInclusive != null)
                    hashCode = hashCode * 59 + this.IsVatInclusive.GetHashCode();
                if (this.UseReceiptDeduction != null)
                    hashCode = hashCode * 59 + this.UseReceiptDeduction.GetHashCode();
                if (this.SubTotal != null)
                    hashCode = hashCode * 59 + this.SubTotal.GetHashCode();
                if (this.DiscountPercentage != null)
                    hashCode = hashCode * 59 + this.DiscountPercentage.GetHashCode();
                if (this.DiscountAmount != null)
                    hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                if (this.TotalAfterDiscount != null)
                    hashCode = hashCode * 59 + this.TotalAfterDiscount.GetHashCode();
                if (this.IsVat != null)
                    hashCode = hashCode * 59 + this.IsVat.GetHashCode();
                if (this.VatAmount != null)
                    hashCode = hashCode * 59 + this.VatAmount.GetHashCode();
                if (this.GrandTotal != null)
                    hashCode = hashCode * 59 + this.GrandTotal.GetHashCode();
                if (this.DocumentShowWithholdingTax != null)
                    hashCode = hashCode * 59 + this.DocumentShowWithholdingTax.GetHashCode();
                if (this.DocumentWithholdingTaxPercentage != null)
                    hashCode = hashCode * 59 + this.DocumentWithholdingTaxPercentage.GetHashCode();
                if (this.DocumentWithholdingTaxAmount != null)
                    hashCode = hashCode * 59 + this.DocumentWithholdingTaxAmount.GetHashCode();
                if (this.DocumentDeductionType != null)
                    hashCode = hashCode * 59 + this.DocumentDeductionType.GetHashCode();
                if (this.DocumentDeductionAmount != null)
                    hashCode = hashCode * 59 + this.DocumentDeductionAmount.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                if (this.InternalNotes != null)
                    hashCode = hashCode * 59 + this.InternalNotes.GetHashCode();
                if (this.ShowSignatureOrStamp != null)
                    hashCode = hashCode * 59 + this.ShowSignatureOrStamp.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                if (this.DocumentReference != null)
                    hashCode = hashCode * 59 + this.DocumentReference.GetHashCode();
                if (this.DocumentPaymentStructureType != null)
                    hashCode = hashCode * 59 + this.DocumentPaymentStructureType.GetHashCode();
                if (this.PaymentMethod != null)
                    hashCode = hashCode * 59 + this.PaymentMethod.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                if (this.Collected != null)
                    hashCode = hashCode * 59 + this.Collected.GetHashCode();
                if (this.WithheldPercentage != null)
                    hashCode = hashCode * 59 + this.WithheldPercentage.GetHashCode();
                if (this.WithheldAmount != null)
                    hashCode = hashCode * 59 + this.WithheldAmount.GetHashCode();
                if (this.ChequeDate != null)
                    hashCode = hashCode * 59 + this.ChequeDate.GetHashCode();
                if (this.ChequeNumber != null)
                    hashCode = hashCode * 59 + this.ChequeNumber.GetHashCode();
                if (this.ChequeBankAccountId != null)
                    hashCode = hashCode * 59 + this.ChequeBankAccountId.GetHashCode();
                if (this.BankAccountId != null)
                    hashCode = hashCode * 59 + this.BankAccountId.GetHashCode();
                if (this.PaymentCharge != null)
                    hashCode = hashCode * 59 + this.PaymentCharge.GetHashCode();
                if (this.PaymentRemarks != null)
                    hashCode = hashCode * 59 + this.PaymentRemarks.GetHashCode();
                if (this.RemainingCollectedType != null)
                    hashCode = hashCode * 59 + this.RemainingCollectedType.GetHashCode();
                if (this.RemainingCollected != null)
                    hashCode = hashCode * 59 + this.RemainingCollected.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
