/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// ข้อมูลเอกสารต้นทาง ที่ต้องการอัพเกรดเป็นเอกสารที่ต้องการ
    /// </summary>
    [DataContract]
    public partial class UpgradeDocument :  IEquatable<UpgradeDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpgradeDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpgradeDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpgradeDocument" /> class.
        /// </summary>
        /// <param name="recordId">id ของเอกสารต้นทาง (required).</param>
        /// <param name="referenceDocumentSerial">เลขที่เอกสารต้นทาง &lt;br&gt; &lt;ex&gt;Example: QT20200101&lt;/ex&gt; (required).</param>
        /// <param name="referenceDocumentType">เลขประเภทของเอกสารต้นทาง &lt;br&gt; Quotaions &#x3D; 3 &lt;br&gt; Billing Notes &#x3D; 5 &lt;br&gt; Tax Invoices &#x3D; 7 &lt;br&gt; &lt;ex&gt;Example: 3&lt;/ex&gt; (required).</param>
        public UpgradeDocument(long recordId = default(long), string referenceDocumentSerial = default(string), long referenceDocumentType = default(long))
        {
            // to ensure "recordId" is required (not null)
            if (recordId == null)
            {
                throw new InvalidDataException("recordId is a required property for UpgradeDocument and cannot be null");
            }
            else
            {
                this.RecordId = recordId;
            }
            
            // to ensure "referenceDocumentSerial" is required (not null)
            if (referenceDocumentSerial == null)
            {
                throw new InvalidDataException("referenceDocumentSerial is a required property for UpgradeDocument and cannot be null");
            }
            else
            {
                this.ReferenceDocumentSerial = referenceDocumentSerial;
            }
            
            // to ensure "referenceDocumentType" is required (not null)
            if (referenceDocumentType == null)
            {
                throw new InvalidDataException("referenceDocumentType is a required property for UpgradeDocument and cannot be null");
            }
            else
            {
                this.ReferenceDocumentType = referenceDocumentType;
            }
            
        }
        
        /// <summary>
        /// id ของเอกสารต้นทาง
        /// </summary>
        /// <value>id ของเอกสารต้นทาง</value>
        [DataMember(Name="recordId", EmitDefaultValue=true)]
        public long RecordId { get; set; }

        /// <summary>
        /// เลขที่เอกสารต้นทาง &lt;br&gt; &lt;ex&gt;Example: QT20200101&lt;/ex&gt;
        /// </summary>
        /// <value>เลขที่เอกสารต้นทาง &lt;br&gt; &lt;ex&gt;Example: QT20200101&lt;/ex&gt;</value>
        [DataMember(Name="referenceDocumentSerial", EmitDefaultValue=true)]
        public string ReferenceDocumentSerial { get; set; }

        /// <summary>
        /// เลขประเภทของเอกสารต้นทาง &lt;br&gt; Quotaions &#x3D; 3 &lt;br&gt; Billing Notes &#x3D; 5 &lt;br&gt; Tax Invoices &#x3D; 7 &lt;br&gt; &lt;ex&gt;Example: 3&lt;/ex&gt;
        /// </summary>
        /// <value>เลขประเภทของเอกสารต้นทาง &lt;br&gt; Quotaions &#x3D; 3 &lt;br&gt; Billing Notes &#x3D; 5 &lt;br&gt; Tax Invoices &#x3D; 7 &lt;br&gt; &lt;ex&gt;Example: 3&lt;/ex&gt;</value>
        [DataMember(Name="referenceDocumentType", EmitDefaultValue=true)]
        public long ReferenceDocumentType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpgradeDocument {\n");
            sb.Append("  RecordId: ").Append(RecordId).Append("\n");
            sb.Append("  ReferenceDocumentSerial: ").Append(ReferenceDocumentSerial).Append("\n");
            sb.Append("  ReferenceDocumentType: ").Append(ReferenceDocumentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpgradeDocument);
        }

        /// <summary>
        /// Returns true if UpgradeDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of UpgradeDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpgradeDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecordId == input.RecordId ||
                    (this.RecordId != null &&
                    this.RecordId.Equals(input.RecordId))
                ) && 
                (
                    this.ReferenceDocumentSerial == input.ReferenceDocumentSerial ||
                    (this.ReferenceDocumentSerial != null &&
                    this.ReferenceDocumentSerial.Equals(input.ReferenceDocumentSerial))
                ) && 
                (
                    this.ReferenceDocumentType == input.ReferenceDocumentType ||
                    (this.ReferenceDocumentType != null &&
                    this.ReferenceDocumentType.Equals(input.ReferenceDocumentType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecordId != null)
                    hashCode = hashCode * 59 + this.RecordId.GetHashCode();
                if (this.ReferenceDocumentSerial != null)
                    hashCode = hashCode * 59 + this.ReferenceDocumentSerial.GetHashCode();
                if (this.ReferenceDocumentType != null)
                    hashCode = hashCode * 59 + this.ReferenceDocumentType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
