/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// StatusDocument
    /// </summary>
    [DataContract]
    public partial class StatusDocument :  IEquatable<StatusDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatusDocument" /> class.
        /// </summary>
        /// <param name="status">เลขสถานะเอกสารฉบับนี้.</param>
        /// <param name="statusString">ชื่อสถานะเอกสารฉบับนี้.</param>
        /// <param name="documentType">เลขประเภทเอกสารฉบับนี้.</param>
        /// <param name="allowDelete">สามารถลบเอกสาร :&lt;br&gt; true &#x3D; ลบได้ &lt;br&gt; false &#x3D; ลบไม่ได้.</param>
        public StatusDocument(int status = default(int), int statusString = default(int), int documentType = default(int), bool allowDelete = default(bool))
        {
            this.Status = status;
            this.StatusString = statusString;
            this.DocumentType = documentType;
            this.AllowDelete = allowDelete;
        }
        
        /// <summary>
        /// เลขสถานะเอกสารฉบับนี้
        /// </summary>
        /// <value>เลขสถานะเอกสารฉบับนี้</value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public int Status { get; set; }

        /// <summary>
        /// ชื่อสถานะเอกสารฉบับนี้
        /// </summary>
        /// <value>ชื่อสถานะเอกสารฉบับนี้</value>
        [DataMember(Name="statusString", EmitDefaultValue=true)]
        public int StatusString { get; set; }

        /// <summary>
        /// เลขประเภทเอกสารฉบับนี้
        /// </summary>
        /// <value>เลขประเภทเอกสารฉบับนี้</value>
        [DataMember(Name="documentType", EmitDefaultValue=true)]
        public int DocumentType { get; set; }

        /// <summary>
        /// สามารถลบเอกสาร :&lt;br&gt; true &#x3D; ลบได้ &lt;br&gt; false &#x3D; ลบไม่ได้
        /// </summary>
        /// <value>สามารถลบเอกสาร :&lt;br&gt; true &#x3D; ลบได้ &lt;br&gt; false &#x3D; ลบไม่ได้</value>
        [DataMember(Name="allowDelete", EmitDefaultValue=true)]
        public bool AllowDelete { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatusDocument {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusString: ").Append(StatusString).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  AllowDelete: ").Append(AllowDelete).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatusDocument);
        }

        /// <summary>
        /// Returns true if StatusDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of StatusDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatusDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusString == input.StatusString ||
                    (this.StatusString != null &&
                    this.StatusString.Equals(input.StatusString))
                ) && 
                (
                    this.DocumentType == input.DocumentType ||
                    (this.DocumentType != null &&
                    this.DocumentType.Equals(input.DocumentType))
                ) && 
                (
                    this.AllowDelete == input.AllowDelete ||
                    (this.AllowDelete != null &&
                    this.AllowDelete.Equals(input.AllowDelete))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusString != null)
                    hashCode = hashCode * 59 + this.StatusString.GetHashCode();
                if (this.DocumentType != null)
                    hashCode = hashCode * 59 + this.DocumentType.GetHashCode();
                if (this.AllowDelete != null)
                    hashCode = hashCode * 59 + this.AllowDelete.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
