/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test    **PostMan Collection**   site: https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// UpdateExpenseDocument
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "ExpenseStructureType")]
    [JsonSubtypes.KnownSubType(typeof(UpdateExpenseSimpleDocument), "UpdateExpenseSimpleDocument")]
    [JsonSubtypes.KnownSubType(typeof(UpdateExpenseInlineDocument), "UpdateExpenseInlineDocument")]
    public partial class UpdateExpenseDocument :  IEquatable<UpdateExpenseDocument>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateExpenseDocument" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateExpenseDocument() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateExpenseDocument" /> class.
        /// </summary>
        /// <param name="companyName">ชื่อบริษัท (required).</param>
        /// <param name="companyNameEn">ชื่อบริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ).</param>
        /// <param name="companyAddress">ที่อยู่บริษัท (required).</param>
        /// <param name="companyAddressEn">ที่อยู่บริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ).</param>
        /// <param name="companyTaxId">เลขประจำตัวผู้เสียภาษี บริษัท &lt;br&gt;&lt;ex&gt;Example: 0105558096348&lt;/ex&gt;.</param>
        /// <param name="companyBranch">ชื่อ และ รหัสสาขา &lt;br&gt;&lt;ex&gt;Example: สำนักงานใหญ่ 00000&lt;/ex&gt; (required).</param>
        /// <param name="companyBranchEn">ชื่อ และ รหัสสาขา ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ) &lt;br&gt;&lt;ex&gt;Example: Head Office 00000&lt;/ex&gt;.</param>
        /// <param name="companyPhone">เบอร์โทรสำนักงาน &lt;br&gt;&lt;ex&gt;Example: 02-999-9999&lt;/ex&gt;.</param>
        /// <param name="companyMobile">เบอร์โทรศัพท์มือถือ &lt;br&gt;&lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;.</param>
        /// <param name="companyFax">เบอร์โทรสาร &lt;br&gt;&lt;ex&gt;Example: 02-999-9999 ต่อ 1&lt;/ex&gt;.</param>
        /// <param name="companyWebsite">เว็บไซต์ &lt;br&gt;&lt;ex&gt;Example: www.flowaccount.com&lt;/ex&gt;.</param>
        /// <param name="contactCode">รหัส ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า.</param>
        /// <param name="contactName">ชื่อ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า (required).</param>
        /// <param name="contactAddress">ที่อยู่ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า.</param>
        /// <param name="contactTaxId">เลขประจำตัวผู้เสียภาษี ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า &lt;br&gt; (ถ้ามีจำเป็นต้องครบ 13 หลัก) &lt;br&gt; &lt;ex&gt;Example: 1234567890123 &lt;/ex&gt;.</param>
        /// <param name="contactBranch">สำนักงาน/สาขา.</param>
        /// <param name="contactPerson">ชื่อผู้ติดต่อ.</param>
        /// <param name="contactEmail">อีเมลผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: supplier@email.com&lt;/ex&gt;.</param>
        /// <param name="contactNumber">เบอร์มือถือผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;.</param>
        /// <param name="contactZipCode">รหัสไปรษณีย์ติดต่อ.</param>
        /// <param name="contactGroup">ประผู้ติดต่อ &lt;br&gt; 1 &#x3D; บุคคลธรรมดา &lt;br&gt; 3 &#x3D; นิติบุคคล (default to 1).</param>
        /// <param name="publishedOn">วันที่เอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt; (required).</param>
        /// <param name="creditType">รูปแบบเครดิต &lt;br&gt; 1 &#x3D; เครดิต (วัน) &lt;br&gt; 3 &#x3D; เงินสด  &lt;br&gt; 5 &#x3D; เครดิต (ไม่แสดงวันที่ครบกำหนด) (default to 1).</param>
        /// <param name="creditDays">จำนวนวันที่ให้เครดิต &lt;br&gt; &lt;ex&gt;Example: 30&lt;/ex&gt; (default to 0).</param>
        /// <param name="dueDate">วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;.</param>
        /// <param name="salesName">ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย &lt;br&gt; &lt;ex&gt;Example: sale@email.com or Mr.Sale Shop&lt;/ex&gt; (default to &quot;อีเมล หรือ ชื่อผู้สร้างเอกสาร&quot;).</param>
        /// <param name="projectName">ชื่อโปรเจค.</param>
        /// <param name="reference">เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง &lt;br&gt; &lt;ex&gt;Example: INV2020010001&lt;/ex&gt;.</param>
        /// <param name="isVatInclusive">มูลค่าเอกสารรวมภาษีแล้วหรือไม่ (default to false).</param>
        /// <param name="subTotal">มูลค่ารวมเป็นเงิน (required) (default to 0M).</param>
        /// <param name="discountPercentage">มูลค่าส่วนลดเป็นเปอร์เซ็นต์ (default to 0).</param>
        /// <param name="discountAmount">มูลค่าส่วนลดเป็นจำนวน (บาท) (default to 0M).</param>
        /// <param name="totalAfterDiscount">มูลค่าหลังหักส่วนลด (required).</param>
        /// <param name="isVat">มูลค่าหลังหักส่วนลด มีีภาษีมูลค่าเพิ่ม 7% (default to false).</param>
        /// <param name="vatAmount">ภาษีมูลค่าเพิ่ม.</param>
        /// <param name="grandTotal">จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว) (required).</param>
        /// <param name="remarks">หมายเหตุเอกสาร.</param>
        /// <param name="internalNotes">โน๊ตภายในบริษัท.</param>
        /// <param name="showSignatureOrStamp">ลายเซ็นอิเล็กทรอนิกส์และตรายาง (default to true).</param>
        /// <param name="expenseStructureType">expenseStructureType.</param>
        public UpdateExpenseDocument(string companyName = default(string), string companyNameEn = default(string), string companyAddress = default(string), string companyAddressEn = default(string), string companyTaxId = default(string), string companyBranch = default(string), string companyBranchEn = default(string), string companyPhone = default(string), string companyMobile = default(string), string companyFax = default(string), string companyWebsite = default(string), string contactCode = default(string), string contactName = default(string), string contactAddress = default(string), string contactTaxId = default(string), string contactBranch = default(string), string contactPerson = default(string), string contactEmail = default(string), string contactNumber = default(string), string contactZipCode = default(string), int contactGroup = 1, DateTime publishedOn = default(DateTime), int creditType = 1, int creditDays = 0, DateTime dueDate = default(DateTime), string salesName = "อีเมล หรือ ชื่อผู้สร้างเอกสาร", string projectName = default(string), string reference = default(string), bool isVatInclusive = false, decimal subTotal = 0M, int discountPercentage = 0, decimal discountAmount = 0M, decimal totalAfterDiscount = default(decimal), bool isVat = false, decimal vatAmount = default(decimal), decimal grandTotal = default(decimal), string remarks = default(string), string internalNotes = default(string), bool showSignatureOrStamp = true, string expenseStructureType = default(string))
        {
            // to ensure "companyName" is required (not null)
            if (companyName == null)
            {
                throw new InvalidDataException("companyName is a required property for UpdateExpenseDocument and cannot be null");
            }
            else
            {
                this.CompanyName = companyName;
            }
            
            // to ensure "companyAddress" is required (not null)
            if (companyAddress == null)
            {
                throw new InvalidDataException("companyAddress is a required property for UpdateExpenseDocument and cannot be null");
            }
            else
            {
                this.CompanyAddress = companyAddress;
            }
            
            // to ensure "companyBranch" is required (not null)
            if (companyBranch == null)
            {
                throw new InvalidDataException("companyBranch is a required property for UpdateExpenseDocument and cannot be null");
            }
            else
            {
                this.CompanyBranch = companyBranch;
            }
            
            // to ensure "contactName" is required (not null)
            if (contactName == null)
            {
                throw new InvalidDataException("contactName is a required property for UpdateExpenseDocument and cannot be null");
            }
            else
            {
                this.ContactName = contactName;
            }
            
            // to ensure "publishedOn" is required (not null)
            if (publishedOn == null)
            {
                throw new InvalidDataException("publishedOn is a required property for UpdateExpenseDocument and cannot be null");
            }
            else
            {
                this.PublishedOn = publishedOn;
            }
            
            // to ensure "subTotal" is required (not null)
            if (subTotal == null)
            {
                throw new InvalidDataException("subTotal is a required property for UpdateExpenseDocument and cannot be null");
            }
            else
            {
                this.SubTotal = subTotal;
            }
            
            // to ensure "totalAfterDiscount" is required (not null)
            if (totalAfterDiscount == null)
            {
                throw new InvalidDataException("totalAfterDiscount is a required property for UpdateExpenseDocument and cannot be null");
            }
            else
            {
                this.TotalAfterDiscount = totalAfterDiscount;
            }
            
            // to ensure "grandTotal" is required (not null)
            if (grandTotal == null)
            {
                throw new InvalidDataException("grandTotal is a required property for UpdateExpenseDocument and cannot be null");
            }
            else
            {
                this.GrandTotal = grandTotal;
            }
            
            this.ExpenseStructureType = expenseStructureType;
            this.CompanyNameEn = companyNameEn;
            this.CompanyAddressEn = companyAddressEn;
            this.CompanyTaxId = companyTaxId;
            this.CompanyBranchEn = companyBranchEn;
            this.CompanyPhone = companyPhone;
            this.CompanyMobile = companyMobile;
            this.CompanyFax = companyFax;
            this.CompanyWebsite = companyWebsite;
            this.ContactCode = contactCode;
            this.ContactAddress = contactAddress;
            this.ContactTaxId = contactTaxId;
            this.ContactBranch = contactBranch;
            this.ContactPerson = contactPerson;
            this.ContactEmail = contactEmail;
            this.ContactNumber = contactNumber;
            this.ContactZipCode = contactZipCode;
            // use default value if no "contactGroup" provided
            if (contactGroup == null)
            {
                this.ContactGroup = 1;
            }
            else
            {
                this.ContactGroup = contactGroup;
            }
            // use default value if no "creditType" provided
            if (creditType == null)
            {
                this.CreditType = 1;
            }
            else
            {
                this.CreditType = creditType;
            }
            // use default value if no "creditDays" provided
            if (creditDays == null)
            {
                this.CreditDays = 0;
            }
            else
            {
                this.CreditDays = creditDays;
            }
            this.DueDate = dueDate;
            // use default value if no "salesName" provided
            if (salesName == null)
            {
                this.SalesName = "อีเมล หรือ ชื่อผู้สร้างเอกสาร";
            }
            else
            {
                this.SalesName = salesName;
            }
            this.ProjectName = projectName;
            this.Reference = reference;
            // use default value if no "isVatInclusive" provided
            if (isVatInclusive == null)
            {
                this.IsVatInclusive = false;
            }
            else
            {
                this.IsVatInclusive = isVatInclusive;
            }
            // use default value if no "discountPercentage" provided
            if (discountPercentage == null)
            {
                this.DiscountPercentage = 0;
            }
            else
            {
                this.DiscountPercentage = discountPercentage;
            }
            // use default value if no "discountAmount" provided
            if (discountAmount == null)
            {
                this.DiscountAmount = 0M;
            }
            else
            {
                this.DiscountAmount = discountAmount;
            }
            // use default value if no "isVat" provided
            if (isVat == null)
            {
                this.IsVat = false;
            }
            else
            {
                this.IsVat = isVat;
            }
            this.VatAmount = vatAmount;
            this.Remarks = remarks;
            this.InternalNotes = internalNotes;
            // use default value if no "showSignatureOrStamp" provided
            if (showSignatureOrStamp == null)
            {
                this.ShowSignatureOrStamp = true;
            }
            else
            {
                this.ShowSignatureOrStamp = showSignatureOrStamp;
            }
            this.ExpenseStructureType = expenseStructureType;
        }
        
        /// <summary>
        /// ชื่อบริษัท
        /// </summary>
        /// <value>ชื่อบริษัท</value>
        [DataMember(Name="companyName", EmitDefaultValue=true)]
        public string CompanyName { get; set; }

        /// <summary>
        /// ชื่อบริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ)
        /// </summary>
        /// <value>ชื่อบริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ)</value>
        [DataMember(Name="companyNameEn", EmitDefaultValue=true)]
        public string CompanyNameEn { get; set; }

        /// <summary>
        /// ที่อยู่บริษัท
        /// </summary>
        /// <value>ที่อยู่บริษัท</value>
        [DataMember(Name="companyAddress", EmitDefaultValue=true)]
        public string CompanyAddress { get; set; }

        /// <summary>
        /// ที่อยู่บริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ)
        /// </summary>
        /// <value>ที่อยู่บริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ)</value>
        [DataMember(Name="companyAddressEn", EmitDefaultValue=true)]
        public string CompanyAddressEn { get; set; }

        /// <summary>
        /// เลขประจำตัวผู้เสียภาษี บริษัท &lt;br&gt;&lt;ex&gt;Example: 0105558096348&lt;/ex&gt;
        /// </summary>
        /// <value>เลขประจำตัวผู้เสียภาษี บริษัท &lt;br&gt;&lt;ex&gt;Example: 0105558096348&lt;/ex&gt;</value>
        [DataMember(Name="companyTaxId", EmitDefaultValue=true)]
        public string CompanyTaxId { get; set; }

        /// <summary>
        /// ชื่อ และ รหัสสาขา &lt;br&gt;&lt;ex&gt;Example: สำนักงานใหญ่ 00000&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อ และ รหัสสาขา &lt;br&gt;&lt;ex&gt;Example: สำนักงานใหญ่ 00000&lt;/ex&gt;</value>
        [DataMember(Name="companyBranch", EmitDefaultValue=true)]
        public string CompanyBranch { get; set; }

        /// <summary>
        /// ชื่อ และ รหัสสาขา ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ) &lt;br&gt;&lt;ex&gt;Example: Head Office 00000&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อ และ รหัสสาขา ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ) &lt;br&gt;&lt;ex&gt;Example: Head Office 00000&lt;/ex&gt;</value>
        [DataMember(Name="companyBranchEn", EmitDefaultValue=true)]
        public string CompanyBranchEn { get; set; }

        /// <summary>
        /// เบอร์โทรสำนักงาน &lt;br&gt;&lt;ex&gt;Example: 02-999-9999&lt;/ex&gt;
        /// </summary>
        /// <value>เบอร์โทรสำนักงาน &lt;br&gt;&lt;ex&gt;Example: 02-999-9999&lt;/ex&gt;</value>
        [DataMember(Name="companyPhone", EmitDefaultValue=true)]
        public string CompanyPhone { get; set; }

        /// <summary>
        /// เบอร์โทรศัพท์มือถือ &lt;br&gt;&lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;
        /// </summary>
        /// <value>เบอร์โทรศัพท์มือถือ &lt;br&gt;&lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;</value>
        [DataMember(Name="companyMobile", EmitDefaultValue=true)]
        public string CompanyMobile { get; set; }

        /// <summary>
        /// เบอร์โทรสาร &lt;br&gt;&lt;ex&gt;Example: 02-999-9999 ต่อ 1&lt;/ex&gt;
        /// </summary>
        /// <value>เบอร์โทรสาร &lt;br&gt;&lt;ex&gt;Example: 02-999-9999 ต่อ 1&lt;/ex&gt;</value>
        [DataMember(Name="companyFax", EmitDefaultValue=true)]
        public string CompanyFax { get; set; }

        /// <summary>
        /// เว็บไซต์ &lt;br&gt;&lt;ex&gt;Example: www.flowaccount.com&lt;/ex&gt;
        /// </summary>
        /// <value>เว็บไซต์ &lt;br&gt;&lt;ex&gt;Example: www.flowaccount.com&lt;/ex&gt;</value>
        [DataMember(Name="companyWebsite", EmitDefaultValue=true)]
        public string CompanyWebsite { get; set; }

        /// <summary>
        /// รหัส ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า
        /// </summary>
        /// <value>รหัส ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า</value>
        [DataMember(Name="contactCode", EmitDefaultValue=true)]
        public string ContactCode { get; set; }

        /// <summary>
        /// ชื่อ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า
        /// </summary>
        /// <value>ชื่อ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า</value>
        [DataMember(Name="contactName", EmitDefaultValue=true)]
        public string ContactName { get; set; }

        /// <summary>
        /// ที่อยู่ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า
        /// </summary>
        /// <value>ที่อยู่ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า</value>
        [DataMember(Name="contactAddress", EmitDefaultValue=true)]
        public string ContactAddress { get; set; }

        /// <summary>
        /// เลขประจำตัวผู้เสียภาษี ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า &lt;br&gt; (ถ้ามีจำเป็นต้องครบ 13 หลัก) &lt;br&gt; &lt;ex&gt;Example: 1234567890123 &lt;/ex&gt;
        /// </summary>
        /// <value>เลขประจำตัวผู้เสียภาษี ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า &lt;br&gt; (ถ้ามีจำเป็นต้องครบ 13 หลัก) &lt;br&gt; &lt;ex&gt;Example: 1234567890123 &lt;/ex&gt;</value>
        [DataMember(Name="contactTaxId", EmitDefaultValue=true)]
        public string ContactTaxId { get; set; }

        /// <summary>
        /// สำนักงาน/สาขา
        /// </summary>
        /// <value>สำนักงาน/สาขา</value>
        [DataMember(Name="contactBranch", EmitDefaultValue=true)]
        public string ContactBranch { get; set; }

        /// <summary>
        /// ชื่อผู้ติดต่อ
        /// </summary>
        /// <value>ชื่อผู้ติดต่อ</value>
        [DataMember(Name="contactPerson", EmitDefaultValue=true)]
        public string ContactPerson { get; set; }

        /// <summary>
        /// อีเมลผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: supplier@email.com&lt;/ex&gt;
        /// </summary>
        /// <value>อีเมลผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: supplier@email.com&lt;/ex&gt;</value>
        [DataMember(Name="contactEmail", EmitDefaultValue=true)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// เบอร์มือถือผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;
        /// </summary>
        /// <value>เบอร์มือถือผู้ติดต่อ &lt;br&gt; &lt;ex&gt;Example: 099-999-9999&lt;/ex&gt;</value>
        [DataMember(Name="contactNumber", EmitDefaultValue=true)]
        public string ContactNumber { get; set; }

        /// <summary>
        /// รหัสไปรษณีย์ติดต่อ
        /// </summary>
        /// <value>รหัสไปรษณีย์ติดต่อ</value>
        [DataMember(Name="contactZipCode", EmitDefaultValue=true)]
        public string ContactZipCode { get; set; }

        /// <summary>
        /// ประผู้ติดต่อ &lt;br&gt; 1 &#x3D; บุคคลธรรมดา &lt;br&gt; 3 &#x3D; นิติบุคคล
        /// </summary>
        /// <value>ประผู้ติดต่อ &lt;br&gt; 1 &#x3D; บุคคลธรรมดา &lt;br&gt; 3 &#x3D; นิติบุคคล</value>
        [DataMember(Name="contactGroup", EmitDefaultValue=true)]
        public int ContactGroup { get; set; }

        /// <summary>
        /// วันที่เอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;
        /// </summary>
        /// <value>วันที่เอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;</value>
        [DataMember(Name="publishedOn", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime PublishedOn { get; set; }

        /// <summary>
        /// รูปแบบเครดิต &lt;br&gt; 1 &#x3D; เครดิต (วัน) &lt;br&gt; 3 &#x3D; เงินสด  &lt;br&gt; 5 &#x3D; เครดิต (ไม่แสดงวันที่ครบกำหนด)
        /// </summary>
        /// <value>รูปแบบเครดิต &lt;br&gt; 1 &#x3D; เครดิต (วัน) &lt;br&gt; 3 &#x3D; เงินสด  &lt;br&gt; 5 &#x3D; เครดิต (ไม่แสดงวันที่ครบกำหนด)</value>
        [DataMember(Name="creditType", EmitDefaultValue=true)]
        public int CreditType { get; set; }

        /// <summary>
        /// จำนวนวันที่ให้เครดิต &lt;br&gt; &lt;ex&gt;Example: 30&lt;/ex&gt;
        /// </summary>
        /// <value>จำนวนวันที่ให้เครดิต &lt;br&gt; &lt;ex&gt;Example: 30&lt;/ex&gt;</value>
        [DataMember(Name="creditDays", EmitDefaultValue=true)]
        public int CreditDays { get; set; }

        /// <summary>
        /// วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;
        /// </summary>
        /// <value>วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;</value>
        [DataMember(Name="dueDate", EmitDefaultValue=true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime DueDate { get; set; }

        /// <summary>
        /// ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย &lt;br&gt; &lt;ex&gt;Example: sale@email.com or Mr.Sale Shop&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย &lt;br&gt; &lt;ex&gt;Example: sale@email.com or Mr.Sale Shop&lt;/ex&gt;</value>
        [DataMember(Name="salesName", EmitDefaultValue=true)]
        public string SalesName { get; set; }

        /// <summary>
        /// ชื่อโปรเจค
        /// </summary>
        /// <value>ชื่อโปรเจค</value>
        [DataMember(Name="projectName", EmitDefaultValue=true)]
        public string ProjectName { get; set; }

        /// <summary>
        /// เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง &lt;br&gt; &lt;ex&gt;Example: INV2020010001&lt;/ex&gt;
        /// </summary>
        /// <value>เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง &lt;br&gt; &lt;ex&gt;Example: INV2020010001&lt;/ex&gt;</value>
        [DataMember(Name="reference", EmitDefaultValue=true)]
        public string Reference { get; set; }

        /// <summary>
        /// มูลค่าเอกสารรวมภาษีแล้วหรือไม่
        /// </summary>
        /// <value>มูลค่าเอกสารรวมภาษีแล้วหรือไม่</value>
        [DataMember(Name="isVatInclusive", EmitDefaultValue=true)]
        public bool IsVatInclusive { get; set; }

        /// <summary>
        /// มูลค่ารวมเป็นเงิน
        /// </summary>
        /// <value>มูลค่ารวมเป็นเงิน</value>
        [DataMember(Name="subTotal", EmitDefaultValue=true)]
        public decimal SubTotal { get; set; }

        /// <summary>
        /// มูลค่าส่วนลดเป็นเปอร์เซ็นต์
        /// </summary>
        /// <value>มูลค่าส่วนลดเป็นเปอร์เซ็นต์</value>
        [DataMember(Name="discountPercentage", EmitDefaultValue=true)]
        public int DiscountPercentage { get; set; }

        /// <summary>
        /// มูลค่าส่วนลดเป็นจำนวน (บาท)
        /// </summary>
        /// <value>มูลค่าส่วนลดเป็นจำนวน (บาท)</value>
        [DataMember(Name="discountAmount", EmitDefaultValue=true)]
        public decimal DiscountAmount { get; set; }

        /// <summary>
        /// มูลค่าหลังหักส่วนลด
        /// </summary>
        /// <value>มูลค่าหลังหักส่วนลด</value>
        [DataMember(Name="totalAfterDiscount", EmitDefaultValue=true)]
        public decimal TotalAfterDiscount { get; set; }

        /// <summary>
        /// มูลค่าหลังหักส่วนลด มีีภาษีมูลค่าเพิ่ม 7%
        /// </summary>
        /// <value>มูลค่าหลังหักส่วนลด มีีภาษีมูลค่าเพิ่ม 7%</value>
        [DataMember(Name="isVat", EmitDefaultValue=true)]
        public bool IsVat { get; set; }

        /// <summary>
        /// ภาษีมูลค่าเพิ่ม
        /// </summary>
        /// <value>ภาษีมูลค่าเพิ่ม</value>
        [DataMember(Name="vatAmount", EmitDefaultValue=true)]
        public decimal VatAmount { get; set; }

        /// <summary>
        /// จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว)
        /// </summary>
        /// <value>จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว)</value>
        [DataMember(Name="grandTotal", EmitDefaultValue=true)]
        public decimal GrandTotal { get; set; }

        /// <summary>
        /// หมายเหตุเอกสาร
        /// </summary>
        /// <value>หมายเหตุเอกสาร</value>
        [DataMember(Name="remarks", EmitDefaultValue=true)]
        public string Remarks { get; set; }

        /// <summary>
        /// โน๊ตภายในบริษัท
        /// </summary>
        /// <value>โน๊ตภายในบริษัท</value>
        [DataMember(Name="internalNotes", EmitDefaultValue=true)]
        public string InternalNotes { get; set; }

        /// <summary>
        /// ลายเซ็นอิเล็กทรอนิกส์และตรายาง
        /// </summary>
        /// <value>ลายเซ็นอิเล็กทรอนิกส์และตรายาง</value>
        [DataMember(Name="showSignatureOrStamp", EmitDefaultValue=true)]
        public bool ShowSignatureOrStamp { get; set; }

        /// <summary>
        /// Gets or Sets ExpenseStructureType
        /// </summary>
        [DataMember(Name="expenseStructureType", EmitDefaultValue=true)]
        public string ExpenseStructureType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateExpenseDocument {\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  CompanyNameEn: ").Append(CompanyNameEn).Append("\n");
            sb.Append("  CompanyAddress: ").Append(CompanyAddress).Append("\n");
            sb.Append("  CompanyAddressEn: ").Append(CompanyAddressEn).Append("\n");
            sb.Append("  CompanyTaxId: ").Append(CompanyTaxId).Append("\n");
            sb.Append("  CompanyBranch: ").Append(CompanyBranch).Append("\n");
            sb.Append("  CompanyBranchEn: ").Append(CompanyBranchEn).Append("\n");
            sb.Append("  CompanyPhone: ").Append(CompanyPhone).Append("\n");
            sb.Append("  CompanyMobile: ").Append(CompanyMobile).Append("\n");
            sb.Append("  CompanyFax: ").Append(CompanyFax).Append("\n");
            sb.Append("  CompanyWebsite: ").Append(CompanyWebsite).Append("\n");
            sb.Append("  ContactCode: ").Append(ContactCode).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactAddress: ").Append(ContactAddress).Append("\n");
            sb.Append("  ContactTaxId: ").Append(ContactTaxId).Append("\n");
            sb.Append("  ContactBranch: ").Append(ContactBranch).Append("\n");
            sb.Append("  ContactPerson: ").Append(ContactPerson).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ContactNumber: ").Append(ContactNumber).Append("\n");
            sb.Append("  ContactZipCode: ").Append(ContactZipCode).Append("\n");
            sb.Append("  ContactGroup: ").Append(ContactGroup).Append("\n");
            sb.Append("  PublishedOn: ").Append(PublishedOn).Append("\n");
            sb.Append("  CreditType: ").Append(CreditType).Append("\n");
            sb.Append("  CreditDays: ").Append(CreditDays).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  SalesName: ").Append(SalesName).Append("\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  IsVatInclusive: ").Append(IsVatInclusive).Append("\n");
            sb.Append("  SubTotal: ").Append(SubTotal).Append("\n");
            sb.Append("  DiscountPercentage: ").Append(DiscountPercentage).Append("\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  TotalAfterDiscount: ").Append(TotalAfterDiscount).Append("\n");
            sb.Append("  IsVat: ").Append(IsVat).Append("\n");
            sb.Append("  VatAmount: ").Append(VatAmount).Append("\n");
            sb.Append("  GrandTotal: ").Append(GrandTotal).Append("\n");
            sb.Append("  Remarks: ").Append(Remarks).Append("\n");
            sb.Append("  InternalNotes: ").Append(InternalNotes).Append("\n");
            sb.Append("  ShowSignatureOrStamp: ").Append(ShowSignatureOrStamp).Append("\n");
            sb.Append("  ExpenseStructureType: ").Append(ExpenseStructureType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UpdateExpenseDocument);
        }

        /// <summary>
        /// Returns true if UpdateExpenseDocument instances are equal
        /// </summary>
        /// <param name="input">Instance of UpdateExpenseDocument to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateExpenseDocument input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.CompanyNameEn == input.CompanyNameEn ||
                    (this.CompanyNameEn != null &&
                    this.CompanyNameEn.Equals(input.CompanyNameEn))
                ) && 
                (
                    this.CompanyAddress == input.CompanyAddress ||
                    (this.CompanyAddress != null &&
                    this.CompanyAddress.Equals(input.CompanyAddress))
                ) && 
                (
                    this.CompanyAddressEn == input.CompanyAddressEn ||
                    (this.CompanyAddressEn != null &&
                    this.CompanyAddressEn.Equals(input.CompanyAddressEn))
                ) && 
                (
                    this.CompanyTaxId == input.CompanyTaxId ||
                    (this.CompanyTaxId != null &&
                    this.CompanyTaxId.Equals(input.CompanyTaxId))
                ) && 
                (
                    this.CompanyBranch == input.CompanyBranch ||
                    (this.CompanyBranch != null &&
                    this.CompanyBranch.Equals(input.CompanyBranch))
                ) && 
                (
                    this.CompanyBranchEn == input.CompanyBranchEn ||
                    (this.CompanyBranchEn != null &&
                    this.CompanyBranchEn.Equals(input.CompanyBranchEn))
                ) && 
                (
                    this.CompanyPhone == input.CompanyPhone ||
                    (this.CompanyPhone != null &&
                    this.CompanyPhone.Equals(input.CompanyPhone))
                ) && 
                (
                    this.CompanyMobile == input.CompanyMobile ||
                    (this.CompanyMobile != null &&
                    this.CompanyMobile.Equals(input.CompanyMobile))
                ) && 
                (
                    this.CompanyFax == input.CompanyFax ||
                    (this.CompanyFax != null &&
                    this.CompanyFax.Equals(input.CompanyFax))
                ) && 
                (
                    this.CompanyWebsite == input.CompanyWebsite ||
                    (this.CompanyWebsite != null &&
                    this.CompanyWebsite.Equals(input.CompanyWebsite))
                ) && 
                (
                    this.ContactCode == input.ContactCode ||
                    (this.ContactCode != null &&
                    this.ContactCode.Equals(input.ContactCode))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactAddress == input.ContactAddress ||
                    (this.ContactAddress != null &&
                    this.ContactAddress.Equals(input.ContactAddress))
                ) && 
                (
                    this.ContactTaxId == input.ContactTaxId ||
                    (this.ContactTaxId != null &&
                    this.ContactTaxId.Equals(input.ContactTaxId))
                ) && 
                (
                    this.ContactBranch == input.ContactBranch ||
                    (this.ContactBranch != null &&
                    this.ContactBranch.Equals(input.ContactBranch))
                ) && 
                (
                    this.ContactPerson == input.ContactPerson ||
                    (this.ContactPerson != null &&
                    this.ContactPerson.Equals(input.ContactPerson))
                ) && 
                (
                    this.ContactEmail == input.ContactEmail ||
                    (this.ContactEmail != null &&
                    this.ContactEmail.Equals(input.ContactEmail))
                ) && 
                (
                    this.ContactNumber == input.ContactNumber ||
                    (this.ContactNumber != null &&
                    this.ContactNumber.Equals(input.ContactNumber))
                ) && 
                (
                    this.ContactZipCode == input.ContactZipCode ||
                    (this.ContactZipCode != null &&
                    this.ContactZipCode.Equals(input.ContactZipCode))
                ) && 
                (
                    this.ContactGroup == input.ContactGroup ||
                    (this.ContactGroup != null &&
                    this.ContactGroup.Equals(input.ContactGroup))
                ) && 
                (
                    this.PublishedOn == input.PublishedOn ||
                    (this.PublishedOn != null &&
                    this.PublishedOn.Equals(input.PublishedOn))
                ) && 
                (
                    this.CreditType == input.CreditType ||
                    (this.CreditType != null &&
                    this.CreditType.Equals(input.CreditType))
                ) && 
                (
                    this.CreditDays == input.CreditDays ||
                    (this.CreditDays != null &&
                    this.CreditDays.Equals(input.CreditDays))
                ) && 
                (
                    this.DueDate == input.DueDate ||
                    (this.DueDate != null &&
                    this.DueDate.Equals(input.DueDate))
                ) && 
                (
                    this.SalesName == input.SalesName ||
                    (this.SalesName != null &&
                    this.SalesName.Equals(input.SalesName))
                ) && 
                (
                    this.ProjectName == input.ProjectName ||
                    (this.ProjectName != null &&
                    this.ProjectName.Equals(input.ProjectName))
                ) && 
                (
                    this.Reference == input.Reference ||
                    (this.Reference != null &&
                    this.Reference.Equals(input.Reference))
                ) && 
                (
                    this.IsVatInclusive == input.IsVatInclusive ||
                    (this.IsVatInclusive != null &&
                    this.IsVatInclusive.Equals(input.IsVatInclusive))
                ) && 
                (
                    this.SubTotal == input.SubTotal ||
                    (this.SubTotal != null &&
                    this.SubTotal.Equals(input.SubTotal))
                ) && 
                (
                    this.DiscountPercentage == input.DiscountPercentage ||
                    (this.DiscountPercentage != null &&
                    this.DiscountPercentage.Equals(input.DiscountPercentage))
                ) && 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && 
                (
                    this.TotalAfterDiscount == input.TotalAfterDiscount ||
                    (this.TotalAfterDiscount != null &&
                    this.TotalAfterDiscount.Equals(input.TotalAfterDiscount))
                ) && 
                (
                    this.IsVat == input.IsVat ||
                    (this.IsVat != null &&
                    this.IsVat.Equals(input.IsVat))
                ) && 
                (
                    this.VatAmount == input.VatAmount ||
                    (this.VatAmount != null &&
                    this.VatAmount.Equals(input.VatAmount))
                ) && 
                (
                    this.GrandTotal == input.GrandTotal ||
                    (this.GrandTotal != null &&
                    this.GrandTotal.Equals(input.GrandTotal))
                ) && 
                (
                    this.Remarks == input.Remarks ||
                    (this.Remarks != null &&
                    this.Remarks.Equals(input.Remarks))
                ) && 
                (
                    this.InternalNotes == input.InternalNotes ||
                    (this.InternalNotes != null &&
                    this.InternalNotes.Equals(input.InternalNotes))
                ) && 
                (
                    this.ShowSignatureOrStamp == input.ShowSignatureOrStamp ||
                    (this.ShowSignatureOrStamp != null &&
                    this.ShowSignatureOrStamp.Equals(input.ShowSignatureOrStamp))
                ) && 
                (
                    this.ExpenseStructureType == input.ExpenseStructureType ||
                    (this.ExpenseStructureType != null &&
                    this.ExpenseStructureType.Equals(input.ExpenseStructureType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CompanyName != null)
                    hashCode = hashCode * 59 + this.CompanyName.GetHashCode();
                if (this.CompanyNameEn != null)
                    hashCode = hashCode * 59 + this.CompanyNameEn.GetHashCode();
                if (this.CompanyAddress != null)
                    hashCode = hashCode * 59 + this.CompanyAddress.GetHashCode();
                if (this.CompanyAddressEn != null)
                    hashCode = hashCode * 59 + this.CompanyAddressEn.GetHashCode();
                if (this.CompanyTaxId != null)
                    hashCode = hashCode * 59 + this.CompanyTaxId.GetHashCode();
                if (this.CompanyBranch != null)
                    hashCode = hashCode * 59 + this.CompanyBranch.GetHashCode();
                if (this.CompanyBranchEn != null)
                    hashCode = hashCode * 59 + this.CompanyBranchEn.GetHashCode();
                if (this.CompanyPhone != null)
                    hashCode = hashCode * 59 + this.CompanyPhone.GetHashCode();
                if (this.CompanyMobile != null)
                    hashCode = hashCode * 59 + this.CompanyMobile.GetHashCode();
                if (this.CompanyFax != null)
                    hashCode = hashCode * 59 + this.CompanyFax.GetHashCode();
                if (this.CompanyWebsite != null)
                    hashCode = hashCode * 59 + this.CompanyWebsite.GetHashCode();
                if (this.ContactCode != null)
                    hashCode = hashCode * 59 + this.ContactCode.GetHashCode();
                if (this.ContactName != null)
                    hashCode = hashCode * 59 + this.ContactName.GetHashCode();
                if (this.ContactAddress != null)
                    hashCode = hashCode * 59 + this.ContactAddress.GetHashCode();
                if (this.ContactTaxId != null)
                    hashCode = hashCode * 59 + this.ContactTaxId.GetHashCode();
                if (this.ContactBranch != null)
                    hashCode = hashCode * 59 + this.ContactBranch.GetHashCode();
                if (this.ContactPerson != null)
                    hashCode = hashCode * 59 + this.ContactPerson.GetHashCode();
                if (this.ContactEmail != null)
                    hashCode = hashCode * 59 + this.ContactEmail.GetHashCode();
                if (this.ContactNumber != null)
                    hashCode = hashCode * 59 + this.ContactNumber.GetHashCode();
                if (this.ContactZipCode != null)
                    hashCode = hashCode * 59 + this.ContactZipCode.GetHashCode();
                if (this.ContactGroup != null)
                    hashCode = hashCode * 59 + this.ContactGroup.GetHashCode();
                if (this.PublishedOn != null)
                    hashCode = hashCode * 59 + this.PublishedOn.GetHashCode();
                if (this.CreditType != null)
                    hashCode = hashCode * 59 + this.CreditType.GetHashCode();
                if (this.CreditDays != null)
                    hashCode = hashCode * 59 + this.CreditDays.GetHashCode();
                if (this.DueDate != null)
                    hashCode = hashCode * 59 + this.DueDate.GetHashCode();
                if (this.SalesName != null)
                    hashCode = hashCode * 59 + this.SalesName.GetHashCode();
                if (this.ProjectName != null)
                    hashCode = hashCode * 59 + this.ProjectName.GetHashCode();
                if (this.Reference != null)
                    hashCode = hashCode * 59 + this.Reference.GetHashCode();
                if (this.IsVatInclusive != null)
                    hashCode = hashCode * 59 + this.IsVatInclusive.GetHashCode();
                if (this.SubTotal != null)
                    hashCode = hashCode * 59 + this.SubTotal.GetHashCode();
                if (this.DiscountPercentage != null)
                    hashCode = hashCode * 59 + this.DiscountPercentage.GetHashCode();
                if (this.DiscountAmount != null)
                    hashCode = hashCode * 59 + this.DiscountAmount.GetHashCode();
                if (this.TotalAfterDiscount != null)
                    hashCode = hashCode * 59 + this.TotalAfterDiscount.GetHashCode();
                if (this.IsVat != null)
                    hashCode = hashCode * 59 + this.IsVat.GetHashCode();
                if (this.VatAmount != null)
                    hashCode = hashCode * 59 + this.VatAmount.GetHashCode();
                if (this.GrandTotal != null)
                    hashCode = hashCode * 59 + this.GrandTotal.GetHashCode();
                if (this.Remarks != null)
                    hashCode = hashCode * 59 + this.Remarks.GetHashCode();
                if (this.InternalNotes != null)
                    hashCode = hashCode * 59 + this.InternalNotes.GetHashCode();
                if (this.ShowSignatureOrStamp != null)
                    hashCode = hashCode * 59 + this.ShowSignatureOrStamp.GetHashCode();
                if (this.ExpenseStructureType != null)
                    hashCode = hashCode * 59 + this.ExpenseStructureType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
