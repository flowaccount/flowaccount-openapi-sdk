/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// AttachmentResponseData
    /// </summary>
    [DataContract]
    public partial class AttachmentResponseData :  IEquatable<AttachmentResponseData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentResponseData" /> class.
        /// </summary>
        /// <param name="attachmentId">เลข Id ไฟล์แนบเอกสาร.</param>
        /// <param name="createdOn">วันที่แนบไฟล์เอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;.</param>
        /// <param name="attachmentName">ชื่อไฟล์แนบเอกสาร.</param>
        /// <param name="orderNumber">ลำดับไฟล์แนบเอกสาร.</param>
        /// <param name="isDisplay">สถานะการแสดงไฟล์แนบเอกสาร (default to true).</param>
        /// <param name="attachmentPath">path ที่อยู่ไฟล์แนบเอกสาร.</param>
        public AttachmentResponseData(long attachmentId = default(long), Object createdOn = default(Object), string attachmentName = default(string), long orderNumber = default(long), bool isDisplay = true, string attachmentPath = default(string))
        {
            this.AttachmentId = attachmentId;
            this.CreatedOn = createdOn;
            this.AttachmentName = attachmentName;
            this.OrderNumber = orderNumber;
            // use default value if no "isDisplay" provided
            if (isDisplay == null)
            {
                this.IsDisplay = true;
            }
            else
            {
                this.IsDisplay = isDisplay;
            }
            this.AttachmentPath = attachmentPath;
        }
        
        /// <summary>
        /// เลข Id ไฟล์แนบเอกสาร
        /// </summary>
        /// <value>เลข Id ไฟล์แนบเอกสาร</value>
        [DataMember(Name="attachmentId", EmitDefaultValue=true)]
        public long AttachmentId { get; set; }

        /// <summary>
        /// วันที่แนบไฟล์เอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;
        /// </summary>
        /// <value>วันที่แนบไฟล์เอกสาร รูปแบบ yyyy-MM-dd &lt;br&gt; &lt;ex&gt;Example: 2020-01-01&lt;/ex&gt;</value>
        [DataMember(Name="createdOn", EmitDefaultValue=true)]
        public Object CreatedOn { get; set; }

        /// <summary>
        /// ชื่อไฟล์แนบเอกสาร
        /// </summary>
        /// <value>ชื่อไฟล์แนบเอกสาร</value>
        [DataMember(Name="attachmentName", EmitDefaultValue=true)]
        public string AttachmentName { get; set; }

        /// <summary>
        /// ลำดับไฟล์แนบเอกสาร
        /// </summary>
        /// <value>ลำดับไฟล์แนบเอกสาร</value>
        [DataMember(Name="orderNumber", EmitDefaultValue=true)]
        public long OrderNumber { get; set; }

        /// <summary>
        /// สถานะการแสดงไฟล์แนบเอกสาร
        /// </summary>
        /// <value>สถานะการแสดงไฟล์แนบเอกสาร</value>
        [DataMember(Name="isDisplay", EmitDefaultValue=true)]
        public bool IsDisplay { get; set; }

        /// <summary>
        /// path ที่อยู่ไฟล์แนบเอกสาร
        /// </summary>
        /// <value>path ที่อยู่ไฟล์แนบเอกสาร</value>
        [DataMember(Name="attachmentPath", EmitDefaultValue=true)]
        public string AttachmentPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttachmentResponseData {\n");
            sb.Append("  AttachmentId: ").Append(AttachmentId).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("  AttachmentName: ").Append(AttachmentName).Append("\n");
            sb.Append("  OrderNumber: ").Append(OrderNumber).Append("\n");
            sb.Append("  IsDisplay: ").Append(IsDisplay).Append("\n");
            sb.Append("  AttachmentPath: ").Append(AttachmentPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttachmentResponseData);
        }

        /// <summary>
        /// Returns true if AttachmentResponseData instances are equal
        /// </summary>
        /// <param name="input">Instance of AttachmentResponseData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachmentResponseData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttachmentId == input.AttachmentId ||
                    (this.AttachmentId != null &&
                    this.AttachmentId.Equals(input.AttachmentId))
                ) && 
                (
                    this.CreatedOn == input.CreatedOn ||
                    (this.CreatedOn != null &&
                    this.CreatedOn.Equals(input.CreatedOn))
                ) && 
                (
                    this.AttachmentName == input.AttachmentName ||
                    (this.AttachmentName != null &&
                    this.AttachmentName.Equals(input.AttachmentName))
                ) && 
                (
                    this.OrderNumber == input.OrderNumber ||
                    (this.OrderNumber != null &&
                    this.OrderNumber.Equals(input.OrderNumber))
                ) && 
                (
                    this.IsDisplay == input.IsDisplay ||
                    (this.IsDisplay != null &&
                    this.IsDisplay.Equals(input.IsDisplay))
                ) && 
                (
                    this.AttachmentPath == input.AttachmentPath ||
                    (this.AttachmentPath != null &&
                    this.AttachmentPath.Equals(input.AttachmentPath))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AttachmentId != null)
                    hashCode = hashCode * 59 + this.AttachmentId.GetHashCode();
                if (this.CreatedOn != null)
                    hashCode = hashCode * 59 + this.CreatedOn.GetHashCode();
                if (this.AttachmentName != null)
                    hashCode = hashCode * 59 + this.AttachmentName.GetHashCode();
                if (this.OrderNumber != null)
                    hashCode = hashCode * 59 + this.OrderNumber.GetHashCode();
                if (this.IsDisplay != null)
                    hashCode = hashCode * 59 + this.IsDisplay.GetHashCode();
                if (this.AttachmentPath != null)
                    hashCode = hashCode * 59 + this.AttachmentPath.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
