/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test    **PostMan Collection**   site: https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// BankAccountResponse
    /// </summary>
    [DataContract]
    public partial class BankAccountResponse :  IEquatable<BankAccountResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountResponse" /> class.
        /// </summary>
        /// <param name="bankAccountId">เลข id บัญชีธนาคาร.</param>
        /// <param name="bankAccountNumber">เลขบัญชี &lt;br&gt; &lt;ex&gt;Example: 0048620000 &lt;/ex&gt;.</param>
        /// <param name="bankAccountName">ชื่อบัญชี &lt;br&gt; &lt;ex&gt;Example: บัญชีใช้รับเงิน&lt;/ex&gt;.</param>
        /// <param name="bankAccountType">ประเภทบัญชีธนาคาร &lt;br&gt; 1 &#x3D; บัญชีออมทรัพย์  &lt;br&gt; 3 &#x3D; บัญชีกระรายวัน &lt;br&gt; 7  &#x3D; บัญชีฝากประจำ.</param>
        /// <param name="bankBranch">ชื่อสาขาธนาคาร.</param>
        /// <param name="bankId">เลข id ธนาคาร.</param>
        /// <param name="bankName">ชื่อธนาคาร.</param>
        public BankAccountResponse(long bankAccountId = default(long), string bankAccountNumber = default(string), string bankAccountName = default(string), long bankAccountType = default(long), string bankBranch = default(string), long bankId = default(long), string bankName = default(string))
        {
            this.BankAccountId = bankAccountId;
            this.BankAccountNumber = bankAccountNumber;
            this.BankAccountName = bankAccountName;
            this.BankAccountType = bankAccountType;
            this.BankBranch = bankBranch;
            this.BankId = bankId;
            this.BankName = bankName;
        }
        
        /// <summary>
        /// เลข id บัญชีธนาคาร
        /// </summary>
        /// <value>เลข id บัญชีธนาคาร</value>
        [DataMember(Name="bankAccountId", EmitDefaultValue=true)]
        public long BankAccountId { get; set; }

        /// <summary>
        /// เลขบัญชี &lt;br&gt; &lt;ex&gt;Example: 0048620000 &lt;/ex&gt;
        /// </summary>
        /// <value>เลขบัญชี &lt;br&gt; &lt;ex&gt;Example: 0048620000 &lt;/ex&gt;</value>
        [DataMember(Name="bankAccountNumber", EmitDefaultValue=true)]
        public string BankAccountNumber { get; set; }

        /// <summary>
        /// ชื่อบัญชี &lt;br&gt; &lt;ex&gt;Example: บัญชีใช้รับเงิน&lt;/ex&gt;
        /// </summary>
        /// <value>ชื่อบัญชี &lt;br&gt; &lt;ex&gt;Example: บัญชีใช้รับเงิน&lt;/ex&gt;</value>
        [DataMember(Name="bankAccountName", EmitDefaultValue=true)]
        public string BankAccountName { get; set; }

        /// <summary>
        /// ประเภทบัญชีธนาคาร &lt;br&gt; 1 &#x3D; บัญชีออมทรัพย์  &lt;br&gt; 3 &#x3D; บัญชีกระรายวัน &lt;br&gt; 7  &#x3D; บัญชีฝากประจำ
        /// </summary>
        /// <value>ประเภทบัญชีธนาคาร &lt;br&gt; 1 &#x3D; บัญชีออมทรัพย์  &lt;br&gt; 3 &#x3D; บัญชีกระรายวัน &lt;br&gt; 7  &#x3D; บัญชีฝากประจำ</value>
        [DataMember(Name="bankAccountType", EmitDefaultValue=true)]
        public long BankAccountType { get; set; }

        /// <summary>
        /// ชื่อสาขาธนาคาร
        /// </summary>
        /// <value>ชื่อสาขาธนาคาร</value>
        [DataMember(Name="bankBranch", EmitDefaultValue=true)]
        public string BankBranch { get; set; }

        /// <summary>
        /// เลข id ธนาคาร
        /// </summary>
        /// <value>เลข id ธนาคาร</value>
        [DataMember(Name="bankId", EmitDefaultValue=true)]
        public long BankId { get; set; }

        /// <summary>
        /// ชื่อธนาคาร
        /// </summary>
        /// <value>ชื่อธนาคาร</value>
        [DataMember(Name="bankName", EmitDefaultValue=true)]
        public string BankName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BankAccountResponse {\n");
            sb.Append("  BankAccountId: ").Append(BankAccountId).Append("\n");
            sb.Append("  BankAccountNumber: ").Append(BankAccountNumber).Append("\n");
            sb.Append("  BankAccountName: ").Append(BankAccountName).Append("\n");
            sb.Append("  BankAccountType: ").Append(BankAccountType).Append("\n");
            sb.Append("  BankBranch: ").Append(BankBranch).Append("\n");
            sb.Append("  BankId: ").Append(BankId).Append("\n");
            sb.Append("  BankName: ").Append(BankName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BankAccountResponse);
        }

        /// <summary>
        /// Returns true if BankAccountResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of BankAccountResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BankAccountResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BankAccountId == input.BankAccountId ||
                    (this.BankAccountId != null &&
                    this.BankAccountId.Equals(input.BankAccountId))
                ) && 
                (
                    this.BankAccountNumber == input.BankAccountNumber ||
                    (this.BankAccountNumber != null &&
                    this.BankAccountNumber.Equals(input.BankAccountNumber))
                ) && 
                (
                    this.BankAccountName == input.BankAccountName ||
                    (this.BankAccountName != null &&
                    this.BankAccountName.Equals(input.BankAccountName))
                ) && 
                (
                    this.BankAccountType == input.BankAccountType ||
                    (this.BankAccountType != null &&
                    this.BankAccountType.Equals(input.BankAccountType))
                ) && 
                (
                    this.BankBranch == input.BankBranch ||
                    (this.BankBranch != null &&
                    this.BankBranch.Equals(input.BankBranch))
                ) && 
                (
                    this.BankId == input.BankId ||
                    (this.BankId != null &&
                    this.BankId.Equals(input.BankId))
                ) && 
                (
                    this.BankName == input.BankName ||
                    (this.BankName != null &&
                    this.BankName.Equals(input.BankName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BankAccountId != null)
                    hashCode = hashCode * 59 + this.BankAccountId.GetHashCode();
                if (this.BankAccountNumber != null)
                    hashCode = hashCode * 59 + this.BankAccountNumber.GetHashCode();
                if (this.BankAccountName != null)
                    hashCode = hashCode * 59 + this.BankAccountName.GetHashCode();
                if (this.BankAccountType != null)
                    hashCode = hashCode * 59 + this.BankAccountType.GetHashCode();
                if (this.BankBranch != null)
                    hashCode = hashCode * 59 + this.BankBranch.GetHashCode();
                if (this.BankId != null)
                    hashCode = hashCode * 59 + this.BankId.GetHashCode();
                if (this.BankName != null)
                    hashCode = hashCode * 59 + this.BankName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
