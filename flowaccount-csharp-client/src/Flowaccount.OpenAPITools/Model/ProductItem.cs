/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using JsonSubTypes;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// ProductItem
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "DocumentStructureType")]
    [JsonSubtypes.KnownSubType(typeof(InlineProductItem), "InlineProductItem")]
    [JsonSubtypes.KnownSubType(typeof(SimpleProductItem), "SimpleProductItem")]
    public partial class ProductItem :  IEquatable<ProductItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductItem" /> class.
        /// </summary>
        /// <param name="documentStructureType">documentStructureType (required).</param>
        /// <param name="type">ประเภทสินค้า &lt;br&gt; 1 &#x3D; บริการ (service) &lt;br&gt; 3 &#x3D; สินค้าไม่นับสต๊อก (non inventory) &lt;br&gt; 5 &#x3D; สินค้านับสต๊อก (inventory) (default to 1).</param>
        /// <param name="name">ชื่อสินค้า (required).</param>
        /// <param name="description">รายละเอียดสินค้า.</param>
        /// <param name="quantity">จำนวนสินค้า (required).</param>
        /// <param name="unitName">หน่วยสินค้า.</param>
        /// <param name="pricePerUnit">ราคาสินค้าต่อหน่วย (required).</param>
        /// <param name="total">ราคารวมสินค้า (required).</param>
        public ProductItem(string documentStructureType = default(string), int type = 1, string name = default(string), string description = default(string), decimal quantity = default(decimal), string unitName = default(string), decimal pricePerUnit = default(decimal), decimal total = default(decimal))
        {
            // to ensure "documentStructureType" is required (not null)
            if (documentStructureType == null)
            {
                throw new InvalidDataException("documentStructureType is a required property for ProductItem and cannot be null");
            }
            else
            {
                this.DocumentStructureType = documentStructureType;
            }
            
            this.DocumentStructureType = documentStructureType;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for ProductItem and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for ProductItem and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            
            // to ensure "pricePerUnit" is required (not null)
            if (pricePerUnit == null)
            {
                throw new InvalidDataException("pricePerUnit is a required property for ProductItem and cannot be null");
            }
            else
            {
                this.PricePerUnit = pricePerUnit;
            }
            
            // to ensure "total" is required (not null)
            if (total == null)
            {
                throw new InvalidDataException("total is a required property for ProductItem and cannot be null");
            }
            else
            {
                this.Total = total;
            }
            
            // use default value if no "type" provided
            if (type == null)
            {
                this.Type = 1;
            }
            else
            {
                this.Type = type;
            }
            this.Description = description;
            this.UnitName = unitName;
        }
        
        /// <summary>
        /// Gets or Sets DocumentStructureType
        /// </summary>
        [DataMember(Name="documentStructureType", EmitDefaultValue=true)]
        public string DocumentStructureType { get; set; }

        /// <summary>
        /// ประเภทสินค้า &lt;br&gt; 1 &#x3D; บริการ (service) &lt;br&gt; 3 &#x3D; สินค้าไม่นับสต๊อก (non inventory) &lt;br&gt; 5 &#x3D; สินค้านับสต๊อก (inventory)
        /// </summary>
        /// <value>ประเภทสินค้า &lt;br&gt; 1 &#x3D; บริการ (service) &lt;br&gt; 3 &#x3D; สินค้าไม่นับสต๊อก (non inventory) &lt;br&gt; 5 &#x3D; สินค้านับสต๊อก (inventory)</value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public int Type { get; set; }

        /// <summary>
        /// ชื่อสินค้า
        /// </summary>
        /// <value>ชื่อสินค้า</value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// รายละเอียดสินค้า
        /// </summary>
        /// <value>รายละเอียดสินค้า</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// จำนวนสินค้า
        /// </summary>
        /// <value>จำนวนสินค้า</value>
        [DataMember(Name="quantity", EmitDefaultValue=true)]
        public decimal Quantity { get; set; }

        /// <summary>
        /// หน่วยสินค้า
        /// </summary>
        /// <value>หน่วยสินค้า</value>
        [DataMember(Name="unitName", EmitDefaultValue=true)]
        public string UnitName { get; set; }

        /// <summary>
        /// ราคาสินค้าต่อหน่วย
        /// </summary>
        /// <value>ราคาสินค้าต่อหน่วย</value>
        [DataMember(Name="pricePerUnit", EmitDefaultValue=true)]
        public decimal PricePerUnit { get; set; }

        /// <summary>
        /// ราคารวมสินค้า
        /// </summary>
        /// <value>ราคารวมสินค้า</value>
        [DataMember(Name="total", EmitDefaultValue=true)]
        public decimal Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductItem {\n");
            sb.Append("  DocumentStructureType: ").Append(DocumentStructureType).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  UnitName: ").Append(UnitName).Append("\n");
            sb.Append("  PricePerUnit: ").Append(PricePerUnit).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductItem);
        }

        /// <summary>
        /// Returns true if ProductItem instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DocumentStructureType == input.DocumentStructureType ||
                    (this.DocumentStructureType != null &&
                    this.DocumentStructureType.Equals(input.DocumentStructureType))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.UnitName == input.UnitName ||
                    (this.UnitName != null &&
                    this.UnitName.Equals(input.UnitName))
                ) && 
                (
                    this.PricePerUnit == input.PricePerUnit ||
                    (this.PricePerUnit != null &&
                    this.PricePerUnit.Equals(input.PricePerUnit))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DocumentStructureType != null)
                    hashCode = hashCode * 59 + this.DocumentStructureType.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.UnitName != null)
                    hashCode = hashCode * 59 + this.UnitName.GetHashCode();
                if (this.PricePerUnit != null)
                    hashCode = hashCode * 59 + this.PricePerUnit.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            // UnitName (string) maxLength
            if(this.UnitName != null && this.UnitName.Length > 7)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UnitName, length must be less than 7.", new [] { "UnitName" });
            }

            yield break;
        }
    }

}
