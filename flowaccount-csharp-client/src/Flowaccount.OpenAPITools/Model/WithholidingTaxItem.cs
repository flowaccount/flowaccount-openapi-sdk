/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Flowaccount.OpenAPITools.Client.OpenAPIDateConverter;

namespace Flowaccount.OpenAPITools.Model
{
    /// <summary>
    /// WithholidingTaxItem
    /// </summary>
    [DataContract]
    public partial class WithholidingTaxItem :  IEquatable<WithholidingTaxItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WithholidingTaxItem" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WithholidingTaxItem() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WithholidingTaxItem" /> class.
        /// </summary>
        /// <param name="incomeType">ประเภทเงินได้ที่จ่าย &lt;br&gt; 1 &#x3D; 1. เงินเดือน ค่าจ้าง เบี้ยเลี้ยง โบนัส ฯลฯ ตามมาตรา 40 (1) &lt;br&gt; 3 &#x3D; 2. ค่าธรรมเนียม ค่านายหน้า ฯลฯ ตามมาตรา 40 (2) &lt;br&gt; 5 &#x3D; 3. ค่าแห่งลิขสิทธิ์ ฯลฯ ตามมาตรา 40(3) &lt;br&gt; 7 &#x3D; 4. (ก) ค่าดอกเบี้ย ฯลฯ ตามมาตรา 40(4) (ก) &lt;br&gt; 11 &#x3D; 4. (ข)(1.1) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราร้อยละ 25 ของกำไรสุทธิ &lt;br&gt; 13 &#x3D; 4. (ข)(1.2) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราร้อยละ 20 ของกำไรสุทธิ &lt;br&gt; 15 &#x3D; 4. (ข)(1.3) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราอื่น ของกำไรสุทธิ (กรุณาระบุ) &lt;br&gt; 17 &#x3D; 4. (ข)(2.1) กำไรสุทธิของกิจการที่ได้รับยกเว้นเงินได้นิติบุคคล &lt;br&gt; 19 &#x3D; 4. (ข)(2.2) เงินปันผลหรือเงินส่วนแบ่งของกำไรที่ได้รับยกเว้น... &lt;br&gt; 21 &#x3D; 4. (ข)(2.3) กำไรสุทธิส่วนที่ได้หักผลขาดทุนสิทธิยกมาไม่เกิน 5 ปี... &lt;br&gt; 23 &#x3D; 4. (ข)(2.4) กำไรที่รับรู้ทางบัญชีโดยวิธีส่วนได้เสีย (equity method) &lt;br&gt; 25 &#x3D; 4. (ข)(2.5) อื่นๆ (กรุณาระบุ) &lt;br&gt; 27 &#x3D; 5. การจ่ายเงินได้ที่ต้องหักภาษี ณ ที่จ่ายตามคำสั่งกรมสรรพากร.... &lt;br&gt; 29 &#x3D; 6. อื่นๆ (กรุณาระบุ) (required) (default to 1).</param>
        /// <param name="description">รายละเอียดหัก ณ ที่จ่าย &lt;br&gt; สำหรับประเภทเงินได้ที่จ่าย ข้อ 4.(ข)(2.5) อื่นๆ และ ข้อ 6. อื่นๆ.</param>
        /// <param name="taxRate">อัตราภาษี หัก ณ ที่จ่าย &lt;br&gt; 3 &#x3D; อัตราภาษี 3% &lt;br&gt; 5 &#x3D; อัตราภาษี 5% &lt;br&gt; 0.5 &#x3D; อัตราภาษี 0.5% &lt;br&gt; 0.75 &#x3D; อัตราภาษี 0.75% &lt;br&gt; 1 &#x3D; อัตราภาษี 1% &lt;br&gt; 2 &#x3D; อัตราภาษี 2% &lt;br&gt; 10 &#x3D; อัตราภาษี 10% &lt;br&gt; 15 &#x3D; อัตราภาษี 15% &lt;br&gt; -1 &#x3D; อัตราภาษีเป็นแบบจำนวนเงิน (required).</param>
        /// <param name="taxAmount">จำนวนเงินที่นำมาหักภาษี (required).</param>
        /// <param name="taxAmountNoVat">จำนวนเงินไม่รวมภาษีมูลค่าเพิ่ม (required).</param>
        /// <param name="withheld">จำนวนเงินภาษีหัก ณ ที่จ่าย (required).</param>
        /// <param name="total">จำนวนเงินหลังหักภาษี ณ ที่จ่าย (taxAmount - withheld &#x3D; total).</param>
        /// <param name="vatType">ภาษีมูลค่าเพิ่ม &lt;br&gt; 1 &#x3D; รวมภาษีมูลค่าเพิ่ม &lt;br&gt; 3 &#x3D; ไม่รวมภาษีมูลค่าเพิ่ม &lt;br&gt;7 &#x3D; ไม่มี/ยกเว้นภาษีมูลค่าเพิ่ม (required) (default to 1).</param>
        public WithholidingTaxItem(int incomeType = 1, string description = default(string), decimal taxRate = default(decimal), decimal taxAmount = default(decimal), decimal taxAmountNoVat = default(decimal), decimal withheld = default(decimal), decimal total = default(decimal), int vatType = 1)
        {
            // to ensure "incomeType" is required (not null)
            if (incomeType == null)
            {
                throw new InvalidDataException("incomeType is a required property for WithholidingTaxItem and cannot be null");
            }
            else
            {
                this.IncomeType = incomeType;
            }
            
            // to ensure "taxRate" is required (not null)
            if (taxRate == null)
            {
                throw new InvalidDataException("taxRate is a required property for WithholidingTaxItem and cannot be null");
            }
            else
            {
                this.TaxRate = taxRate;
            }
            
            // to ensure "taxAmount" is required (not null)
            if (taxAmount == null)
            {
                throw new InvalidDataException("taxAmount is a required property for WithholidingTaxItem and cannot be null");
            }
            else
            {
                this.TaxAmount = taxAmount;
            }
            
            // to ensure "taxAmountNoVat" is required (not null)
            if (taxAmountNoVat == null)
            {
                throw new InvalidDataException("taxAmountNoVat is a required property for WithholidingTaxItem and cannot be null");
            }
            else
            {
                this.TaxAmountNoVat = taxAmountNoVat;
            }
            
            // to ensure "withheld" is required (not null)
            if (withheld == null)
            {
                throw new InvalidDataException("withheld is a required property for WithholidingTaxItem and cannot be null");
            }
            else
            {
                this.Withheld = withheld;
            }
            
            // to ensure "vatType" is required (not null)
            if (vatType == null)
            {
                throw new InvalidDataException("vatType is a required property for WithholidingTaxItem and cannot be null");
            }
            else
            {
                this.VatType = vatType;
            }
            
            this.Description = description;
            this.Total = total;
        }
        
        /// <summary>
        /// ประเภทเงินได้ที่จ่าย &lt;br&gt; 1 &#x3D; 1. เงินเดือน ค่าจ้าง เบี้ยเลี้ยง โบนัส ฯลฯ ตามมาตรา 40 (1) &lt;br&gt; 3 &#x3D; 2. ค่าธรรมเนียม ค่านายหน้า ฯลฯ ตามมาตรา 40 (2) &lt;br&gt; 5 &#x3D; 3. ค่าแห่งลิขสิทธิ์ ฯลฯ ตามมาตรา 40(3) &lt;br&gt; 7 &#x3D; 4. (ก) ค่าดอกเบี้ย ฯลฯ ตามมาตรา 40(4) (ก) &lt;br&gt; 11 &#x3D; 4. (ข)(1.1) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราร้อยละ 25 ของกำไรสุทธิ &lt;br&gt; 13 &#x3D; 4. (ข)(1.2) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราร้อยละ 20 ของกำไรสุทธิ &lt;br&gt; 15 &#x3D; 4. (ข)(1.3) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราอื่น ของกำไรสุทธิ (กรุณาระบุ) &lt;br&gt; 17 &#x3D; 4. (ข)(2.1) กำไรสุทธิของกิจการที่ได้รับยกเว้นเงินได้นิติบุคคล &lt;br&gt; 19 &#x3D; 4. (ข)(2.2) เงินปันผลหรือเงินส่วนแบ่งของกำไรที่ได้รับยกเว้น... &lt;br&gt; 21 &#x3D; 4. (ข)(2.3) กำไรสุทธิส่วนที่ได้หักผลขาดทุนสิทธิยกมาไม่เกิน 5 ปี... &lt;br&gt; 23 &#x3D; 4. (ข)(2.4) กำไรที่รับรู้ทางบัญชีโดยวิธีส่วนได้เสีย (equity method) &lt;br&gt; 25 &#x3D; 4. (ข)(2.5) อื่นๆ (กรุณาระบุ) &lt;br&gt; 27 &#x3D; 5. การจ่ายเงินได้ที่ต้องหักภาษี ณ ที่จ่ายตามคำสั่งกรมสรรพากร.... &lt;br&gt; 29 &#x3D; 6. อื่นๆ (กรุณาระบุ)
        /// </summary>
        /// <value>ประเภทเงินได้ที่จ่าย &lt;br&gt; 1 &#x3D; 1. เงินเดือน ค่าจ้าง เบี้ยเลี้ยง โบนัส ฯลฯ ตามมาตรา 40 (1) &lt;br&gt; 3 &#x3D; 2. ค่าธรรมเนียม ค่านายหน้า ฯลฯ ตามมาตรา 40 (2) &lt;br&gt; 5 &#x3D; 3. ค่าแห่งลิขสิทธิ์ ฯลฯ ตามมาตรา 40(3) &lt;br&gt; 7 &#x3D; 4. (ก) ค่าดอกเบี้ย ฯลฯ ตามมาตรา 40(4) (ก) &lt;br&gt; 11 &#x3D; 4. (ข)(1.1) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราร้อยละ 25 ของกำไรสุทธิ &lt;br&gt; 13 &#x3D; 4. (ข)(1.2) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราร้อยละ 20 ของกำไรสุทธิ &lt;br&gt; 15 &#x3D; 4. (ข)(1.3) กิจการที่ต้องเสียภาษีเงินได้นิติบุคคลในอัตราอื่น ของกำไรสุทธิ (กรุณาระบุ) &lt;br&gt; 17 &#x3D; 4. (ข)(2.1) กำไรสุทธิของกิจการที่ได้รับยกเว้นเงินได้นิติบุคคล &lt;br&gt; 19 &#x3D; 4. (ข)(2.2) เงินปันผลหรือเงินส่วนแบ่งของกำไรที่ได้รับยกเว้น... &lt;br&gt; 21 &#x3D; 4. (ข)(2.3) กำไรสุทธิส่วนที่ได้หักผลขาดทุนสิทธิยกมาไม่เกิน 5 ปี... &lt;br&gt; 23 &#x3D; 4. (ข)(2.4) กำไรที่รับรู้ทางบัญชีโดยวิธีส่วนได้เสีย (equity method) &lt;br&gt; 25 &#x3D; 4. (ข)(2.5) อื่นๆ (กรุณาระบุ) &lt;br&gt; 27 &#x3D; 5. การจ่ายเงินได้ที่ต้องหักภาษี ณ ที่จ่ายตามคำสั่งกรมสรรพากร.... &lt;br&gt; 29 &#x3D; 6. อื่นๆ (กรุณาระบุ)</value>
        [DataMember(Name="incomeType", EmitDefaultValue=true)]
        public int IncomeType { get; set; }

        /// <summary>
        /// รายละเอียดหัก ณ ที่จ่าย &lt;br&gt; สำหรับประเภทเงินได้ที่จ่าย ข้อ 4.(ข)(2.5) อื่นๆ และ ข้อ 6. อื่นๆ
        /// </summary>
        /// <value>รายละเอียดหัก ณ ที่จ่าย &lt;br&gt; สำหรับประเภทเงินได้ที่จ่าย ข้อ 4.(ข)(2.5) อื่นๆ และ ข้อ 6. อื่นๆ</value>
        [DataMember(Name="description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// อัตราภาษี หัก ณ ที่จ่าย &lt;br&gt; 3 &#x3D; อัตราภาษี 3% &lt;br&gt; 5 &#x3D; อัตราภาษี 5% &lt;br&gt; 0.5 &#x3D; อัตราภาษี 0.5% &lt;br&gt; 0.75 &#x3D; อัตราภาษี 0.75% &lt;br&gt; 1 &#x3D; อัตราภาษี 1% &lt;br&gt; 2 &#x3D; อัตราภาษี 2% &lt;br&gt; 10 &#x3D; อัตราภาษี 10% &lt;br&gt; 15 &#x3D; อัตราภาษี 15% &lt;br&gt; -1 &#x3D; อัตราภาษีเป็นแบบจำนวนเงิน
        /// </summary>
        /// <value>อัตราภาษี หัก ณ ที่จ่าย &lt;br&gt; 3 &#x3D; อัตราภาษี 3% &lt;br&gt; 5 &#x3D; อัตราภาษี 5% &lt;br&gt; 0.5 &#x3D; อัตราภาษี 0.5% &lt;br&gt; 0.75 &#x3D; อัตราภาษี 0.75% &lt;br&gt; 1 &#x3D; อัตราภาษี 1% &lt;br&gt; 2 &#x3D; อัตราภาษี 2% &lt;br&gt; 10 &#x3D; อัตราภาษี 10% &lt;br&gt; 15 &#x3D; อัตราภาษี 15% &lt;br&gt; -1 &#x3D; อัตราภาษีเป็นแบบจำนวนเงิน</value>
        [DataMember(Name="taxRate", EmitDefaultValue=true)]
        public decimal TaxRate { get; set; }

        /// <summary>
        /// จำนวนเงินที่นำมาหักภาษี
        /// </summary>
        /// <value>จำนวนเงินที่นำมาหักภาษี</value>
        [DataMember(Name="taxAmount", EmitDefaultValue=true)]
        public decimal TaxAmount { get; set; }

        /// <summary>
        /// จำนวนเงินไม่รวมภาษีมูลค่าเพิ่ม
        /// </summary>
        /// <value>จำนวนเงินไม่รวมภาษีมูลค่าเพิ่ม</value>
        [DataMember(Name="taxAmountNoVat", EmitDefaultValue=true)]
        public decimal TaxAmountNoVat { get; set; }

        /// <summary>
        /// จำนวนเงินภาษีหัก ณ ที่จ่าย
        /// </summary>
        /// <value>จำนวนเงินภาษีหัก ณ ที่จ่าย</value>
        [DataMember(Name="withheld", EmitDefaultValue=true)]
        public decimal Withheld { get; set; }

        /// <summary>
        /// จำนวนเงินหลังหักภาษี ณ ที่จ่าย (taxAmount - withheld &#x3D; total)
        /// </summary>
        /// <value>จำนวนเงินหลังหักภาษี ณ ที่จ่าย (taxAmount - withheld &#x3D; total)</value>
        [DataMember(Name="total", EmitDefaultValue=true)]
        public decimal Total { get; set; }

        /// <summary>
        /// ภาษีมูลค่าเพิ่ม &lt;br&gt; 1 &#x3D; รวมภาษีมูลค่าเพิ่ม &lt;br&gt; 3 &#x3D; ไม่รวมภาษีมูลค่าเพิ่ม &lt;br&gt;7 &#x3D; ไม่มี/ยกเว้นภาษีมูลค่าเพิ่ม
        /// </summary>
        /// <value>ภาษีมูลค่าเพิ่ม &lt;br&gt; 1 &#x3D; รวมภาษีมูลค่าเพิ่ม &lt;br&gt; 3 &#x3D; ไม่รวมภาษีมูลค่าเพิ่ม &lt;br&gt;7 &#x3D; ไม่มี/ยกเว้นภาษีมูลค่าเพิ่ม</value>
        [DataMember(Name="vatType", EmitDefaultValue=true)]
        public int VatType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WithholidingTaxItem {\n");
            sb.Append("  IncomeType: ").Append(IncomeType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  TaxRate: ").Append(TaxRate).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  TaxAmountNoVat: ").Append(TaxAmountNoVat).Append("\n");
            sb.Append("  Withheld: ").Append(Withheld).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  VatType: ").Append(VatType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WithholidingTaxItem);
        }

        /// <summary>
        /// Returns true if WithholidingTaxItem instances are equal
        /// </summary>
        /// <param name="input">Instance of WithholidingTaxItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WithholidingTaxItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IncomeType == input.IncomeType ||
                    (this.IncomeType != null &&
                    this.IncomeType.Equals(input.IncomeType))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.TaxRate == input.TaxRate ||
                    (this.TaxRate != null &&
                    this.TaxRate.Equals(input.TaxRate))
                ) && 
                (
                    this.TaxAmount == input.TaxAmount ||
                    (this.TaxAmount != null &&
                    this.TaxAmount.Equals(input.TaxAmount))
                ) && 
                (
                    this.TaxAmountNoVat == input.TaxAmountNoVat ||
                    (this.TaxAmountNoVat != null &&
                    this.TaxAmountNoVat.Equals(input.TaxAmountNoVat))
                ) && 
                (
                    this.Withheld == input.Withheld ||
                    (this.Withheld != null &&
                    this.Withheld.Equals(input.Withheld))
                ) && 
                (
                    this.Total == input.Total ||
                    (this.Total != null &&
                    this.Total.Equals(input.Total))
                ) && 
                (
                    this.VatType == input.VatType ||
                    (this.VatType != null &&
                    this.VatType.Equals(input.VatType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IncomeType != null)
                    hashCode = hashCode * 59 + this.IncomeType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.TaxRate != null)
                    hashCode = hashCode * 59 + this.TaxRate.GetHashCode();
                if (this.TaxAmount != null)
                    hashCode = hashCode * 59 + this.TaxAmount.GetHashCode();
                if (this.TaxAmountNoVat != null)
                    hashCode = hashCode * 59 + this.TaxAmountNoVat.GetHashCode();
                if (this.Withheld != null)
                    hashCode = hashCode * 59 + this.Withheld.GetHashCode();
                if (this.Total != null)
                    hashCode = hashCode * 59 + this.Total.GetHashCode();
                if (this.VatType != null)
                    hashCode = hashCode * 59 + this.VatType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
