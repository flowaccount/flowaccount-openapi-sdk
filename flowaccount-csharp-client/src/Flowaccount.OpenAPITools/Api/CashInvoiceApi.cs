/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flowaccount.OpenAPITools.Client;
using Flowaccount.OpenAPITools.Model;

namespace Flowaccount.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICashInvoiceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send email cash invoices document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>SendEmailResponse</returns>
        SendEmailResponse CashInvoicesEmailDocumentPost (string authorization, SendEmailCoppies sendEmailCoppies);

        /// <summary>
        /// Send email cash invoices document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>ApiResponse of SendEmailResponse</returns>
        ApiResponse<SendEmailResponse> CashInvoicesEmailDocumentPostWithHttpInfo (string authorization, SendEmailCoppies sendEmailCoppies);
        /// <summary>
        /// Get list all cash invoices documents
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document cash invoices. &lt;br&gt;Example Pattern: &lt;ex&gt;/cash-invoices?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/cash-invoices?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document cash invoices list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /cash-invoices?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse CashInvoicesGet (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));

        /// <summary>
        /// Get list all cash invoices documents
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document cash invoices. &lt;br&gt;Example Pattern: &lt;ex&gt;/cash-invoices?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/cash-invoices?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document cash invoices list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /cash-invoices?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> CashInvoicesGetWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));
        /// <summary>
        /// Add Attachment to cash invoices document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse CashInvoicesIdAttachmentPost (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Add Attachment to cash invoices document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> CashInvoicesIdAttachmentPostWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Get cash invoices document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารใบกำกับ/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>DeleteResponse</returns>
        DeleteResponse CashInvoicesIdDelete (string authorization, string id);

        /// <summary>
        /// Get cash invoices document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารใบกำกับ/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        ApiResponse<DeleteResponse> CashInvoicesIdDeleteWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Get cash invoices document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse CashInvoicesIdGet (string authorization, string id);

        /// <summary>
        /// Get cash invoices document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> CashInvoicesIdGetWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Change paid status of cash invoices document.
        /// </summary>
        /// <remarks>
        /// เก็บเงิน เอกสารพร้อมเปลี่ยนสถานะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentDocument"></param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse CashInvoicesIdPaymentPost (string authorization, string id, PaymentDocument paymentDocument);

        /// <summary>
        /// Change paid status of cash invoices document.
        /// </summary>
        /// <remarks>
        /// เก็บเงิน เอกสารพร้อมเปลี่ยนสถานะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentDocument"></param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> CashInvoicesIdPaymentPostWithHttpInfo (string authorization, string id, PaymentDocument paymentDocument);
        /// <summary>
        /// Change status of cash invoices document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; invoicedelivered &#x3D; รอเก็บเงิน &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse CashInvoicesIdStatusKeyStatusIdPost (string authorization, string id, string statusId);

        /// <summary>
        /// Change status of cash invoices document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; invoicedelivered &#x3D; รอเก็บเงิน &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> CashInvoicesIdStatusKeyStatusIdPostWithHttpInfo (string authorization, string id, string statusId);
        /// <summary>
        /// Create cash invoices document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse CashInvoicesInlinePost (string authorization, InlineDocument inlineDocument);

        /// <summary>
        /// Create cash invoices document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> CashInvoicesInlinePostWithHttpInfo (string authorization, InlineDocument inlineDocument);
        /// <summary>
        /// Create cash invoices document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>SimpleDocumentResponse</returns>
        SimpleDocumentResponse CashInvoicesPost (string authorization, SimpleDocument simpleDocument);

        /// <summary>
        /// Create cash invoices document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>ApiResponse of SimpleDocumentResponse</returns>
        ApiResponse<SimpleDocumentResponse> CashInvoicesPostWithHttpInfo (string authorization, SimpleDocument simpleDocument);
        /// <summary>
        /// Share link cash invoices document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ShareDocumentResponse</returns>
        ShareDocumentResponse CashInvoicesSharedocumentPost (string authorization, ShareDocument shareDocument);

        /// <summary>
        /// Share link cash invoices document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ApiResponse of ShareDocumentResponse</returns>
        ApiResponse<ShareDocumentResponse> CashInvoicesSharedocumentPostWithHttpInfo (string authorization, ShareDocument shareDocument);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Send email cash invoices document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>Task of SendEmailResponse</returns>
        System.Threading.Tasks.Task<SendEmailResponse> CashInvoicesEmailDocumentPostAsync (string authorization, SendEmailCoppies sendEmailCoppies);

        /// <summary>
        /// Send email cash invoices document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>Task of ApiResponse (SendEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendEmailResponse>> CashInvoicesEmailDocumentPostAsyncWithHttpInfo (string authorization, SendEmailCoppies sendEmailCoppies);
        /// <summary>
        /// Get list all cash invoices documents
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document cash invoices. &lt;br&gt;Example Pattern: &lt;ex&gt;/cash-invoices?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/cash-invoices?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document cash invoices list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /cash-invoices?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> CashInvoicesGetAsync (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));

        /// <summary>
        /// Get list all cash invoices documents
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document cash invoices. &lt;br&gt;Example Pattern: &lt;ex&gt;/cash-invoices?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/cash-invoices?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document cash invoices list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /cash-invoices?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> CashInvoicesGetAsyncWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));
        /// <summary>
        /// Add Attachment to cash invoices document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> CashInvoicesIdAttachmentPostAsync (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Add Attachment to cash invoices document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> CashInvoicesIdAttachmentPostAsyncWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Get cash invoices document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารใบกำกับ/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> CashInvoicesIdDeleteAsync (string authorization, string id);

        /// <summary>
        /// Get cash invoices document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารใบกำกับ/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> CashInvoicesIdDeleteAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Get cash invoices document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> CashInvoicesIdGetAsync (string authorization, string id);

        /// <summary>
        /// Get cash invoices document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> CashInvoicesIdGetAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Change paid status of cash invoices document.
        /// </summary>
        /// <remarks>
        /// เก็บเงิน เอกสารพร้อมเปลี่ยนสถานะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentDocument"></param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> CashInvoicesIdPaymentPostAsync (string authorization, string id, PaymentDocument paymentDocument);

        /// <summary>
        /// Change paid status of cash invoices document.
        /// </summary>
        /// <remarks>
        /// เก็บเงิน เอกสารพร้อมเปลี่ยนสถานะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentDocument"></param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> CashInvoicesIdPaymentPostAsyncWithHttpInfo (string authorization, string id, PaymentDocument paymentDocument);
        /// <summary>
        /// Change status of cash invoices document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; invoicedelivered &#x3D; รอเก็บเงิน &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> CashInvoicesIdStatusKeyStatusIdPostAsync (string authorization, string id, string statusId);

        /// <summary>
        /// Change status of cash invoices document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; invoicedelivered &#x3D; รอเก็บเงิน &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> CashInvoicesIdStatusKeyStatusIdPostAsyncWithHttpInfo (string authorization, string id, string statusId);
        /// <summary>
        /// Create cash invoices document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> CashInvoicesInlinePostAsync (string authorization, InlineDocument inlineDocument);

        /// <summary>
        /// Create cash invoices document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> CashInvoicesInlinePostAsyncWithHttpInfo (string authorization, InlineDocument inlineDocument);
        /// <summary>
        /// Create cash invoices document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>Task of SimpleDocumentResponse</returns>
        System.Threading.Tasks.Task<SimpleDocumentResponse> CashInvoicesPostAsync (string authorization, SimpleDocument simpleDocument);

        /// <summary>
        /// Create cash invoices document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>Task of ApiResponse (SimpleDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleDocumentResponse>> CashInvoicesPostAsyncWithHttpInfo (string authorization, SimpleDocument simpleDocument);
        /// <summary>
        /// Share link cash invoices document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ShareDocumentResponse</returns>
        System.Threading.Tasks.Task<ShareDocumentResponse> CashInvoicesSharedocumentPostAsync (string authorization, ShareDocument shareDocument);

        /// <summary>
        /// Share link cash invoices document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ApiResponse (ShareDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShareDocumentResponse>> CashInvoicesSharedocumentPostAsyncWithHttpInfo (string authorization, ShareDocument shareDocument);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CashInvoiceApi : ICashInvoiceApi
    {
        private Flowaccount.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CashInvoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CashInvoiceApi(String basePath)
        {
            this.Configuration = new Flowaccount.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CashInvoiceApi"/> class
        /// </summary>
        /// <returns></returns>
        public CashInvoiceApi()
        {
            this.Configuration = Flowaccount.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CashInvoiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CashInvoiceApi(Flowaccount.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flowaccount.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flowaccount.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flowaccount.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Send email cash invoices document. ส่งเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>SendEmailResponse</returns>
        public SendEmailResponse CashInvoicesEmailDocumentPost (string authorization, SendEmailCoppies sendEmailCoppies)
        {
             ApiResponse<SendEmailResponse> localVarResponse = CashInvoicesEmailDocumentPostWithHttpInfo(authorization, sendEmailCoppies);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send email cash invoices document. ส่งเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>ApiResponse of SendEmailResponse</returns>
        public ApiResponse<SendEmailResponse> CashInvoicesEmailDocumentPostWithHttpInfo (string authorization, SendEmailCoppies sendEmailCoppies)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesEmailDocumentPost");
            // verify the required parameter 'sendEmailCoppies' is set
            if (sendEmailCoppies == null)
                throw new ApiException(400, "Missing required parameter 'sendEmailCoppies' when calling CashInvoiceApi->CashInvoicesEmailDocumentPost");

            var localVarPath = "/cash-invoices/email-document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (sendEmailCoppies != null && sendEmailCoppies.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendEmailCoppies); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendEmailCoppies; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesEmailDocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendEmailResponse)));
        }

        /// <summary>
        /// Send email cash invoices document. ส่งเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>Task of SendEmailResponse</returns>
        public async System.Threading.Tasks.Task<SendEmailResponse> CashInvoicesEmailDocumentPostAsync (string authorization, SendEmailCoppies sendEmailCoppies)
        {
             ApiResponse<SendEmailResponse> localVarResponse = await CashInvoicesEmailDocumentPostAsyncWithHttpInfo(authorization, sendEmailCoppies);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send email cash invoices document. ส่งเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>Task of ApiResponse (SendEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendEmailResponse>> CashInvoicesEmailDocumentPostAsyncWithHttpInfo (string authorization, SendEmailCoppies sendEmailCoppies)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesEmailDocumentPost");
            // verify the required parameter 'sendEmailCoppies' is set
            if (sendEmailCoppies == null)
                throw new ApiException(400, "Missing required parameter 'sendEmailCoppies' when calling CashInvoiceApi->CashInvoicesEmailDocumentPost");

            var localVarPath = "/cash-invoices/email-document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (sendEmailCoppies != null && sendEmailCoppies.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendEmailCoppies); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendEmailCoppies; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesEmailDocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendEmailResponse)));
        }

        /// <summary>
        /// Get list all cash invoices documents เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document cash invoices. &lt;br&gt;Example Pattern: &lt;ex&gt;/cash-invoices?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/cash-invoices?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document cash invoices list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /cash-invoices?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse CashInvoicesGet (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = CashInvoicesGetWithHttpInfo(currentPage, pageSize, authorization, sortBy, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list all cash invoices documents เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document cash invoices. &lt;br&gt;Example Pattern: &lt;ex&gt;/cash-invoices?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/cash-invoices?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document cash invoices list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /cash-invoices?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> CashInvoicesGetWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
            // verify the required parameter 'currentPage' is set
            if (currentPage == null)
                throw new ApiException(400, "Missing required parameter 'currentPage' when calling CashInvoiceApi->CashInvoicesGet");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling CashInvoiceApi->CashInvoicesGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesGet");

            var localVarPath = "/cash-invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Get list all cash invoices documents เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document cash invoices. &lt;br&gt;Example Pattern: &lt;ex&gt;/cash-invoices?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/cash-invoices?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document cash invoices list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /cash-invoices?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> CashInvoicesGetAsync (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await CashInvoicesGetAsyncWithHttpInfo(currentPage, pageSize, authorization, sortBy, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list all cash invoices documents เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document cash invoices. &lt;br&gt;Example Pattern: &lt;ex&gt;/cash-invoices?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/cash-invoices?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document cash invoices list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /cash-invoices?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> CashInvoicesGetAsyncWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
            // verify the required parameter 'currentPage' is set
            if (currentPage == null)
                throw new ApiException(400, "Missing required parameter 'currentPage' when calling CashInvoiceApi->CashInvoicesGet");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling CashInvoiceApi->CashInvoicesGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesGet");

            var localVarPath = "/cash-invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Add Attachment to cash invoices document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse CashInvoicesIdAttachmentPost (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
             ApiResponse<AttachmentResponse> localVarResponse = CashInvoicesIdAttachmentPostWithHttpInfo(authorization, id, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Attachment to cash invoices document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse<AttachmentResponse> CashInvoicesIdAttachmentPostWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesIdAttachmentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CashInvoiceApi->CashInvoicesIdAttachmentPost");

            var localVarPath = "/cash-invoices/{id}/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesIdAttachmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Add Attachment to cash invoices document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse> CashInvoicesIdAttachmentPostAsync (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
             ApiResponse<AttachmentResponse> localVarResponse = await CashInvoicesIdAttachmentPostAsyncWithHttpInfo(authorization, id, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Attachment to cash invoices document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> CashInvoicesIdAttachmentPostAsyncWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesIdAttachmentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CashInvoiceApi->CashInvoicesIdAttachmentPost");

            var localVarPath = "/cash-invoices/{id}/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesIdAttachmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Get cash invoices document. ลบ เอกสารใบกำกับ/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse CashInvoicesIdDelete (string authorization, string id)
        {
             ApiResponse<DeleteResponse> localVarResponse = CashInvoicesIdDeleteWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get cash invoices document. ลบ เอกสารใบกำกับ/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public ApiResponse<DeleteResponse> CashInvoicesIdDeleteWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CashInvoiceApi->CashInvoicesIdDelete");

            var localVarPath = "/cash-invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Get cash invoices document. ลบ เอกสารใบกำกับ/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse> CashInvoicesIdDeleteAsync (string authorization, string id)
        {
             ApiResponse<DeleteResponse> localVarResponse = await CashInvoicesIdDeleteAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get cash invoices document. ลบ เอกสารใบกำกับ/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> CashInvoicesIdDeleteAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CashInvoiceApi->CashInvoicesIdDelete");

            var localVarPath = "/cash-invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Get cash invoices document. เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse CashInvoicesIdGet (string authorization, string id)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = CashInvoicesIdGetWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get cash invoices document. เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> CashInvoicesIdGetWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CashInvoiceApi->CashInvoicesIdGet");

            var localVarPath = "/cash-invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Get cash invoices document. เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> CashInvoicesIdGetAsync (string authorization, string id)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await CashInvoicesIdGetAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get cash invoices document. เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> CashInvoicesIdGetAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CashInvoiceApi->CashInvoicesIdGet");

            var localVarPath = "/cash-invoices/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Change paid status of cash invoices document. เก็บเงิน เอกสารพร้อมเปลี่ยนสถานะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentDocument"></param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse CashInvoicesIdPaymentPost (string authorization, string id, PaymentDocument paymentDocument)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = CashInvoicesIdPaymentPostWithHttpInfo(authorization, id, paymentDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change paid status of cash invoices document. เก็บเงิน เอกสารพร้อมเปลี่ยนสถานะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentDocument"></param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> CashInvoicesIdPaymentPostWithHttpInfo (string authorization, string id, PaymentDocument paymentDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesIdPaymentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CashInvoiceApi->CashInvoicesIdPaymentPost");
            // verify the required parameter 'paymentDocument' is set
            if (paymentDocument == null)
                throw new ApiException(400, "Missing required parameter 'paymentDocument' when calling CashInvoiceApi->CashInvoicesIdPaymentPost");

            var localVarPath = "/cash-invoices/{id}/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (paymentDocument != null && paymentDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesIdPaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Change paid status of cash invoices document. เก็บเงิน เอกสารพร้อมเปลี่ยนสถานะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentDocument"></param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> CashInvoicesIdPaymentPostAsync (string authorization, string id, PaymentDocument paymentDocument)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await CashInvoicesIdPaymentPostAsyncWithHttpInfo(authorization, id, paymentDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change paid status of cash invoices document. เก็บเงิน เอกสารพร้อมเปลี่ยนสถานะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentDocument"></param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> CashInvoicesIdPaymentPostAsyncWithHttpInfo (string authorization, string id, PaymentDocument paymentDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesIdPaymentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CashInvoiceApi->CashInvoicesIdPaymentPost");
            // verify the required parameter 'paymentDocument' is set
            if (paymentDocument == null)
                throw new ApiException(400, "Missing required parameter 'paymentDocument' when calling CashInvoiceApi->CashInvoicesIdPaymentPost");

            var localVarPath = "/cash-invoices/{id}/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (paymentDocument != null && paymentDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesIdPaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Change status of cash invoices document. เปลี่ยนสถานะของเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; invoicedelivered &#x3D; รอเก็บเงิน &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse CashInvoicesIdStatusKeyStatusIdPost (string authorization, string id, string statusId)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = CashInvoicesIdStatusKeyStatusIdPostWithHttpInfo(authorization, id, statusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change status of cash invoices document. เปลี่ยนสถานะของเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; invoicedelivered &#x3D; รอเก็บเงิน &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> CashInvoicesIdStatusKeyStatusIdPostWithHttpInfo (string authorization, string id, string statusId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesIdStatusKeyStatusIdPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CashInvoiceApi->CashInvoicesIdStatusKeyStatusIdPost");
            // verify the required parameter 'statusId' is set
            if (statusId == null)
                throw new ApiException(400, "Missing required parameter 'statusId' when calling CashInvoiceApi->CashInvoicesIdStatusKeyStatusIdPost");

            var localVarPath = "/cash-invoices/{id}/status-key/{statusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusId != null) localVarPathParams.Add("statusId", this.Configuration.ApiClient.ParameterToString(statusId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesIdStatusKeyStatusIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Change status of cash invoices document. เปลี่ยนสถานะของเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; invoicedelivered &#x3D; รอเก็บเงิน &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> CashInvoicesIdStatusKeyStatusIdPostAsync (string authorization, string id, string statusId)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await CashInvoicesIdStatusKeyStatusIdPostAsyncWithHttpInfo(authorization, id, statusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change status of cash invoices document. เปลี่ยนสถานะของเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; invoicedelivered &#x3D; รอเก็บเงิน &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> CashInvoicesIdStatusKeyStatusIdPostAsyncWithHttpInfo (string authorization, string id, string statusId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesIdStatusKeyStatusIdPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CashInvoiceApi->CashInvoicesIdStatusKeyStatusIdPost");
            // verify the required parameter 'statusId' is set
            if (statusId == null)
                throw new ApiException(400, "Missing required parameter 'statusId' when calling CashInvoiceApi->CashInvoicesIdStatusKeyStatusIdPost");

            var localVarPath = "/cash-invoices/{id}/status-key/{statusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusId != null) localVarPathParams.Add("statusId", this.Configuration.ApiClient.ParameterToString(statusId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesIdStatusKeyStatusIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Create cash invoices document with discount and tax inline. สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse CashInvoicesInlinePost (string authorization, InlineDocument inlineDocument)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = CashInvoicesInlinePostWithHttpInfo(authorization, inlineDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create cash invoices document with discount and tax inline. สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> CashInvoicesInlinePostWithHttpInfo (string authorization, InlineDocument inlineDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesInlinePost");
            // verify the required parameter 'inlineDocument' is set
            if (inlineDocument == null)
                throw new ApiException(400, "Missing required parameter 'inlineDocument' when calling CashInvoiceApi->CashInvoicesInlinePost");

            var localVarPath = "/cash-invoices/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (inlineDocument != null && inlineDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesInlinePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Create cash invoices document with discount and tax inline. สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> CashInvoicesInlinePostAsync (string authorization, InlineDocument inlineDocument)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await CashInvoicesInlinePostAsyncWithHttpInfo(authorization, inlineDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create cash invoices document with discount and tax inline. สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> CashInvoicesInlinePostAsyncWithHttpInfo (string authorization, InlineDocument inlineDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesInlinePost");
            // verify the required parameter 'inlineDocument' is set
            if (inlineDocument == null)
                throw new ApiException(400, "Missing required parameter 'inlineDocument' when calling CashInvoiceApi->CashInvoicesInlinePost");

            var localVarPath = "/cash-invoices/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (inlineDocument != null && inlineDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesInlinePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Create cash invoices document. สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>SimpleDocumentResponse</returns>
        public SimpleDocumentResponse CashInvoicesPost (string authorization, SimpleDocument simpleDocument)
        {
             ApiResponse<SimpleDocumentResponse> localVarResponse = CashInvoicesPostWithHttpInfo(authorization, simpleDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create cash invoices document. สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>ApiResponse of SimpleDocumentResponse</returns>
        public ApiResponse<SimpleDocumentResponse> CashInvoicesPostWithHttpInfo (string authorization, SimpleDocument simpleDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesPost");
            // verify the required parameter 'simpleDocument' is set
            if (simpleDocument == null)
                throw new ApiException(400, "Missing required parameter 'simpleDocument' when calling CashInvoiceApi->CashInvoicesPost");

            var localVarPath = "/cash-invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (simpleDocument != null && simpleDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(simpleDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = simpleDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimpleDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleDocumentResponse)));
        }

        /// <summary>
        /// Create cash invoices document. สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>Task of SimpleDocumentResponse</returns>
        public async System.Threading.Tasks.Task<SimpleDocumentResponse> CashInvoicesPostAsync (string authorization, SimpleDocument simpleDocument)
        {
             ApiResponse<SimpleDocumentResponse> localVarResponse = await CashInvoicesPostAsyncWithHttpInfo(authorization, simpleDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create cash invoices document. สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>Task of ApiResponse (SimpleDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleDocumentResponse>> CashInvoicesPostAsyncWithHttpInfo (string authorization, SimpleDocument simpleDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesPost");
            // verify the required parameter 'simpleDocument' is set
            if (simpleDocument == null)
                throw new ApiException(400, "Missing required parameter 'simpleDocument' when calling CashInvoiceApi->CashInvoicesPost");

            var localVarPath = "/cash-invoices";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (simpleDocument != null && simpleDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(simpleDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = simpleDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimpleDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleDocumentResponse)));
        }

        /// <summary>
        /// Share link cash invoices document. แชร์ลิงค์ เอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ShareDocumentResponse</returns>
        public ShareDocumentResponse CashInvoicesSharedocumentPost (string authorization, ShareDocument shareDocument)
        {
             ApiResponse<ShareDocumentResponse> localVarResponse = CashInvoicesSharedocumentPostWithHttpInfo(authorization, shareDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Share link cash invoices document. แชร์ลิงค์ เอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ApiResponse of ShareDocumentResponse</returns>
        public ApiResponse<ShareDocumentResponse> CashInvoicesSharedocumentPostWithHttpInfo (string authorization, ShareDocument shareDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesSharedocumentPost");
            // verify the required parameter 'shareDocument' is set
            if (shareDocument == null)
                throw new ApiException(400, "Missing required parameter 'shareDocument' when calling CashInvoiceApi->CashInvoicesSharedocumentPost");

            var localVarPath = "/cash-invoices/sharedocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (shareDocument != null && shareDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(shareDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shareDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesSharedocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShareDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShareDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShareDocumentResponse)));
        }

        /// <summary>
        /// Share link cash invoices document. แชร์ลิงค์ เอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ShareDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ShareDocumentResponse> CashInvoicesSharedocumentPostAsync (string authorization, ShareDocument shareDocument)
        {
             ApiResponse<ShareDocumentResponse> localVarResponse = await CashInvoicesSharedocumentPostAsyncWithHttpInfo(authorization, shareDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Share link cash invoices document. แชร์ลิงค์ เอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ApiResponse (ShareDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShareDocumentResponse>> CashInvoicesSharedocumentPostAsyncWithHttpInfo (string authorization, ShareDocument shareDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling CashInvoiceApi->CashInvoicesSharedocumentPost");
            // verify the required parameter 'shareDocument' is set
            if (shareDocument == null)
                throw new ApiException(400, "Missing required parameter 'shareDocument' when calling CashInvoiceApi->CashInvoicesSharedocumentPost");

            var localVarPath = "/cash-invoices/sharedocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (shareDocument != null && shareDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(shareDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shareDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CashInvoicesSharedocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShareDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShareDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShareDocumentResponse)));
        }

    }
}
