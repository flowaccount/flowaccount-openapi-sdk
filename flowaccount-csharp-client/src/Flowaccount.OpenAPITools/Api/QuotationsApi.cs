/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flowaccount.OpenAPITools.Client;
using Flowaccount.OpenAPITools.Model;

namespace Flowaccount.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IQuotationsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send email quotations document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารใบเสนอราคา ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>SendEmailResponse</returns>
        SendEmailResponse QuotationsEmailDocumentPost (string authorization, SendEmailSimple sendEmailSimple);

        /// <summary>
        /// Send email quotations document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารใบเสนอราคา ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>ApiResponse of SendEmailResponse</returns>
        ApiResponse<SendEmailResponse> QuotationsEmailDocumentPostWithHttpInfo (string authorization, SendEmailSimple sendEmailSimple);
        /// <summary>
        /// Get list all quotations documents.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบเสนอราคาทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document quotations. &lt;br&gt;Example Pattern: &lt;ex&gt;/quotations?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/quotations?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document quotations list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /quotations?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse QuotationsGet (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));

        /// <summary>
        /// Get list all quotations documents.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบเสนอราคาทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document quotations. &lt;br&gt;Example Pattern: &lt;ex&gt;/quotations?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/quotations?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document quotations list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /quotations?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> QuotationsGetWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));
        /// <summary>
        /// Add Attachment to quotations document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse QuotationsIdAttachmentPost (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Add Attachment to quotations document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> QuotationsIdAttachmentPostWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Get quotations document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>DeleteResponse</returns>
        DeleteResponse QuotationsIdDelete (string authorization, string id);

        /// <summary>
        /// Get quotations document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        ApiResponse<DeleteResponse> QuotationsIdDeleteWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Get quotations document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse QuotationsIdGet (string authorization, string id);

        /// <summary>
        /// Get quotations document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> QuotationsIdGetWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Change status of quotations document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารใบเสนอราคา สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; rejected &#x3D; ยกเลิก</param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse QuotationsIdStatusKeyStatusIdPost (string authorization, string id, string statusId);

        /// <summary>
        /// Change status of quotations document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารใบเสนอราคา สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; rejected &#x3D; ยกเลิก</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> QuotationsIdStatusKeyStatusIdPostWithHttpInfo (string authorization, string id, string statusId);
        /// <summary>
        /// Create quotations document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบเสนอราคา แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse QuotationsInlinePost (string authorization, InlineDocument inlineDocument);

        /// <summary>
        /// Create quotations document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบเสนอราคา แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> QuotationsInlinePostWithHttpInfo (string authorization, InlineDocument inlineDocument);
        /// <summary>
        /// Create quotations document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบเสนอราคา เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse QuotationsPost (string authorization, SimpleDocument simpleDocument);

        /// <summary>
        /// Create quotations document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบเสนอราคา เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> QuotationsPostWithHttpInfo (string authorization, SimpleDocument simpleDocument);
        /// <summary>
        /// Share link quotations document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารใบเสนอราคาที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ShareDocumentResponse</returns>
        ShareDocumentResponse QuotationsSharedocumentPost (string authorization, ShareDocument shareDocument);

        /// <summary>
        /// Share link quotations document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารใบเสนอราคาที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ApiResponse of ShareDocumentResponse</returns>
        ApiResponse<ShareDocumentResponse> QuotationsSharedocumentPostWithHttpInfo (string authorization, ShareDocument shareDocument);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Send email quotations document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารใบเสนอราคา ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>Task of SendEmailResponse</returns>
        System.Threading.Tasks.Task<SendEmailResponse> QuotationsEmailDocumentPostAsync (string authorization, SendEmailSimple sendEmailSimple);

        /// <summary>
        /// Send email quotations document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารใบเสนอราคา ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>Task of ApiResponse (SendEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendEmailResponse>> QuotationsEmailDocumentPostAsyncWithHttpInfo (string authorization, SendEmailSimple sendEmailSimple);
        /// <summary>
        /// Get list all quotations documents.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบเสนอราคาทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document quotations. &lt;br&gt;Example Pattern: &lt;ex&gt;/quotations?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/quotations?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document quotations list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /quotations?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> QuotationsGetAsync (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));

        /// <summary>
        /// Get list all quotations documents.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบเสนอราคาทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document quotations. &lt;br&gt;Example Pattern: &lt;ex&gt;/quotations?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/quotations?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document quotations list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /quotations?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> QuotationsGetAsyncWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));
        /// <summary>
        /// Add Attachment to quotations document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> QuotationsIdAttachmentPostAsync (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Add Attachment to quotations document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> QuotationsIdAttachmentPostAsyncWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Get quotations document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> QuotationsIdDeleteAsync (string authorization, string id);

        /// <summary>
        /// Get quotations document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> QuotationsIdDeleteAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Get quotations document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> QuotationsIdGetAsync (string authorization, string id);

        /// <summary>
        /// Get quotations document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> QuotationsIdGetAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Change status of quotations document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารใบเสนอราคา สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; rejected &#x3D; ยกเลิก</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> QuotationsIdStatusKeyStatusIdPostAsync (string authorization, string id, string statusId);

        /// <summary>
        /// Change status of quotations document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารใบเสนอราคา สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; rejected &#x3D; ยกเลิก</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> QuotationsIdStatusKeyStatusIdPostAsyncWithHttpInfo (string authorization, string id, string statusId);
        /// <summary>
        /// Create quotations document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบเสนอราคา แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> QuotationsInlinePostAsync (string authorization, InlineDocument inlineDocument);

        /// <summary>
        /// Create quotations document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบเสนอราคา แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> QuotationsInlinePostAsyncWithHttpInfo (string authorization, InlineDocument inlineDocument);
        /// <summary>
        /// Create quotations document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบเสนอราคา เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> QuotationsPostAsync (string authorization, SimpleDocument simpleDocument);

        /// <summary>
        /// Create quotations document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบเสนอราคา เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> QuotationsPostAsyncWithHttpInfo (string authorization, SimpleDocument simpleDocument);
        /// <summary>
        /// Share link quotations document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารใบเสนอราคาที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ShareDocumentResponse</returns>
        System.Threading.Tasks.Task<ShareDocumentResponse> QuotationsSharedocumentPostAsync (string authorization, ShareDocument shareDocument);

        /// <summary>
        /// Share link quotations document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารใบเสนอราคาที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ApiResponse (ShareDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShareDocumentResponse>> QuotationsSharedocumentPostAsyncWithHttpInfo (string authorization, ShareDocument shareDocument);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class QuotationsApi : IQuotationsApi
    {
        private Flowaccount.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="QuotationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public QuotationsApi(String basePath)
        {
            this.Configuration = new Flowaccount.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuotationsApi"/> class
        /// </summary>
        /// <returns></returns>
        public QuotationsApi()
        {
            this.Configuration = Flowaccount.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="QuotationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public QuotationsApi(Flowaccount.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flowaccount.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flowaccount.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flowaccount.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Send email quotations document. ส่งเอกสารใบเสนอราคา ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>SendEmailResponse</returns>
        public SendEmailResponse QuotationsEmailDocumentPost (string authorization, SendEmailSimple sendEmailSimple)
        {
             ApiResponse<SendEmailResponse> localVarResponse = QuotationsEmailDocumentPostWithHttpInfo(authorization, sendEmailSimple);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send email quotations document. ส่งเอกสารใบเสนอราคา ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>ApiResponse of SendEmailResponse</returns>
        public ApiResponse<SendEmailResponse> QuotationsEmailDocumentPostWithHttpInfo (string authorization, SendEmailSimple sendEmailSimple)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsEmailDocumentPost");
            // verify the required parameter 'sendEmailSimple' is set
            if (sendEmailSimple == null)
                throw new ApiException(400, "Missing required parameter 'sendEmailSimple' when calling QuotationsApi->QuotationsEmailDocumentPost");

            var localVarPath = "/quotations/email-document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (sendEmailSimple != null && sendEmailSimple.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendEmailSimple); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendEmailSimple; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsEmailDocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendEmailResponse)));
        }

        /// <summary>
        /// Send email quotations document. ส่งเอกสารใบเสนอราคา ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>Task of SendEmailResponse</returns>
        public async System.Threading.Tasks.Task<SendEmailResponse> QuotationsEmailDocumentPostAsync (string authorization, SendEmailSimple sendEmailSimple)
        {
             ApiResponse<SendEmailResponse> localVarResponse = await QuotationsEmailDocumentPostAsyncWithHttpInfo(authorization, sendEmailSimple);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send email quotations document. ส่งเอกสารใบเสนอราคา ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>Task of ApiResponse (SendEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendEmailResponse>> QuotationsEmailDocumentPostAsyncWithHttpInfo (string authorization, SendEmailSimple sendEmailSimple)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsEmailDocumentPost");
            // verify the required parameter 'sendEmailSimple' is set
            if (sendEmailSimple == null)
                throw new ApiException(400, "Missing required parameter 'sendEmailSimple' when calling QuotationsApi->QuotationsEmailDocumentPost");

            var localVarPath = "/quotations/email-document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (sendEmailSimple != null && sendEmailSimple.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendEmailSimple); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendEmailSimple; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsEmailDocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendEmailResponse)));
        }

        /// <summary>
        /// Get list all quotations documents. เรียกดูข้อมูลเอกสารใบเสนอราคาทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document quotations. &lt;br&gt;Example Pattern: &lt;ex&gt;/quotations?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/quotations?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document quotations list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /quotations?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse QuotationsGet (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = QuotationsGetWithHttpInfo(currentPage, pageSize, authorization, sortBy, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list all quotations documents. เรียกดูข้อมูลเอกสารใบเสนอราคาทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document quotations. &lt;br&gt;Example Pattern: &lt;ex&gt;/quotations?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/quotations?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document quotations list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /quotations?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> QuotationsGetWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
            // verify the required parameter 'currentPage' is set
            if (currentPage == null)
                throw new ApiException(400, "Missing required parameter 'currentPage' when calling QuotationsApi->QuotationsGet");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling QuotationsApi->QuotationsGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsGet");

            var localVarPath = "/quotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Get list all quotations documents. เรียกดูข้อมูลเอกสารใบเสนอราคาทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document quotations. &lt;br&gt;Example Pattern: &lt;ex&gt;/quotations?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/quotations?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document quotations list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /quotations?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> QuotationsGetAsync (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await QuotationsGetAsyncWithHttpInfo(currentPage, pageSize, authorization, sortBy, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list all quotations documents. เรียกดูข้อมูลเอกสารใบเสนอราคาทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document quotations. &lt;br&gt;Example Pattern: &lt;ex&gt;/quotations?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/quotations?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document quotations list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /quotations?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> QuotationsGetAsyncWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
            // verify the required parameter 'currentPage' is set
            if (currentPage == null)
                throw new ApiException(400, "Missing required parameter 'currentPage' when calling QuotationsApi->QuotationsGet");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling QuotationsApi->QuotationsGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsGet");

            var localVarPath = "/quotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Add Attachment to quotations document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse QuotationsIdAttachmentPost (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
             ApiResponse<AttachmentResponse> localVarResponse = QuotationsIdAttachmentPostWithHttpInfo(authorization, id, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Attachment to quotations document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse<AttachmentResponse> QuotationsIdAttachmentPostWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsIdAttachmentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QuotationsApi->QuotationsIdAttachmentPost");

            var localVarPath = "/quotations/{id}/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsIdAttachmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Add Attachment to quotations document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse> QuotationsIdAttachmentPostAsync (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
             ApiResponse<AttachmentResponse> localVarResponse = await QuotationsIdAttachmentPostAsyncWithHttpInfo(authorization, id, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Attachment to quotations document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> QuotationsIdAttachmentPostAsyncWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsIdAttachmentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QuotationsApi->QuotationsIdAttachmentPost");

            var localVarPath = "/quotations/{id}/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsIdAttachmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Get quotations document. ลบ เอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse QuotationsIdDelete (string authorization, string id)
        {
             ApiResponse<DeleteResponse> localVarResponse = QuotationsIdDeleteWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get quotations document. ลบ เอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public ApiResponse<DeleteResponse> QuotationsIdDeleteWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QuotationsApi->QuotationsIdDelete");

            var localVarPath = "/quotations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Get quotations document. ลบ เอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse> QuotationsIdDeleteAsync (string authorization, string id)
        {
             ApiResponse<DeleteResponse> localVarResponse = await QuotationsIdDeleteAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get quotations document. ลบ เอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> QuotationsIdDeleteAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QuotationsApi->QuotationsIdDelete");

            var localVarPath = "/quotations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Get quotations document. เรียกดูข้อมูลเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse QuotationsIdGet (string authorization, string id)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = QuotationsIdGetWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get quotations document. เรียกดูข้อมูลเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> QuotationsIdGetWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QuotationsApi->QuotationsIdGet");

            var localVarPath = "/quotations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Get quotations document. เรียกดูข้อมูลเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> QuotationsIdGetAsync (string authorization, string id)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await QuotationsIdGetAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get quotations document. เรียกดูข้อมูลเอกสารใบเสนอราคาตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> QuotationsIdGetAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QuotationsApi->QuotationsIdGet");

            var localVarPath = "/quotations/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Change status of quotations document. เปลี่ยนสถานะของเอกสารใบเสนอราคา สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; rejected &#x3D; ยกเลิก</param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse QuotationsIdStatusKeyStatusIdPost (string authorization, string id, string statusId)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = QuotationsIdStatusKeyStatusIdPostWithHttpInfo(authorization, id, statusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change status of quotations document. เปลี่ยนสถานะของเอกสารใบเสนอราคา สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; rejected &#x3D; ยกเลิก</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> QuotationsIdStatusKeyStatusIdPostWithHttpInfo (string authorization, string id, string statusId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsIdStatusKeyStatusIdPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QuotationsApi->QuotationsIdStatusKeyStatusIdPost");
            // verify the required parameter 'statusId' is set
            if (statusId == null)
                throw new ApiException(400, "Missing required parameter 'statusId' when calling QuotationsApi->QuotationsIdStatusKeyStatusIdPost");

            var localVarPath = "/quotations/{id}/status-key/{statusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusId != null) localVarPathParams.Add("statusId", this.Configuration.ApiClient.ParameterToString(statusId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsIdStatusKeyStatusIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Change status of quotations document. เปลี่ยนสถานะของเอกสารใบเสนอราคา สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; rejected &#x3D; ยกเลิก</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> QuotationsIdStatusKeyStatusIdPostAsync (string authorization, string id, string statusId)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await QuotationsIdStatusKeyStatusIdPostAsyncWithHttpInfo(authorization, id, statusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change status of quotations document. เปลี่ยนสถานะของเอกสารใบเสนอราคา สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; rejected &#x3D; ยกเลิก</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> QuotationsIdStatusKeyStatusIdPostAsyncWithHttpInfo (string authorization, string id, string statusId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsIdStatusKeyStatusIdPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling QuotationsApi->QuotationsIdStatusKeyStatusIdPost");
            // verify the required parameter 'statusId' is set
            if (statusId == null)
                throw new ApiException(400, "Missing required parameter 'statusId' when calling QuotationsApi->QuotationsIdStatusKeyStatusIdPost");

            var localVarPath = "/quotations/{id}/status-key/{statusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusId != null) localVarPathParams.Add("statusId", this.Configuration.ApiClient.ParameterToString(statusId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsIdStatusKeyStatusIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Create quotations document with discount and tax inline. สร้างเอกสารใบเสนอราคา แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse QuotationsInlinePost (string authorization, InlineDocument inlineDocument)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = QuotationsInlinePostWithHttpInfo(authorization, inlineDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create quotations document with discount and tax inline. สร้างเอกสารใบเสนอราคา แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> QuotationsInlinePostWithHttpInfo (string authorization, InlineDocument inlineDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsInlinePost");
            // verify the required parameter 'inlineDocument' is set
            if (inlineDocument == null)
                throw new ApiException(400, "Missing required parameter 'inlineDocument' when calling QuotationsApi->QuotationsInlinePost");

            var localVarPath = "/quotations/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (inlineDocument != null && inlineDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsInlinePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Create quotations document with discount and tax inline. สร้างเอกสารใบเสนอราคา แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> QuotationsInlinePostAsync (string authorization, InlineDocument inlineDocument)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await QuotationsInlinePostAsyncWithHttpInfo(authorization, inlineDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create quotations document with discount and tax inline. สร้างเอกสารใบเสนอราคา แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> QuotationsInlinePostAsyncWithHttpInfo (string authorization, InlineDocument inlineDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsInlinePost");
            // verify the required parameter 'inlineDocument' is set
            if (inlineDocument == null)
                throw new ApiException(400, "Missing required parameter 'inlineDocument' when calling QuotationsApi->QuotationsInlinePost");

            var localVarPath = "/quotations/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (inlineDocument != null && inlineDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsInlinePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Create quotations document. สร้างเอกสารใบเสนอราคา เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse QuotationsPost (string authorization, SimpleDocument simpleDocument)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = QuotationsPostWithHttpInfo(authorization, simpleDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create quotations document. สร้างเอกสารใบเสนอราคา เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> QuotationsPostWithHttpInfo (string authorization, SimpleDocument simpleDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsPost");
            // verify the required parameter 'simpleDocument' is set
            if (simpleDocument == null)
                throw new ApiException(400, "Missing required parameter 'simpleDocument' when calling QuotationsApi->QuotationsPost");

            var localVarPath = "/quotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (simpleDocument != null && simpleDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(simpleDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = simpleDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Create quotations document. สร้างเอกสารใบเสนอราคา เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> QuotationsPostAsync (string authorization, SimpleDocument simpleDocument)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await QuotationsPostAsyncWithHttpInfo(authorization, simpleDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create quotations document. สร้างเอกสารใบเสนอราคา เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสนอราคา : https://flowaccount.com/blog/ใบเสนอราคา
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> QuotationsPostAsyncWithHttpInfo (string authorization, SimpleDocument simpleDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsPost");
            // verify the required parameter 'simpleDocument' is set
            if (simpleDocument == null)
                throw new ApiException(400, "Missing required parameter 'simpleDocument' when calling QuotationsApi->QuotationsPost");

            var localVarPath = "/quotations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (simpleDocument != null && simpleDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(simpleDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = simpleDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Share link quotations document. แชร์ลิงค์ เอกสารใบเสนอราคาที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ShareDocumentResponse</returns>
        public ShareDocumentResponse QuotationsSharedocumentPost (string authorization, ShareDocument shareDocument)
        {
             ApiResponse<ShareDocumentResponse> localVarResponse = QuotationsSharedocumentPostWithHttpInfo(authorization, shareDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Share link quotations document. แชร์ลิงค์ เอกสารใบเสนอราคาที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ApiResponse of ShareDocumentResponse</returns>
        public ApiResponse<ShareDocumentResponse> QuotationsSharedocumentPostWithHttpInfo (string authorization, ShareDocument shareDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsSharedocumentPost");
            // verify the required parameter 'shareDocument' is set
            if (shareDocument == null)
                throw new ApiException(400, "Missing required parameter 'shareDocument' when calling QuotationsApi->QuotationsSharedocumentPost");

            var localVarPath = "/quotations/sharedocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (shareDocument != null && shareDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(shareDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shareDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsSharedocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShareDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShareDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShareDocumentResponse)));
        }

        /// <summary>
        /// Share link quotations document. แชร์ลิงค์ เอกสารใบเสนอราคาที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ShareDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ShareDocumentResponse> QuotationsSharedocumentPostAsync (string authorization, ShareDocument shareDocument)
        {
             ApiResponse<ShareDocumentResponse> localVarResponse = await QuotationsSharedocumentPostAsyncWithHttpInfo(authorization, shareDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Share link quotations document. แชร์ลิงค์ เอกสารใบเสนอราคาที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ApiResponse (ShareDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShareDocumentResponse>> QuotationsSharedocumentPostAsyncWithHttpInfo (string authorization, ShareDocument shareDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling QuotationsApi->QuotationsSharedocumentPost");
            // verify the required parameter 'shareDocument' is set
            if (shareDocument == null)
                throw new ApiException(400, "Missing required parameter 'shareDocument' when calling QuotationsApi->QuotationsSharedocumentPost");

            var localVarPath = "/quotations/sharedocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (shareDocument != null && shareDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(shareDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shareDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QuotationsSharedocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShareDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShareDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShareDocumentResponse)));
        }

    }
}
