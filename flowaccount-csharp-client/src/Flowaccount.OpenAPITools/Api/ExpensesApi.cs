/* 
 * FlowAccount Open API
 *
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flowaccount.OpenAPITools.Client;
using Flowaccount.OpenAPITools.Model;

namespace Flowaccount.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExpensesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Accounting categories expenses document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักบัญชี)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>BusinessCategory</returns>
        BusinessCategory ExpensesCategoriesAccountingGet (string authorization);

        /// <summary>
        /// Accounting categories expenses document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักบัญชี)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of BusinessCategory</returns>
        ApiResponse<BusinessCategory> ExpensesCategoriesAccountingGetWithHttpInfo (string authorization);
        /// <summary>
        /// Business categories expenses document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักธุรกิจ)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>BusinessCategory</returns>
        BusinessCategory ExpensesCategoriesBusinessGet (string authorization);

        /// <summary>
        /// Business categories expenses document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักธุรกิจ)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of BusinessCategory</returns>
        ApiResponse<BusinessCategory> ExpensesCategoriesBusinessGetWithHttpInfo (string authorization);
        /// <summary>
        /// Send email expenses document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารค่าใช้จ่าย ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>SendEmailResponse</returns>
        SendEmailResponse ExpensesEmailDocumentPost (string authorization, SendEmailSimple sendEmailSimple);

        /// <summary>
        /// Send email expenses document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารค่าใช้จ่าย ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>ApiResponse of SendEmailResponse</returns>
        ApiResponse<SendEmailResponse> ExpensesEmailDocumentPostWithHttpInfo (string authorization, SendEmailSimple sendEmailSimple);
        /// <summary>
        /// Get list all expenses documents.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารค่าใช้จ่ายทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt;/expenses?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/expenses?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query expenses document list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy">Query sort by expense document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)</param>
        /// <param name="filter">Query filter expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?filter&#x3D;[{&#39;columnName&#39;:&#39;Status&#39;,&#39;columnValue&#39;:&#39;processed&#39;,&#39;columnPredicateOperator&#39;:&#39;And&#39;}] &lt;/ex&gt; (optional)</param>
        /// <returns>AllExpenseDocumentResponse</returns>
        AllExpenseDocumentResponse ExpensesGet (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));

        /// <summary>
        /// Get list all expenses documents.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารค่าใช้จ่ายทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt;/expenses?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/expenses?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query expenses document list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy">Query sort by expense document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)</param>
        /// <param name="filter">Query filter expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?filter&#x3D;[{&#39;columnName&#39;:&#39;Status&#39;,&#39;columnValue&#39;:&#39;processed&#39;,&#39;columnPredicateOperator&#39;:&#39;And&#39;}] &lt;/ex&gt; (optional)</param>
        /// <returns>ApiResponse of AllExpenseDocumentResponse</returns>
        ApiResponse<AllExpenseDocumentResponse> ExpensesGetWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));
        /// <summary>
        /// Attachment to expenses document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse ExpensesIdAttachmentPost (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Attachment to expenses document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> ExpensesIdAttachmentPostWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Delete expenses document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>DeleteResponse</returns>
        DeleteResponse ExpensesIdDelete (string authorization, string id);

        /// <summary>
        /// Delete expenses document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        ApiResponse<DeleteResponse> ExpensesIdDeleteWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Get expenses document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>AllExpenseDocumentResponse</returns>
        AllExpenseDocumentResponse ExpensesIdGet (string authorization, string id);

        /// <summary>
        /// Get expenses document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AllExpenseDocumentResponse</returns>
        ApiResponse<AllExpenseDocumentResponse> ExpensesIdGetWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Change status is paid expenses document.
        /// </summary>
        /// <remarks>
        /// ชำระเงิน เอกสารค่าใช้จ่ายเปลี่ยน สถานะเป็น ชำระเงินแล้ว
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentPaidDocument"></param>
        /// <returns>ExpenseSimpleDocumentResponse</returns>
        ExpenseSimpleDocumentResponse ExpensesIdPaymentPost (string authorization, string id, PaymentPaidDocument paymentPaidDocument);

        /// <summary>
        /// Change status is paid expenses document.
        /// </summary>
        /// <remarks>
        /// ชำระเงิน เอกสารค่าใช้จ่ายเปลี่ยน สถานะเป็น ชำระเงินแล้ว
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentPaidDocument"></param>
        /// <returns>ApiResponse of ExpenseSimpleDocumentResponse</returns>
        ApiResponse<ExpenseSimpleDocumentResponse> ExpensesIdPaymentPostWithHttpInfo (string authorization, string id, PaymentPaidDocument paymentPaidDocument);
        /// <summary>
        /// Edit expenses document.
        /// </summary>
        /// <remarks>
        /// แก้ไขข้อมูลเอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="updateExpenseDocument"></param>
        /// <returns>ExpenseInlineDocumentResponse</returns>
        ExpenseInlineDocumentResponse ExpensesIdPut (string authorization, string id, UpdateExpenseDocument updateExpenseDocument);

        /// <summary>
        /// Edit expenses document.
        /// </summary>
        /// <remarks>
        /// แก้ไขข้อมูลเอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="updateExpenseDocument"></param>
        /// <returns>ApiResponse of ExpenseInlineDocumentResponse</returns>
        ApiResponse<ExpenseInlineDocumentResponse> ExpensesIdPutWithHttpInfo (string authorization, string id, UpdateExpenseDocument updateExpenseDocument);
        /// <summary>
        /// Change status expenses document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารค่าใช้จ่าย สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; received &#x3D; รับใบเสร็จแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>ExpenseInlineDocumentResponse</returns>
        ExpenseInlineDocumentResponse ExpensesIdStatusStatusIdPost (string authorization, string id, string statusId);

        /// <summary>
        /// Change status expenses document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารค่าใช้จ่าย สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; received &#x3D; รับใบเสร็จแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>ApiResponse of ExpenseInlineDocumentResponse</returns>
        ApiResponse<ExpenseInlineDocumentResponse> ExpensesIdStatusStatusIdPostWithHttpInfo (string authorization, string id, string statusId);
        /// <summary>
        /// Create expenses document inline discount or inline vat.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>ExpenseInlineDocumentResponse</returns>
        ExpenseInlineDocumentResponse ExpensesInlinePost (string authorization, ExpenseInlineDocument expenseInlineDocument);

        /// <summary>
        /// Create expenses document inline discount or inline vat.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>ApiResponse of ExpenseInlineDocumentResponse</returns>
        ApiResponse<ExpenseInlineDocumentResponse> ExpensesInlinePostWithHttpInfo (string authorization, ExpenseInlineDocument expenseInlineDocument);
        /// <summary>
        /// Create expenses document inline discount or inline vat with payment.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocumentWithPaymentPaid"></param>
        /// <returns>ExpenseInlineDocumentResponse</returns>
        ExpenseInlineDocumentResponse ExpensesInlineWithPaymentPost (string authorization, ExpenseInlineDocumentWithPaymentPaid expenseInlineDocumentWithPaymentPaid);

        /// <summary>
        /// Create expenses document inline discount or inline vat with payment.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocumentWithPaymentPaid"></param>
        /// <returns>ApiResponse of ExpenseInlineDocumentResponse</returns>
        ApiResponse<ExpenseInlineDocumentResponse> ExpensesInlineWithPaymentPostWithHttpInfo (string authorization, ExpenseInlineDocumentWithPaymentPaid expenseInlineDocumentWithPaymentPaid);
        /// <summary>
        /// Create expenses document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocument"></param>
        /// <returns>ExpenseSimpleDocumentResponse</returns>
        ExpenseSimpleDocumentResponse ExpensesPost (string authorization, ExpenseSimpleDocument expenseSimpleDocument);

        /// <summary>
        /// Create expenses document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocument"></param>
        /// <returns>ApiResponse of ExpenseSimpleDocumentResponse</returns>
        ApiResponse<ExpenseSimpleDocumentResponse> ExpensesPostWithHttpInfo (string authorization, ExpenseSimpleDocument expenseSimpleDocument);
        /// <summary>
        /// Share link expenses document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารค่าใช้จ่าย ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ShareDocumentResponse</returns>
        ShareDocumentResponse ExpensesSharedocumentPost (string authorization, ShareDocument shareDocument);

        /// <summary>
        /// Share link expenses document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารค่าใช้จ่าย ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ApiResponse of ShareDocumentResponse</returns>
        ApiResponse<ShareDocumentResponse> ExpensesSharedocumentPostWithHttpInfo (string authorization, ShareDocument shareDocument);
        /// <summary>
        /// Create expenses document with payment.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocumentWithPaymentPaid"></param>
        /// <returns>ExpenseSimpleDocumentResponse</returns>
        ExpenseSimpleDocumentResponse ExpensesWithPaymentPost (string authorization, ExpenseSimpleDocumentWithPaymentPaid expenseSimpleDocumentWithPaymentPaid);

        /// <summary>
        /// Create expenses document with payment.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocumentWithPaymentPaid"></param>
        /// <returns>ApiResponse of ExpenseSimpleDocumentResponse</returns>
        ApiResponse<ExpenseSimpleDocumentResponse> ExpensesWithPaymentPostWithHttpInfo (string authorization, ExpenseSimpleDocumentWithPaymentPaid expenseSimpleDocumentWithPaymentPaid);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Accounting categories expenses document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักบัญชี)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of BusinessCategory</returns>
        System.Threading.Tasks.Task<BusinessCategory> ExpensesCategoriesAccountingGetAsync (string authorization);

        /// <summary>
        /// Accounting categories expenses document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักบัญชี)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ApiResponse (BusinessCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessCategory>> ExpensesCategoriesAccountingGetAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// Business categories expenses document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักธุรกิจ)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of BusinessCategory</returns>
        System.Threading.Tasks.Task<BusinessCategory> ExpensesCategoriesBusinessGetAsync (string authorization);

        /// <summary>
        /// Business categories expenses document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักธุรกิจ)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ApiResponse (BusinessCategory)</returns>
        System.Threading.Tasks.Task<ApiResponse<BusinessCategory>> ExpensesCategoriesBusinessGetAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// Send email expenses document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารค่าใช้จ่าย ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>Task of SendEmailResponse</returns>
        System.Threading.Tasks.Task<SendEmailResponse> ExpensesEmailDocumentPostAsync (string authorization, SendEmailSimple sendEmailSimple);

        /// <summary>
        /// Send email expenses document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารค่าใช้จ่าย ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>Task of ApiResponse (SendEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendEmailResponse>> ExpensesEmailDocumentPostAsyncWithHttpInfo (string authorization, SendEmailSimple sendEmailSimple);
        /// <summary>
        /// Get list all expenses documents.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารค่าใช้จ่ายทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt;/expenses?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/expenses?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query expenses document list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy">Query sort by expense document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)</param>
        /// <param name="filter">Query filter expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?filter&#x3D;[{&#39;columnName&#39;:&#39;Status&#39;,&#39;columnValue&#39;:&#39;processed&#39;,&#39;columnPredicateOperator&#39;:&#39;And&#39;}] &lt;/ex&gt; (optional)</param>
        /// <returns>Task of AllExpenseDocumentResponse</returns>
        System.Threading.Tasks.Task<AllExpenseDocumentResponse> ExpensesGetAsync (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));

        /// <summary>
        /// Get list all expenses documents.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารค่าใช้จ่ายทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt;/expenses?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/expenses?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query expenses document list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy">Query sort by expense document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)</param>
        /// <param name="filter">Query filter expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?filter&#x3D;[{&#39;columnName&#39;:&#39;Status&#39;,&#39;columnValue&#39;:&#39;processed&#39;,&#39;columnPredicateOperator&#39;:&#39;And&#39;}] &lt;/ex&gt; (optional)</param>
        /// <returns>Task of ApiResponse (AllExpenseDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllExpenseDocumentResponse>> ExpensesGetAsyncWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));
        /// <summary>
        /// Attachment to expenses document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> ExpensesIdAttachmentPostAsync (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Attachment to expenses document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> ExpensesIdAttachmentPostAsyncWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Delete expenses document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> ExpensesIdDeleteAsync (string authorization, string id);

        /// <summary>
        /// Delete expenses document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> ExpensesIdDeleteAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Get expenses document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of AllExpenseDocumentResponse</returns>
        System.Threading.Tasks.Task<AllExpenseDocumentResponse> ExpensesIdGetAsync (string authorization, string id);

        /// <summary>
        /// Get expenses document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AllExpenseDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AllExpenseDocumentResponse>> ExpensesIdGetAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Change status is paid expenses document.
        /// </summary>
        /// <remarks>
        /// ชำระเงิน เอกสารค่าใช้จ่ายเปลี่ยน สถานะเป็น ชำระเงินแล้ว
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentPaidDocument"></param>
        /// <returns>Task of ExpenseSimpleDocumentResponse</returns>
        System.Threading.Tasks.Task<ExpenseSimpleDocumentResponse> ExpensesIdPaymentPostAsync (string authorization, string id, PaymentPaidDocument paymentPaidDocument);

        /// <summary>
        /// Change status is paid expenses document.
        /// </summary>
        /// <remarks>
        /// ชำระเงิน เอกสารค่าใช้จ่ายเปลี่ยน สถานะเป็น ชำระเงินแล้ว
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentPaidDocument"></param>
        /// <returns>Task of ApiResponse (ExpenseSimpleDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseSimpleDocumentResponse>> ExpensesIdPaymentPostAsyncWithHttpInfo (string authorization, string id, PaymentPaidDocument paymentPaidDocument);
        /// <summary>
        /// Edit expenses document.
        /// </summary>
        /// <remarks>
        /// แก้ไขข้อมูลเอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="updateExpenseDocument"></param>
        /// <returns>Task of ExpenseInlineDocumentResponse</returns>
        System.Threading.Tasks.Task<ExpenseInlineDocumentResponse> ExpensesIdPutAsync (string authorization, string id, UpdateExpenseDocument updateExpenseDocument);

        /// <summary>
        /// Edit expenses document.
        /// </summary>
        /// <remarks>
        /// แก้ไขข้อมูลเอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="updateExpenseDocument"></param>
        /// <returns>Task of ApiResponse (ExpenseInlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseInlineDocumentResponse>> ExpensesIdPutAsyncWithHttpInfo (string authorization, string id, UpdateExpenseDocument updateExpenseDocument);
        /// <summary>
        /// Change status expenses document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารค่าใช้จ่าย สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; received &#x3D; รับใบเสร็จแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>Task of ExpenseInlineDocumentResponse</returns>
        System.Threading.Tasks.Task<ExpenseInlineDocumentResponse> ExpensesIdStatusStatusIdPostAsync (string authorization, string id, string statusId);

        /// <summary>
        /// Change status expenses document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารค่าใช้จ่าย สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; received &#x3D; รับใบเสร็จแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>Task of ApiResponse (ExpenseInlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseInlineDocumentResponse>> ExpensesIdStatusStatusIdPostAsyncWithHttpInfo (string authorization, string id, string statusId);
        /// <summary>
        /// Create expenses document inline discount or inline vat.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>Task of ExpenseInlineDocumentResponse</returns>
        System.Threading.Tasks.Task<ExpenseInlineDocumentResponse> ExpensesInlinePostAsync (string authorization, ExpenseInlineDocument expenseInlineDocument);

        /// <summary>
        /// Create expenses document inline discount or inline vat.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>Task of ApiResponse (ExpenseInlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseInlineDocumentResponse>> ExpensesInlinePostAsyncWithHttpInfo (string authorization, ExpenseInlineDocument expenseInlineDocument);
        /// <summary>
        /// Create expenses document inline discount or inline vat with payment.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocumentWithPaymentPaid"></param>
        /// <returns>Task of ExpenseInlineDocumentResponse</returns>
        System.Threading.Tasks.Task<ExpenseInlineDocumentResponse> ExpensesInlineWithPaymentPostAsync (string authorization, ExpenseInlineDocumentWithPaymentPaid expenseInlineDocumentWithPaymentPaid);

        /// <summary>
        /// Create expenses document inline discount or inline vat with payment.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocumentWithPaymentPaid"></param>
        /// <returns>Task of ApiResponse (ExpenseInlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseInlineDocumentResponse>> ExpensesInlineWithPaymentPostAsyncWithHttpInfo (string authorization, ExpenseInlineDocumentWithPaymentPaid expenseInlineDocumentWithPaymentPaid);
        /// <summary>
        /// Create expenses document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocument"></param>
        /// <returns>Task of ExpenseSimpleDocumentResponse</returns>
        System.Threading.Tasks.Task<ExpenseSimpleDocumentResponse> ExpensesPostAsync (string authorization, ExpenseSimpleDocument expenseSimpleDocument);

        /// <summary>
        /// Create expenses document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocument"></param>
        /// <returns>Task of ApiResponse (ExpenseSimpleDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseSimpleDocumentResponse>> ExpensesPostAsyncWithHttpInfo (string authorization, ExpenseSimpleDocument expenseSimpleDocument);
        /// <summary>
        /// Share link expenses document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารค่าใช้จ่าย ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ShareDocumentResponse</returns>
        System.Threading.Tasks.Task<ShareDocumentResponse> ExpensesSharedocumentPostAsync (string authorization, ShareDocument shareDocument);

        /// <summary>
        /// Share link expenses document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารค่าใช้จ่าย ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ApiResponse (ShareDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShareDocumentResponse>> ExpensesSharedocumentPostAsyncWithHttpInfo (string authorization, ShareDocument shareDocument);
        /// <summary>
        /// Create expenses document with payment.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocumentWithPaymentPaid"></param>
        /// <returns>Task of ExpenseSimpleDocumentResponse</returns>
        System.Threading.Tasks.Task<ExpenseSimpleDocumentResponse> ExpensesWithPaymentPostAsync (string authorization, ExpenseSimpleDocumentWithPaymentPaid expenseSimpleDocumentWithPaymentPaid);

        /// <summary>
        /// Create expenses document with payment.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารค่าใช้จ่าย พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocumentWithPaymentPaid"></param>
        /// <returns>Task of ApiResponse (ExpenseSimpleDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExpenseSimpleDocumentResponse>> ExpensesWithPaymentPostAsyncWithHttpInfo (string authorization, ExpenseSimpleDocumentWithPaymentPaid expenseSimpleDocumentWithPaymentPaid);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ExpensesApi : IExpensesApi
    {
        private Flowaccount.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpensesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ExpensesApi(String basePath)
        {
            this.Configuration = new Flowaccount.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpensesApi"/> class
        /// </summary>
        /// <returns></returns>
        public ExpensesApi()
        {
            this.Configuration = Flowaccount.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ExpensesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ExpensesApi(Flowaccount.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flowaccount.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flowaccount.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flowaccount.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Accounting categories expenses document. เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักบัญชี)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>BusinessCategory</returns>
        public BusinessCategory ExpensesCategoriesAccountingGet (string authorization)
        {
             ApiResponse<BusinessCategory> localVarResponse = ExpensesCategoriesAccountingGetWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Accounting categories expenses document. เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักบัญชี)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of BusinessCategory</returns>
        public ApiResponse<BusinessCategory> ExpensesCategoriesAccountingGetWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesCategoriesAccountingGet");

            var localVarPath = "/expenses/categories/accounting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesCategoriesAccountingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessCategory)));
        }

        /// <summary>
        /// Accounting categories expenses document. เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักบัญชี)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of BusinessCategory</returns>
        public async System.Threading.Tasks.Task<BusinessCategory> ExpensesCategoriesAccountingGetAsync (string authorization)
        {
             ApiResponse<BusinessCategory> localVarResponse = await ExpensesCategoriesAccountingGetAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Accounting categories expenses document. เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักบัญชี)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ApiResponse (BusinessCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessCategory>> ExpensesCategoriesAccountingGetAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesCategoriesAccountingGet");

            var localVarPath = "/expenses/categories/accounting";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesCategoriesAccountingGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessCategory)));
        }

        /// <summary>
        /// Business categories expenses document. เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักธุรกิจ)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>BusinessCategory</returns>
        public BusinessCategory ExpensesCategoriesBusinessGet (string authorization)
        {
             ApiResponse<BusinessCategory> localVarResponse = ExpensesCategoriesBusinessGetWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Business categories expenses document. เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักธุรกิจ)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of BusinessCategory</returns>
        public ApiResponse<BusinessCategory> ExpensesCategoriesBusinessGetWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesCategoriesBusinessGet");

            var localVarPath = "/expenses/categories/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesCategoriesBusinessGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessCategory)));
        }

        /// <summary>
        /// Business categories expenses document. เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักธุรกิจ)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of BusinessCategory</returns>
        public async System.Threading.Tasks.Task<BusinessCategory> ExpensesCategoriesBusinessGetAsync (string authorization)
        {
             ApiResponse<BusinessCategory> localVarResponse = await ExpensesCategoriesBusinessGetAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Business categories expenses document. เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักธุรกิจ)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ApiResponse (BusinessCategory)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BusinessCategory>> ExpensesCategoriesBusinessGetAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesCategoriesBusinessGet");

            var localVarPath = "/expenses/categories/business";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesCategoriesBusinessGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BusinessCategory>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BusinessCategory) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BusinessCategory)));
        }

        /// <summary>
        /// Send email expenses document. ส่งเอกสารค่าใช้จ่าย ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>SendEmailResponse</returns>
        public SendEmailResponse ExpensesEmailDocumentPost (string authorization, SendEmailSimple sendEmailSimple)
        {
             ApiResponse<SendEmailResponse> localVarResponse = ExpensesEmailDocumentPostWithHttpInfo(authorization, sendEmailSimple);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send email expenses document. ส่งเอกสารค่าใช้จ่าย ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>ApiResponse of SendEmailResponse</returns>
        public ApiResponse<SendEmailResponse> ExpensesEmailDocumentPostWithHttpInfo (string authorization, SendEmailSimple sendEmailSimple)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesEmailDocumentPost");
            // verify the required parameter 'sendEmailSimple' is set
            if (sendEmailSimple == null)
                throw new ApiException(400, "Missing required parameter 'sendEmailSimple' when calling ExpensesApi->ExpensesEmailDocumentPost");

            var localVarPath = "/expenses/email-document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (sendEmailSimple != null && sendEmailSimple.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendEmailSimple); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendEmailSimple; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesEmailDocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendEmailResponse)));
        }

        /// <summary>
        /// Send email expenses document. ส่งเอกสารค่าใช้จ่าย ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>Task of SendEmailResponse</returns>
        public async System.Threading.Tasks.Task<SendEmailResponse> ExpensesEmailDocumentPostAsync (string authorization, SendEmailSimple sendEmailSimple)
        {
             ApiResponse<SendEmailResponse> localVarResponse = await ExpensesEmailDocumentPostAsyncWithHttpInfo(authorization, sendEmailSimple);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send email expenses document. ส่งเอกสารค่าใช้จ่าย ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailSimple"></param>
        /// <returns>Task of ApiResponse (SendEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendEmailResponse>> ExpensesEmailDocumentPostAsyncWithHttpInfo (string authorization, SendEmailSimple sendEmailSimple)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesEmailDocumentPost");
            // verify the required parameter 'sendEmailSimple' is set
            if (sendEmailSimple == null)
                throw new ApiException(400, "Missing required parameter 'sendEmailSimple' when calling ExpensesApi->ExpensesEmailDocumentPost");

            var localVarPath = "/expenses/email-document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (sendEmailSimple != null && sendEmailSimple.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendEmailSimple); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendEmailSimple; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesEmailDocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendEmailResponse)));
        }

        /// <summary>
        /// Get list all expenses documents. เรียกดูข้อมูลเอกสารค่าใช้จ่ายทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt;/expenses?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/expenses?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query expenses document list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy">Query sort by expense document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)</param>
        /// <param name="filter">Query filter expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?filter&#x3D;[{&#39;columnName&#39;:&#39;Status&#39;,&#39;columnValue&#39;:&#39;processed&#39;,&#39;columnPredicateOperator&#39;:&#39;And&#39;}] &lt;/ex&gt; (optional)</param>
        /// <returns>AllExpenseDocumentResponse</returns>
        public AllExpenseDocumentResponse ExpensesGet (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
             ApiResponse<AllExpenseDocumentResponse> localVarResponse = ExpensesGetWithHttpInfo(currentPage, pageSize, authorization, sortBy, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list all expenses documents. เรียกดูข้อมูลเอกสารค่าใช้จ่ายทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt;/expenses?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/expenses?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query expenses document list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy">Query sort by expense document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)</param>
        /// <param name="filter">Query filter expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?filter&#x3D;[{&#39;columnName&#39;:&#39;Status&#39;,&#39;columnValue&#39;:&#39;processed&#39;,&#39;columnPredicateOperator&#39;:&#39;And&#39;}] &lt;/ex&gt; (optional)</param>
        /// <returns>ApiResponse of AllExpenseDocumentResponse</returns>
        public ApiResponse<AllExpenseDocumentResponse> ExpensesGetWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
            // verify the required parameter 'currentPage' is set
            if (currentPage == null)
                throw new ApiException(400, "Missing required parameter 'currentPage' when calling ExpensesApi->ExpensesGet");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ExpensesApi->ExpensesGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesGet");

            var localVarPath = "/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllExpenseDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AllExpenseDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllExpenseDocumentResponse)));
        }

        /// <summary>
        /// Get list all expenses documents. เรียกดูข้อมูลเอกสารค่าใช้จ่ายทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt;/expenses?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/expenses?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query expenses document list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy">Query sort by expense document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)</param>
        /// <param name="filter">Query filter expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?filter&#x3D;[{&#39;columnName&#39;:&#39;Status&#39;,&#39;columnValue&#39;:&#39;processed&#39;,&#39;columnPredicateOperator&#39;:&#39;And&#39;}] &lt;/ex&gt; (optional)</param>
        /// <returns>Task of AllExpenseDocumentResponse</returns>
        public async System.Threading.Tasks.Task<AllExpenseDocumentResponse> ExpensesGetAsync (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
             ApiResponse<AllExpenseDocumentResponse> localVarResponse = await ExpensesGetAsyncWithHttpInfo(currentPage, pageSize, authorization, sortBy, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list all expenses documents. เรียกดูข้อมูลเอกสารค่าใช้จ่ายทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt;/expenses?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/expenses?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query expenses document list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy">Query sort by expense document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/expenses?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)</param>
        /// <param name="filter">Query filter expenses document. &lt;br&gt;Example Pattern: &lt;ex&gt; /expenses?filter&#x3D;[{&#39;columnName&#39;:&#39;Status&#39;,&#39;columnValue&#39;:&#39;processed&#39;,&#39;columnPredicateOperator&#39;:&#39;And&#39;}] &lt;/ex&gt; (optional)</param>
        /// <returns>Task of ApiResponse (AllExpenseDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllExpenseDocumentResponse>> ExpensesGetAsyncWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
            // verify the required parameter 'currentPage' is set
            if (currentPage == null)
                throw new ApiException(400, "Missing required parameter 'currentPage' when calling ExpensesApi->ExpensesGet");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ExpensesApi->ExpensesGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesGet");

            var localVarPath = "/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllExpenseDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AllExpenseDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllExpenseDocumentResponse)));
        }

        /// <summary>
        /// Attachment to expenses document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse ExpensesIdAttachmentPost (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
             ApiResponse<AttachmentResponse> localVarResponse = ExpensesIdAttachmentPostWithHttpInfo(authorization, id, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attachment to expenses document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse<AttachmentResponse> ExpensesIdAttachmentPostWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesIdAttachmentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpensesApi->ExpensesIdAttachmentPost");

            var localVarPath = "/expenses/{id}/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdAttachmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Attachment to expenses document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse> ExpensesIdAttachmentPostAsync (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
             ApiResponse<AttachmentResponse> localVarResponse = await ExpensesIdAttachmentPostAsyncWithHttpInfo(authorization, id, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attachment to expenses document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <param name="file"> (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> ExpensesIdAttachmentPostAsyncWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesIdAttachmentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpensesApi->ExpensesIdAttachmentPost");

            var localVarPath = "/expenses/{id}/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdAttachmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Delete expenses document. ลบ เอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse ExpensesIdDelete (string authorization, string id)
        {
             ApiResponse<DeleteResponse> localVarResponse = ExpensesIdDeleteWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete expenses document. ลบ เอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public ApiResponse<DeleteResponse> ExpensesIdDeleteWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpensesApi->ExpensesIdDelete");

            var localVarPath = "/expenses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Delete expenses document. ลบ เอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse> ExpensesIdDeleteAsync (string authorization, string id)
        {
             ApiResponse<DeleteResponse> localVarResponse = await ExpensesIdDeleteAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete expenses document. ลบ เอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> ExpensesIdDeleteAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpensesApi->ExpensesIdDelete");

            var localVarPath = "/expenses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Get expenses document. เรียกดูข้อมูลเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>AllExpenseDocumentResponse</returns>
        public AllExpenseDocumentResponse ExpensesIdGet (string authorization, string id)
        {
             ApiResponse<AllExpenseDocumentResponse> localVarResponse = ExpensesIdGetWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get expenses document. เรียกดูข้อมูลเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AllExpenseDocumentResponse</returns>
        public ApiResponse<AllExpenseDocumentResponse> ExpensesIdGetWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpensesApi->ExpensesIdGet");

            var localVarPath = "/expenses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllExpenseDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AllExpenseDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllExpenseDocumentResponse)));
        }

        /// <summary>
        /// Get expenses document. เรียกดูข้อมูลเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of AllExpenseDocumentResponse</returns>
        public async System.Threading.Tasks.Task<AllExpenseDocumentResponse> ExpensesIdGetAsync (string authorization, string id)
        {
             ApiResponse<AllExpenseDocumentResponse> localVarResponse = await ExpensesIdGetAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get expenses document. เรียกดูข้อมูลเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (AllExpenseDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AllExpenseDocumentResponse>> ExpensesIdGetAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpensesApi->ExpensesIdGet");

            var localVarPath = "/expenses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AllExpenseDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AllExpenseDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AllExpenseDocumentResponse)));
        }

        /// <summary>
        /// Change status is paid expenses document. ชำระเงิน เอกสารค่าใช้จ่ายเปลี่ยน สถานะเป็น ชำระเงินแล้ว
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentPaidDocument"></param>
        /// <returns>ExpenseSimpleDocumentResponse</returns>
        public ExpenseSimpleDocumentResponse ExpensesIdPaymentPost (string authorization, string id, PaymentPaidDocument paymentPaidDocument)
        {
             ApiResponse<ExpenseSimpleDocumentResponse> localVarResponse = ExpensesIdPaymentPostWithHttpInfo(authorization, id, paymentPaidDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change status is paid expenses document. ชำระเงิน เอกสารค่าใช้จ่ายเปลี่ยน สถานะเป็น ชำระเงินแล้ว
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentPaidDocument"></param>
        /// <returns>ApiResponse of ExpenseSimpleDocumentResponse</returns>
        public ApiResponse<ExpenseSimpleDocumentResponse> ExpensesIdPaymentPostWithHttpInfo (string authorization, string id, PaymentPaidDocument paymentPaidDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesIdPaymentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpensesApi->ExpensesIdPaymentPost");
            // verify the required parameter 'paymentPaidDocument' is set
            if (paymentPaidDocument == null)
                throw new ApiException(400, "Missing required parameter 'paymentPaidDocument' when calling ExpensesApi->ExpensesIdPaymentPost");

            var localVarPath = "/expenses/{id}/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (paymentPaidDocument != null && paymentPaidDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentPaidDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentPaidDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdPaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseSimpleDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseSimpleDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseSimpleDocumentResponse)));
        }

        /// <summary>
        /// Change status is paid expenses document. ชำระเงิน เอกสารค่าใช้จ่ายเปลี่ยน สถานะเป็น ชำระเงินแล้ว
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentPaidDocument"></param>
        /// <returns>Task of ExpenseSimpleDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseSimpleDocumentResponse> ExpensesIdPaymentPostAsync (string authorization, string id, PaymentPaidDocument paymentPaidDocument)
        {
             ApiResponse<ExpenseSimpleDocumentResponse> localVarResponse = await ExpensesIdPaymentPostAsyncWithHttpInfo(authorization, id, paymentPaidDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change status is paid expenses document. ชำระเงิน เอกสารค่าใช้จ่ายเปลี่ยน สถานะเป็น ชำระเงินแล้ว
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId หรือ documentId</param>
        /// <param name="paymentPaidDocument"></param>
        /// <returns>Task of ApiResponse (ExpenseSimpleDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpenseSimpleDocumentResponse>> ExpensesIdPaymentPostAsyncWithHttpInfo (string authorization, string id, PaymentPaidDocument paymentPaidDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesIdPaymentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpensesApi->ExpensesIdPaymentPost");
            // verify the required parameter 'paymentPaidDocument' is set
            if (paymentPaidDocument == null)
                throw new ApiException(400, "Missing required parameter 'paymentPaidDocument' when calling ExpensesApi->ExpensesIdPaymentPost");

            var localVarPath = "/expenses/{id}/payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (paymentPaidDocument != null && paymentPaidDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(paymentPaidDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = paymentPaidDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdPaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseSimpleDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseSimpleDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseSimpleDocumentResponse)));
        }

        /// <summary>
        /// Edit expenses document. แก้ไขข้อมูลเอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="updateExpenseDocument"></param>
        /// <returns>ExpenseInlineDocumentResponse</returns>
        public ExpenseInlineDocumentResponse ExpensesIdPut (string authorization, string id, UpdateExpenseDocument updateExpenseDocument)
        {
             ApiResponse<ExpenseInlineDocumentResponse> localVarResponse = ExpensesIdPutWithHttpInfo(authorization, id, updateExpenseDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Edit expenses document. แก้ไขข้อมูลเอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="updateExpenseDocument"></param>
        /// <returns>ApiResponse of ExpenseInlineDocumentResponse</returns>
        public ApiResponse<ExpenseInlineDocumentResponse> ExpensesIdPutWithHttpInfo (string authorization, string id, UpdateExpenseDocument updateExpenseDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpensesApi->ExpensesIdPut");
            // verify the required parameter 'updateExpenseDocument' is set
            if (updateExpenseDocument == null)
                throw new ApiException(400, "Missing required parameter 'updateExpenseDocument' when calling ExpensesApi->ExpensesIdPut");

            var localVarPath = "/expenses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (updateExpenseDocument != null && updateExpenseDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateExpenseDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateExpenseDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseInlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseInlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseInlineDocumentResponse)));
        }

        /// <summary>
        /// Edit expenses document. แก้ไขข้อมูลเอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="updateExpenseDocument"></param>
        /// <returns>Task of ExpenseInlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseInlineDocumentResponse> ExpensesIdPutAsync (string authorization, string id, UpdateExpenseDocument updateExpenseDocument)
        {
             ApiResponse<ExpenseInlineDocumentResponse> localVarResponse = await ExpensesIdPutAsyncWithHttpInfo(authorization, id, updateExpenseDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Edit expenses document. แก้ไขข้อมูลเอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="updateExpenseDocument"></param>
        /// <returns>Task of ApiResponse (ExpenseInlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpenseInlineDocumentResponse>> ExpensesIdPutAsyncWithHttpInfo (string authorization, string id, UpdateExpenseDocument updateExpenseDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesIdPut");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpensesApi->ExpensesIdPut");
            // verify the required parameter 'updateExpenseDocument' is set
            if (updateExpenseDocument == null)
                throw new ApiException(400, "Missing required parameter 'updateExpenseDocument' when calling ExpensesApi->ExpensesIdPut");

            var localVarPath = "/expenses/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (updateExpenseDocument != null && updateExpenseDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateExpenseDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateExpenseDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseInlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseInlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseInlineDocumentResponse)));
        }

        /// <summary>
        /// Change status expenses document. เปลี่ยนสถานะของเอกสารค่าใช้จ่าย สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; received &#x3D; รับใบเสร็จแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>ExpenseInlineDocumentResponse</returns>
        public ExpenseInlineDocumentResponse ExpensesIdStatusStatusIdPost (string authorization, string id, string statusId)
        {
             ApiResponse<ExpenseInlineDocumentResponse> localVarResponse = ExpensesIdStatusStatusIdPostWithHttpInfo(authorization, id, statusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change status expenses document. เปลี่ยนสถานะของเอกสารค่าใช้จ่าย สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; received &#x3D; รับใบเสร็จแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>ApiResponse of ExpenseInlineDocumentResponse</returns>
        public ApiResponse<ExpenseInlineDocumentResponse> ExpensesIdStatusStatusIdPostWithHttpInfo (string authorization, string id, string statusId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesIdStatusStatusIdPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpensesApi->ExpensesIdStatusStatusIdPost");
            // verify the required parameter 'statusId' is set
            if (statusId == null)
                throw new ApiException(400, "Missing required parameter 'statusId' when calling ExpensesApi->ExpensesIdStatusStatusIdPost");

            var localVarPath = "/expenses/{id}/status/{statusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusId != null) localVarPathParams.Add("statusId", this.Configuration.ApiClient.ParameterToString(statusId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdStatusStatusIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseInlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseInlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseInlineDocumentResponse)));
        }

        /// <summary>
        /// Change status expenses document. เปลี่ยนสถานะของเอกสารค่าใช้จ่าย สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; received &#x3D; รับใบเสร็จแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>Task of ExpenseInlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseInlineDocumentResponse> ExpensesIdStatusStatusIdPostAsync (string authorization, string id, string statusId)
        {
             ApiResponse<ExpenseInlineDocumentResponse> localVarResponse = await ExpensesIdStatusStatusIdPostAsyncWithHttpInfo(authorization, id, statusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change status expenses document. เปลี่ยนสถานะของเอกสารค่าใช้จ่าย สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 3 สถานะ &lt;br&gt; awaiting &#x3D; รอดำเนินการ &lt;br&gt; received &#x3D; รับใบเสร็จแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>Task of ApiResponse (ExpenseInlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpenseInlineDocumentResponse>> ExpensesIdStatusStatusIdPostAsyncWithHttpInfo (string authorization, string id, string statusId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesIdStatusStatusIdPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ExpensesApi->ExpensesIdStatusStatusIdPost");
            // verify the required parameter 'statusId' is set
            if (statusId == null)
                throw new ApiException(400, "Missing required parameter 'statusId' when calling ExpensesApi->ExpensesIdStatusStatusIdPost");

            var localVarPath = "/expenses/{id}/status/{statusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusId != null) localVarPathParams.Add("statusId", this.Configuration.ApiClient.ParameterToString(statusId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesIdStatusStatusIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseInlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseInlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseInlineDocumentResponse)));
        }

        /// <summary>
        /// Create expenses document inline discount or inline vat. สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>ExpenseInlineDocumentResponse</returns>
        public ExpenseInlineDocumentResponse ExpensesInlinePost (string authorization, ExpenseInlineDocument expenseInlineDocument)
        {
             ApiResponse<ExpenseInlineDocumentResponse> localVarResponse = ExpensesInlinePostWithHttpInfo(authorization, expenseInlineDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create expenses document inline discount or inline vat. สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>ApiResponse of ExpenseInlineDocumentResponse</returns>
        public ApiResponse<ExpenseInlineDocumentResponse> ExpensesInlinePostWithHttpInfo (string authorization, ExpenseInlineDocument expenseInlineDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesInlinePost");
            // verify the required parameter 'expenseInlineDocument' is set
            if (expenseInlineDocument == null)
                throw new ApiException(400, "Missing required parameter 'expenseInlineDocument' when calling ExpensesApi->ExpensesInlinePost");

            var localVarPath = "/expenses/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (expenseInlineDocument != null && expenseInlineDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseInlineDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseInlineDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesInlinePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseInlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseInlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseInlineDocumentResponse)));
        }

        /// <summary>
        /// Create expenses document inline discount or inline vat. สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>Task of ExpenseInlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseInlineDocumentResponse> ExpensesInlinePostAsync (string authorization, ExpenseInlineDocument expenseInlineDocument)
        {
             ApiResponse<ExpenseInlineDocumentResponse> localVarResponse = await ExpensesInlinePostAsyncWithHttpInfo(authorization, expenseInlineDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create expenses document inline discount or inline vat. สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocument"></param>
        /// <returns>Task of ApiResponse (ExpenseInlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpenseInlineDocumentResponse>> ExpensesInlinePostAsyncWithHttpInfo (string authorization, ExpenseInlineDocument expenseInlineDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesInlinePost");
            // verify the required parameter 'expenseInlineDocument' is set
            if (expenseInlineDocument == null)
                throw new ApiException(400, "Missing required parameter 'expenseInlineDocument' when calling ExpensesApi->ExpensesInlinePost");

            var localVarPath = "/expenses/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (expenseInlineDocument != null && expenseInlineDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseInlineDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseInlineDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesInlinePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseInlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseInlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseInlineDocumentResponse)));
        }

        /// <summary>
        /// Create expenses document inline discount or inline vat with payment. สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocumentWithPaymentPaid"></param>
        /// <returns>ExpenseInlineDocumentResponse</returns>
        public ExpenseInlineDocumentResponse ExpensesInlineWithPaymentPost (string authorization, ExpenseInlineDocumentWithPaymentPaid expenseInlineDocumentWithPaymentPaid)
        {
             ApiResponse<ExpenseInlineDocumentResponse> localVarResponse = ExpensesInlineWithPaymentPostWithHttpInfo(authorization, expenseInlineDocumentWithPaymentPaid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create expenses document inline discount or inline vat with payment. สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocumentWithPaymentPaid"></param>
        /// <returns>ApiResponse of ExpenseInlineDocumentResponse</returns>
        public ApiResponse<ExpenseInlineDocumentResponse> ExpensesInlineWithPaymentPostWithHttpInfo (string authorization, ExpenseInlineDocumentWithPaymentPaid expenseInlineDocumentWithPaymentPaid)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesInlineWithPaymentPost");
            // verify the required parameter 'expenseInlineDocumentWithPaymentPaid' is set
            if (expenseInlineDocumentWithPaymentPaid == null)
                throw new ApiException(400, "Missing required parameter 'expenseInlineDocumentWithPaymentPaid' when calling ExpensesApi->ExpensesInlineWithPaymentPost");

            var localVarPath = "/expenses/inline/with-payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (expenseInlineDocumentWithPaymentPaid != null && expenseInlineDocumentWithPaymentPaid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseInlineDocumentWithPaymentPaid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseInlineDocumentWithPaymentPaid; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesInlineWithPaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseInlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseInlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseInlineDocumentResponse)));
        }

        /// <summary>
        /// Create expenses document inline discount or inline vat with payment. สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocumentWithPaymentPaid"></param>
        /// <returns>Task of ExpenseInlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseInlineDocumentResponse> ExpensesInlineWithPaymentPostAsync (string authorization, ExpenseInlineDocumentWithPaymentPaid expenseInlineDocumentWithPaymentPaid)
        {
             ApiResponse<ExpenseInlineDocumentResponse> localVarResponse = await ExpensesInlineWithPaymentPostAsyncWithHttpInfo(authorization, expenseInlineDocumentWithPaymentPaid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create expenses document inline discount or inline vat with payment. สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseInlineDocumentWithPaymentPaid"></param>
        /// <returns>Task of ApiResponse (ExpenseInlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpenseInlineDocumentResponse>> ExpensesInlineWithPaymentPostAsyncWithHttpInfo (string authorization, ExpenseInlineDocumentWithPaymentPaid expenseInlineDocumentWithPaymentPaid)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesInlineWithPaymentPost");
            // verify the required parameter 'expenseInlineDocumentWithPaymentPaid' is set
            if (expenseInlineDocumentWithPaymentPaid == null)
                throw new ApiException(400, "Missing required parameter 'expenseInlineDocumentWithPaymentPaid' when calling ExpensesApi->ExpensesInlineWithPaymentPost");

            var localVarPath = "/expenses/inline/with-payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (expenseInlineDocumentWithPaymentPaid != null && expenseInlineDocumentWithPaymentPaid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseInlineDocumentWithPaymentPaid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseInlineDocumentWithPaymentPaid; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesInlineWithPaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseInlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseInlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseInlineDocumentResponse)));
        }

        /// <summary>
        /// Create expenses document. สร้างเอกสารค่าใช้จ่าย เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocument"></param>
        /// <returns>ExpenseSimpleDocumentResponse</returns>
        public ExpenseSimpleDocumentResponse ExpensesPost (string authorization, ExpenseSimpleDocument expenseSimpleDocument)
        {
             ApiResponse<ExpenseSimpleDocumentResponse> localVarResponse = ExpensesPostWithHttpInfo(authorization, expenseSimpleDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create expenses document. สร้างเอกสารค่าใช้จ่าย เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocument"></param>
        /// <returns>ApiResponse of ExpenseSimpleDocumentResponse</returns>
        public ApiResponse<ExpenseSimpleDocumentResponse> ExpensesPostWithHttpInfo (string authorization, ExpenseSimpleDocument expenseSimpleDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesPost");
            // verify the required parameter 'expenseSimpleDocument' is set
            if (expenseSimpleDocument == null)
                throw new ApiException(400, "Missing required parameter 'expenseSimpleDocument' when calling ExpensesApi->ExpensesPost");

            var localVarPath = "/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (expenseSimpleDocument != null && expenseSimpleDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseSimpleDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseSimpleDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseSimpleDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseSimpleDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseSimpleDocumentResponse)));
        }

        /// <summary>
        /// Create expenses document. สร้างเอกสารค่าใช้จ่าย เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocument"></param>
        /// <returns>Task of ExpenseSimpleDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseSimpleDocumentResponse> ExpensesPostAsync (string authorization, ExpenseSimpleDocument expenseSimpleDocument)
        {
             ApiResponse<ExpenseSimpleDocumentResponse> localVarResponse = await ExpensesPostAsyncWithHttpInfo(authorization, expenseSimpleDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create expenses document. สร้างเอกสารค่าใช้จ่าย เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocument"></param>
        /// <returns>Task of ApiResponse (ExpenseSimpleDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpenseSimpleDocumentResponse>> ExpensesPostAsyncWithHttpInfo (string authorization, ExpenseSimpleDocument expenseSimpleDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesPost");
            // verify the required parameter 'expenseSimpleDocument' is set
            if (expenseSimpleDocument == null)
                throw new ApiException(400, "Missing required parameter 'expenseSimpleDocument' when calling ExpensesApi->ExpensesPost");

            var localVarPath = "/expenses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (expenseSimpleDocument != null && expenseSimpleDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseSimpleDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseSimpleDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseSimpleDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseSimpleDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseSimpleDocumentResponse)));
        }

        /// <summary>
        /// Share link expenses document. แชร์ลิงค์ เอกสารค่าใช้จ่าย ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ShareDocumentResponse</returns>
        public ShareDocumentResponse ExpensesSharedocumentPost (string authorization, ShareDocument shareDocument)
        {
             ApiResponse<ShareDocumentResponse> localVarResponse = ExpensesSharedocumentPostWithHttpInfo(authorization, shareDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Share link expenses document. แชร์ลิงค์ เอกสารค่าใช้จ่าย ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ApiResponse of ShareDocumentResponse</returns>
        public ApiResponse<ShareDocumentResponse> ExpensesSharedocumentPostWithHttpInfo (string authorization, ShareDocument shareDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesSharedocumentPost");
            // verify the required parameter 'shareDocument' is set
            if (shareDocument == null)
                throw new ApiException(400, "Missing required parameter 'shareDocument' when calling ExpensesApi->ExpensesSharedocumentPost");

            var localVarPath = "/expenses/sharedocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (shareDocument != null && shareDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(shareDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shareDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesSharedocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShareDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShareDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShareDocumentResponse)));
        }

        /// <summary>
        /// Share link expenses document. แชร์ลิงค์ เอกสารค่าใช้จ่าย ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ShareDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ShareDocumentResponse> ExpensesSharedocumentPostAsync (string authorization, ShareDocument shareDocument)
        {
             ApiResponse<ShareDocumentResponse> localVarResponse = await ExpensesSharedocumentPostAsyncWithHttpInfo(authorization, shareDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Share link expenses document. แชร์ลิงค์ เอกสารค่าใช้จ่าย ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ApiResponse (ShareDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShareDocumentResponse>> ExpensesSharedocumentPostAsyncWithHttpInfo (string authorization, ShareDocument shareDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesSharedocumentPost");
            // verify the required parameter 'shareDocument' is set
            if (shareDocument == null)
                throw new ApiException(400, "Missing required parameter 'shareDocument' when calling ExpensesApi->ExpensesSharedocumentPost");

            var localVarPath = "/expenses/sharedocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (shareDocument != null && shareDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(shareDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shareDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesSharedocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShareDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShareDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShareDocumentResponse)));
        }

        /// <summary>
        /// Create expenses document with payment. สร้างเอกสารค่าใช้จ่าย พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocumentWithPaymentPaid"></param>
        /// <returns>ExpenseSimpleDocumentResponse</returns>
        public ExpenseSimpleDocumentResponse ExpensesWithPaymentPost (string authorization, ExpenseSimpleDocumentWithPaymentPaid expenseSimpleDocumentWithPaymentPaid)
        {
             ApiResponse<ExpenseSimpleDocumentResponse> localVarResponse = ExpensesWithPaymentPostWithHttpInfo(authorization, expenseSimpleDocumentWithPaymentPaid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create expenses document with payment. สร้างเอกสารค่าใช้จ่าย พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocumentWithPaymentPaid"></param>
        /// <returns>ApiResponse of ExpenseSimpleDocumentResponse</returns>
        public ApiResponse<ExpenseSimpleDocumentResponse> ExpensesWithPaymentPostWithHttpInfo (string authorization, ExpenseSimpleDocumentWithPaymentPaid expenseSimpleDocumentWithPaymentPaid)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesWithPaymentPost");
            // verify the required parameter 'expenseSimpleDocumentWithPaymentPaid' is set
            if (expenseSimpleDocumentWithPaymentPaid == null)
                throw new ApiException(400, "Missing required parameter 'expenseSimpleDocumentWithPaymentPaid' when calling ExpensesApi->ExpensesWithPaymentPost");

            var localVarPath = "/expenses/with-payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (expenseSimpleDocumentWithPaymentPaid != null && expenseSimpleDocumentWithPaymentPaid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseSimpleDocumentWithPaymentPaid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseSimpleDocumentWithPaymentPaid; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesWithPaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseSimpleDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseSimpleDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseSimpleDocumentResponse)));
        }

        /// <summary>
        /// Create expenses document with payment. สร้างเอกสารค่าใช้จ่าย พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocumentWithPaymentPaid"></param>
        /// <returns>Task of ExpenseSimpleDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ExpenseSimpleDocumentResponse> ExpensesWithPaymentPostAsync (string authorization, ExpenseSimpleDocumentWithPaymentPaid expenseSimpleDocumentWithPaymentPaid)
        {
             ApiResponse<ExpenseSimpleDocumentResponse> localVarResponse = await ExpensesWithPaymentPostAsyncWithHttpInfo(authorization, expenseSimpleDocumentWithPaymentPaid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create expenses document with payment. สร้างเอกสารค่าใช้จ่าย พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="expenseSimpleDocumentWithPaymentPaid"></param>
        /// <returns>Task of ApiResponse (ExpenseSimpleDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExpenseSimpleDocumentResponse>> ExpensesWithPaymentPostAsyncWithHttpInfo (string authorization, ExpenseSimpleDocumentWithPaymentPaid expenseSimpleDocumentWithPaymentPaid)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ExpensesApi->ExpensesWithPaymentPost");
            // verify the required parameter 'expenseSimpleDocumentWithPaymentPaid' is set
            if (expenseSimpleDocumentWithPaymentPaid == null)
                throw new ApiException(400, "Missing required parameter 'expenseSimpleDocumentWithPaymentPaid' when calling ExpensesApi->ExpensesWithPaymentPost");

            var localVarPath = "/expenses/with-payment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (expenseSimpleDocumentWithPaymentPaid != null && expenseSimpleDocumentWithPaymentPaid.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(expenseSimpleDocumentWithPaymentPaid); // http body (model) parameter
            }
            else
            {
                localVarPostBody = expenseSimpleDocumentWithPaymentPaid; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ExpensesWithPaymentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExpenseSimpleDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ExpenseSimpleDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExpenseSimpleDocumentResponse)));
        }

    }
}
