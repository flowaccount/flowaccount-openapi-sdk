/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test    **PostMan Collection**   site: https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flowaccount.OpenAPITools.Client;
using Flowaccount.OpenAPITools.Model;

namespace Flowaccount.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBankAccountApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get list all My Bank Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>BankAccountResponse</returns>
        BankAccountResponse BankAccountsGet (string authorization);

        /// <summary>
        /// Get list all My Bank Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of BankAccountResponse</returns>
        ApiResponse<BankAccountResponse> BankAccountsGetWithHttpInfo (string authorization);
        /// <summary>
        /// Create bank account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="bankAccount"></param>
        /// <returns>BankAccountResponse</returns>
        BankAccountResponse BankAccountsPost (string authorization, BankAccount bankAccount);

        /// <summary>
        /// Create bank account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="bankAccount"></param>
        /// <returns>ApiResponse of BankAccountResponse</returns>
        ApiResponse<BankAccountResponse> BankAccountsPostWithHttpInfo (string authorization, BankAccount bankAccount);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get list all My Bank Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of BankAccountResponse</returns>
        System.Threading.Tasks.Task<BankAccountResponse> BankAccountsGetAsync (string authorization);

        /// <summary>
        /// Get list all My Bank Account
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ApiResponse (BankAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankAccountResponse>> BankAccountsGetAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// Create bank account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="bankAccount"></param>
        /// <returns>Task of BankAccountResponse</returns>
        System.Threading.Tasks.Task<BankAccountResponse> BankAccountsPostAsync (string authorization, BankAccount bankAccount);

        /// <summary>
        /// Create bank account.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="bankAccount"></param>
        /// <returns>Task of ApiResponse (BankAccountResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<BankAccountResponse>> BankAccountsPostAsyncWithHttpInfo (string authorization, BankAccount bankAccount);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BankAccountApi : IBankAccountApi
    {
        private Flowaccount.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BankAccountApi(String basePath)
        {
            this.Configuration = new Flowaccount.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountApi"/> class
        /// </summary>
        /// <returns></returns>
        public BankAccountApi()
        {
            this.Configuration = Flowaccount.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccountApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BankAccountApi(Flowaccount.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flowaccount.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flowaccount.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flowaccount.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get list all My Bank Account 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>BankAccountResponse</returns>
        public BankAccountResponse BankAccountsGet (string authorization)
        {
             ApiResponse<BankAccountResponse> localVarResponse = BankAccountsGetWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list all My Bank Account 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>ApiResponse of BankAccountResponse</returns>
        public ApiResponse<BankAccountResponse> BankAccountsGetWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BankAccountApi->BankAccountsGet");

            var localVarPath = "/bank-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BankAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BankAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccountResponse)));
        }

        /// <summary>
        /// Get list all My Bank Account 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of BankAccountResponse</returns>
        public async System.Threading.Tasks.Task<BankAccountResponse> BankAccountsGetAsync (string authorization)
        {
             ApiResponse<BankAccountResponse> localVarResponse = await BankAccountsGetAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list all My Bank Account 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <returns>Task of ApiResponse (BankAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankAccountResponse>> BankAccountsGetAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BankAccountApi->BankAccountsGet");

            var localVarPath = "/bank-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BankAccountsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BankAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccountResponse)));
        }

        /// <summary>
        /// Create bank account. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="bankAccount"></param>
        /// <returns>BankAccountResponse</returns>
        public BankAccountResponse BankAccountsPost (string authorization, BankAccount bankAccount)
        {
             ApiResponse<BankAccountResponse> localVarResponse = BankAccountsPostWithHttpInfo(authorization, bankAccount);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create bank account. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="bankAccount"></param>
        /// <returns>ApiResponse of BankAccountResponse</returns>
        public ApiResponse<BankAccountResponse> BankAccountsPostWithHttpInfo (string authorization, BankAccount bankAccount)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BankAccountApi->BankAccountsPost");
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
                throw new ApiException(400, "Missing required parameter 'bankAccount' when calling BankAccountApi->BankAccountsPost");

            var localVarPath = "/bank-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (bankAccount != null && bankAccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bankAccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bankAccount; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BankAccountsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BankAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccountResponse)));
        }

        /// <summary>
        /// Create bank account. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="bankAccount"></param>
        /// <returns>Task of BankAccountResponse</returns>
        public async System.Threading.Tasks.Task<BankAccountResponse> BankAccountsPostAsync (string authorization, BankAccount bankAccount)
        {
             ApiResponse<BankAccountResponse> localVarResponse = await BankAccountsPostAsyncWithHttpInfo(authorization, bankAccount);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create bank account. 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="bankAccount"></param>
        /// <returns>Task of ApiResponse (BankAccountResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BankAccountResponse>> BankAccountsPostAsyncWithHttpInfo (string authorization, BankAccount bankAccount)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BankAccountApi->BankAccountsPost");
            // verify the required parameter 'bankAccount' is set
            if (bankAccount == null)
                throw new ApiException(400, "Missing required parameter 'bankAccount' when calling BankAccountApi->BankAccountsPost");

            var localVarPath = "/bank-accounts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (bankAccount != null && bankAccount.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(bankAccount); // http body (model) parameter
            }
            else
            {
                localVarPostBody = bankAccount; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BankAccountsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BankAccountResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (BankAccountResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BankAccountResponse)));
        }

    }
}
