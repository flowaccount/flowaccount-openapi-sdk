/* 
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Flowaccount.OpenAPITools.Client;
using Flowaccount.OpenAPITools.Model;

namespace Flowaccount.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPurchaseOrderApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Send email purchase order document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารใบสั่งซื้อ ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>SendEmailResponse</returns>
        SendEmailResponse PurchasesOrdersEmailDocumentPost (string authorization, SendEmailCoppies sendEmailCoppies);

        /// <summary>
        /// Send email purchase order document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารใบสั่งซื้อ ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>ApiResponse of SendEmailResponse</returns>
        ApiResponse<SendEmailResponse> PurchasesOrdersEmailDocumentPostWithHttpInfo (string authorization, SendEmailCoppies sendEmailCoppies);
        /// <summary>
        /// Get list all purchase order documents.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบสั่งซื้อทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document purchase orders. &lt;br&gt;Example Pattern: &lt;ex&gt;/purchases-orders?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/purchases-orders?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse PurchasesOrdersGet (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));

        /// <summary>
        /// Get list all purchase order documents.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบสั่งซื้อทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document purchase orders. &lt;br&gt;Example Pattern: &lt;ex&gt;/purchases-orders?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/purchases-orders?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> PurchasesOrdersGetWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));
        /// <summary>
        /// Add Attachment to purchase order document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>AttachmentResponse</returns>
        AttachmentResponse PurchasesOrdersIdAttachmentPost (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Add Attachment to purchase order document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        ApiResponse<AttachmentResponse> PurchasesOrdersIdAttachmentPostWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Get purchase order document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>DeleteResponse</returns>
        DeleteResponse PurchasesOrdersIdDelete (string authorization, string id);

        /// <summary>
        /// Get purchase order document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        ApiResponse<DeleteResponse> PurchasesOrdersIdDeleteWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Get purchase order document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse PurchasesOrdersIdGet (string authorization, string id);

        /// <summary>
        /// Get purchase order document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> PurchasesOrdersIdGetWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Change status of purchase order document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารใบสั่งซื้อ สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse PurchasesOrdersIdStatusKeyStatusIdPost (string authorization, string id, string statusId);

        /// <summary>
        /// Change status of purchase order document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารใบสั่งซื้อ สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> PurchasesOrdersIdStatusKeyStatusIdPostWithHttpInfo (string authorization, string id, string statusId);
        /// <summary>
        /// Create purchase order document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบสั่งซื้อ แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>InlineDocumentResponse</returns>
        InlineDocumentResponse PurchasesOrdersInlinePost (string authorization, InlineDocument inlineDocument);

        /// <summary>
        /// Create purchase order document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบสั่งซื้อ แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        ApiResponse<InlineDocumentResponse> PurchasesOrdersInlinePostWithHttpInfo (string authorization, InlineDocument inlineDocument);
        /// <summary>
        /// Create purchase order document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบสั่งซื้อ เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>SimpleDocumentResponse</returns>
        SimpleDocumentResponse PurchasesOrdersPost (string authorization, SimpleDocument simpleDocument);

        /// <summary>
        /// Create purchase order document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบสั่งซื้อ เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>ApiResponse of SimpleDocumentResponse</returns>
        ApiResponse<SimpleDocumentResponse> PurchasesOrdersPostWithHttpInfo (string authorization, SimpleDocument simpleDocument);
        /// <summary>
        /// Share link purchase order document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารใบสั่งซื้อที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ShareDocumentResponse</returns>
        ShareDocumentResponse PurchasesOrdersSharedocumentPost (string authorization, ShareDocument shareDocument);

        /// <summary>
        /// Share link purchase order document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารใบสั่งซื้อที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ApiResponse of ShareDocumentResponse</returns>
        ApiResponse<ShareDocumentResponse> PurchasesOrdersSharedocumentPostWithHttpInfo (string authorization, ShareDocument shareDocument);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Send email purchase order document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารใบสั่งซื้อ ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>Task of SendEmailResponse</returns>
        System.Threading.Tasks.Task<SendEmailResponse> PurchasesOrdersEmailDocumentPostAsync (string authorization, SendEmailCoppies sendEmailCoppies);

        /// <summary>
        /// Send email purchase order document.
        /// </summary>
        /// <remarks>
        /// ส่งเอกสารใบสั่งซื้อ ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>Task of ApiResponse (SendEmailResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SendEmailResponse>> PurchasesOrdersEmailDocumentPostAsyncWithHttpInfo (string authorization, SendEmailCoppies sendEmailCoppies);
        /// <summary>
        /// Get list all purchase order documents.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบสั่งซื้อทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document purchase orders. &lt;br&gt;Example Pattern: &lt;ex&gt;/purchases-orders?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/purchases-orders?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> PurchasesOrdersGetAsync (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));

        /// <summary>
        /// Get list all purchase order documents.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบสั่งซื้อทั้งหมดในระบบ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document purchase orders. &lt;br&gt;Example Pattern: &lt;ex&gt;/purchases-orders?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/purchases-orders?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> PurchasesOrdersGetAsyncWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string));
        /// <summary>
        /// Add Attachment to purchase order document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>Task of AttachmentResponse</returns>
        System.Threading.Tasks.Task<AttachmentResponse> PurchasesOrdersIdAttachmentPostAsync (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));

        /// <summary>
        /// Add Attachment to purchase order document.
        /// </summary>
        /// <remarks>
        /// แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> PurchasesOrdersIdAttachmentPostAsyncWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream));
        /// <summary>
        /// Get purchase order document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of DeleteResponse</returns>
        System.Threading.Tasks.Task<DeleteResponse> PurchasesOrdersIdDeleteAsync (string authorization, string id);

        /// <summary>
        /// Get purchase order document.
        /// </summary>
        /// <remarks>
        /// ลบ เอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> PurchasesOrdersIdDeleteAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Get purchase order document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> PurchasesOrdersIdGetAsync (string authorization, string id);

        /// <summary>
        /// Get purchase order document.
        /// </summary>
        /// <remarks>
        /// เรียกดูข้อมูลเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> PurchasesOrdersIdGetAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Change status of purchase order document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารใบสั่งซื้อ สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> PurchasesOrdersIdStatusKeyStatusIdPostAsync (string authorization, string id, string statusId);

        /// <summary>
        /// Change status of purchase order document.
        /// </summary>
        /// <remarks>
        /// เปลี่ยนสถานะของเอกสารใบสั่งซื้อ สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> PurchasesOrdersIdStatusKeyStatusIdPostAsyncWithHttpInfo (string authorization, string id, string statusId);
        /// <summary>
        /// Create purchase order document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบสั่งซื้อ แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>Task of InlineDocumentResponse</returns>
        System.Threading.Tasks.Task<InlineDocumentResponse> PurchasesOrdersInlinePostAsync (string authorization, InlineDocument inlineDocument);

        /// <summary>
        /// Create purchase order document with discount and tax inline.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบสั่งซื้อ แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> PurchasesOrdersInlinePostAsyncWithHttpInfo (string authorization, InlineDocument inlineDocument);
        /// <summary>
        /// Create purchase order document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบสั่งซื้อ เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>Task of SimpleDocumentResponse</returns>
        System.Threading.Tasks.Task<SimpleDocumentResponse> PurchasesOrdersPostAsync (string authorization, SimpleDocument simpleDocument);

        /// <summary>
        /// Create purchase order document.
        /// </summary>
        /// <remarks>
        /// สร้างเอกสารใบสั่งซื้อ เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>Task of ApiResponse (SimpleDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SimpleDocumentResponse>> PurchasesOrdersPostAsyncWithHttpInfo (string authorization, SimpleDocument simpleDocument);
        /// <summary>
        /// Share link purchase order document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารใบสั่งซื้อที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ShareDocumentResponse</returns>
        System.Threading.Tasks.Task<ShareDocumentResponse> PurchasesOrdersSharedocumentPostAsync (string authorization, ShareDocument shareDocument);

        /// <summary>
        /// Share link purchase order document.
        /// </summary>
        /// <remarks>
        /// แชร์ลิงค์ เอกสารใบสั่งซื้อที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </remarks>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ApiResponse (ShareDocumentResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShareDocumentResponse>> PurchasesOrdersSharedocumentPostAsyncWithHttpInfo (string authorization, ShareDocument shareDocument);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PurchaseOrderApi : IPurchaseOrderApi
    {
        private Flowaccount.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PurchaseOrderApi(String basePath)
        {
            this.Configuration = new Flowaccount.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderApi"/> class
        /// </summary>
        /// <returns></returns>
        public PurchaseOrderApi()
        {
            this.Configuration = Flowaccount.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PurchaseOrderApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PurchaseOrderApi(Flowaccount.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Flowaccount.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Flowaccount.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Flowaccount.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Flowaccount.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Send email purchase order document. ส่งเอกสารใบสั่งซื้อ ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>SendEmailResponse</returns>
        public SendEmailResponse PurchasesOrdersEmailDocumentPost (string authorization, SendEmailCoppies sendEmailCoppies)
        {
             ApiResponse<SendEmailResponse> localVarResponse = PurchasesOrdersEmailDocumentPostWithHttpInfo(authorization, sendEmailCoppies);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send email purchase order document. ส่งเอกสารใบสั่งซื้อ ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>ApiResponse of SendEmailResponse</returns>
        public ApiResponse<SendEmailResponse> PurchasesOrdersEmailDocumentPostWithHttpInfo (string authorization, SendEmailCoppies sendEmailCoppies)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersEmailDocumentPost");
            // verify the required parameter 'sendEmailCoppies' is set
            if (sendEmailCoppies == null)
                throw new ApiException(400, "Missing required parameter 'sendEmailCoppies' when calling PurchaseOrderApi->PurchasesOrdersEmailDocumentPost");

            var localVarPath = "/purchases-orders/email-document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (sendEmailCoppies != null && sendEmailCoppies.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendEmailCoppies); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendEmailCoppies; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersEmailDocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendEmailResponse)));
        }

        /// <summary>
        /// Send email purchase order document. ส่งเอกสารใบสั่งซื้อ ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>Task of SendEmailResponse</returns>
        public async System.Threading.Tasks.Task<SendEmailResponse> PurchasesOrdersEmailDocumentPostAsync (string authorization, SendEmailCoppies sendEmailCoppies)
        {
             ApiResponse<SendEmailResponse> localVarResponse = await PurchasesOrdersEmailDocumentPostAsyncWithHttpInfo(authorization, sendEmailCoppies);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send email purchase order document. ส่งเอกสารใบสั่งซื้อ ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="sendEmailCoppies"></param>
        /// <returns>Task of ApiResponse (SendEmailResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SendEmailResponse>> PurchasesOrdersEmailDocumentPostAsyncWithHttpInfo (string authorization, SendEmailCoppies sendEmailCoppies)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersEmailDocumentPost");
            // verify the required parameter 'sendEmailCoppies' is set
            if (sendEmailCoppies == null)
                throw new ApiException(400, "Missing required parameter 'sendEmailCoppies' when calling PurchaseOrderApi->PurchasesOrdersEmailDocumentPost");

            var localVarPath = "/purchases-orders/email-document";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (sendEmailCoppies != null && sendEmailCoppies.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendEmailCoppies); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendEmailCoppies; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersEmailDocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SendEmailResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SendEmailResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SendEmailResponse)));
        }

        /// <summary>
        /// Get list all purchase order documents. เรียกดูข้อมูลเอกสารใบสั่งซื้อทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document purchase orders. &lt;br&gt;Example Pattern: &lt;ex&gt;/purchases-orders?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/purchases-orders?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse PurchasesOrdersGet (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = PurchasesOrdersGetWithHttpInfo(currentPage, pageSize, authorization, sortBy, filter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get list all purchase order documents. เรียกดูข้อมูลเอกสารใบสั่งซื้อทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document purchase orders. &lt;br&gt;Example Pattern: &lt;ex&gt;/purchases-orders?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/purchases-orders?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> PurchasesOrdersGetWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
            // verify the required parameter 'currentPage' is set
            if (currentPage == null)
                throw new ApiException(400, "Missing required parameter 'currentPage' when calling PurchaseOrderApi->PurchasesOrdersGet");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling PurchaseOrderApi->PurchasesOrdersGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersGet");

            var localVarPath = "/purchases-orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Get list all purchase order documents. เรียกดูข้อมูลเอกสารใบสั่งซื้อทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document purchase orders. &lt;br&gt;Example Pattern: &lt;ex&gt;/purchases-orders?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/purchases-orders?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> PurchasesOrdersGetAsync (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await PurchasesOrdersGetAsyncWithHttpInfo(currentPage, pageSize, authorization, sortBy, filter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get list all purchase order documents. เรียกดูข้อมูลเอกสารใบสั่งซื้อทั้งหมดในระบบ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentPage">Query current page document purchase orders. &lt;br&gt;Example Pattern: &lt;ex&gt;/purchases-orders?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/purchases-orders?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt;</param>
        /// <param name="pageSize">Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?pageSize&#x3D;20 &lt;/ex&gt;</param>
        /// <param name="authorization"></param>
        /// <param name="sortBy"> (optional)</param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> PurchasesOrdersGetAsyncWithHttpInfo (int currentPage, int pageSize, string authorization, string sortBy = default(string), string filter = default(string))
        {
            // verify the required parameter 'currentPage' is set
            if (currentPage == null)
                throw new ApiException(400, "Missing required parameter 'currentPage' when calling PurchaseOrderApi->PurchasesOrdersGet");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling PurchaseOrderApi->PurchasesOrdersGet");
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersGet");

            var localVarPath = "/purchases-orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (currentPage != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "currentPage", currentPage)); // query parameter
            if (pageSize != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "pageSize", pageSize)); // query parameter
            if (sortBy != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "sortBy", sortBy)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Add Attachment to purchase order document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>AttachmentResponse</returns>
        public AttachmentResponse PurchasesOrdersIdAttachmentPost (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
             ApiResponse<AttachmentResponse> localVarResponse = PurchasesOrdersIdAttachmentPostWithHttpInfo(authorization, id, file);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add Attachment to purchase order document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>ApiResponse of AttachmentResponse</returns>
        public ApiResponse<AttachmentResponse> PurchasesOrdersIdAttachmentPostWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersIdAttachmentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PurchaseOrderApi->PurchasesOrdersIdAttachmentPost");

            var localVarPath = "/purchases-orders/{id}/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersIdAttachmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Add Attachment to purchase order document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>Task of AttachmentResponse</returns>
        public async System.Threading.Tasks.Task<AttachmentResponse> PurchasesOrdersIdAttachmentPostAsync (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
             ApiResponse<AttachmentResponse> localVarResponse = await PurchasesOrdersIdAttachmentPostAsyncWithHttpInfo(authorization, id, file);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add Attachment to purchase order document. แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">documentId หรือ recordId ของเอกสารที่ต้องการแนบ</param>
        /// <param name="file">รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)</param>
        /// <returns>Task of ApiResponse (AttachmentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AttachmentResponse>> PurchasesOrdersIdAttachmentPostAsyncWithHttpInfo (string authorization, string id, System.IO.Stream file = default(System.IO.Stream))
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersIdAttachmentPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PurchaseOrderApi->PurchasesOrdersIdAttachmentPost");

            var localVarPath = "/purchases-orders/{id}/attachment";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (file != null) localVarFileParams.Add("file", this.Configuration.ApiClient.ParameterToFile("file", file));


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersIdAttachmentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AttachmentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AttachmentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AttachmentResponse)));
        }

        /// <summary>
        /// Get purchase order document. ลบ เอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>DeleteResponse</returns>
        public DeleteResponse PurchasesOrdersIdDelete (string authorization, string id)
        {
             ApiResponse<DeleteResponse> localVarResponse = PurchasesOrdersIdDeleteWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get purchase order document. ลบ เอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>ApiResponse of DeleteResponse</returns>
        public ApiResponse<DeleteResponse> PurchasesOrdersIdDeleteWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PurchaseOrderApi->PurchasesOrdersIdDelete");

            var localVarPath = "/purchases-orders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Get purchase order document. ลบ เอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of DeleteResponse</returns>
        public async System.Threading.Tasks.Task<DeleteResponse> PurchasesOrdersIdDeleteAsync (string authorization, string id)
        {
             ApiResponse<DeleteResponse> localVarResponse = await PurchasesOrdersIdDeleteAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get purchase order document. ลบ เอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of ApiResponse (DeleteResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> PurchasesOrdersIdDeleteAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersIdDelete");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PurchaseOrderApi->PurchasesOrdersIdDelete");

            var localVarPath = "/purchases-orders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersIdDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeleteResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DeleteResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeleteResponse)));
        }

        /// <summary>
        /// Get purchase order document. เรียกดูข้อมูลเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse PurchasesOrdersIdGet (string authorization, string id)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = PurchasesOrdersIdGetWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get purchase order document. เรียกดูข้อมูลเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> PurchasesOrdersIdGetWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PurchaseOrderApi->PurchasesOrdersIdGet");

            var localVarPath = "/purchases-orders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Get purchase order document. เรียกดูข้อมูลเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> PurchasesOrdersIdGetAsync (string authorization, string id)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await PurchasesOrdersIdGetAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get purchase order document. เรียกดูข้อมูลเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> PurchasesOrdersIdGetAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersIdGet");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PurchaseOrderApi->PurchasesOrdersIdGet");

            var localVarPath = "/purchases-orders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Change status of purchase order document. เปลี่ยนสถานะของเอกสารใบสั่งซื้อ สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse PurchasesOrdersIdStatusKeyStatusIdPost (string authorization, string id, string statusId)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = PurchasesOrdersIdStatusKeyStatusIdPostWithHttpInfo(authorization, id, statusId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change status of purchase order document. เปลี่ยนสถานะของเอกสารใบสั่งซื้อ สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> PurchasesOrdersIdStatusKeyStatusIdPostWithHttpInfo (string authorization, string id, string statusId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersIdStatusKeyStatusIdPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PurchaseOrderApi->PurchasesOrdersIdStatusKeyStatusIdPost");
            // verify the required parameter 'statusId' is set
            if (statusId == null)
                throw new ApiException(400, "Missing required parameter 'statusId' when calling PurchaseOrderApi->PurchasesOrdersIdStatusKeyStatusIdPost");

            var localVarPath = "/purchases-orders/{id}/status-key/{statusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusId != null) localVarPathParams.Add("statusId", this.Configuration.ApiClient.ParameterToString(statusId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersIdStatusKeyStatusIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Change status of purchase order document. เปลี่ยนสถานะของเอกสารใบสั่งซื้อ สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> PurchasesOrdersIdStatusKeyStatusIdPostAsync (string authorization, string id, string statusId)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await PurchasesOrdersIdStatusKeyStatusIdPostAsyncWithHttpInfo(authorization, id, statusId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change status of purchase order document. เปลี่ยนสถานะของเอกสารใบสั่งซื้อ สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="id">ID เอกสารใช้ recordId</param>
        /// <param name="statusId">เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; void &#x3D; ยกเลิก</param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> PurchasesOrdersIdStatusKeyStatusIdPostAsyncWithHttpInfo (string authorization, string id, string statusId)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersIdStatusKeyStatusIdPost");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PurchaseOrderApi->PurchasesOrdersIdStatusKeyStatusIdPost");
            // verify the required parameter 'statusId' is set
            if (statusId == null)
                throw new ApiException(400, "Missing required parameter 'statusId' when calling PurchaseOrderApi->PurchasesOrdersIdStatusKeyStatusIdPost");

            var localVarPath = "/purchases-orders/{id}/status-key/{statusId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (statusId != null) localVarPathParams.Add("statusId", this.Configuration.ApiClient.ParameterToString(statusId)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersIdStatusKeyStatusIdPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Create purchase order document with discount and tax inline. สร้างเอกสารใบสั่งซื้อ แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>InlineDocumentResponse</returns>
        public InlineDocumentResponse PurchasesOrdersInlinePost (string authorization, InlineDocument inlineDocument)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = PurchasesOrdersInlinePostWithHttpInfo(authorization, inlineDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create purchase order document with discount and tax inline. สร้างเอกสารใบสั่งซื้อ แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>ApiResponse of InlineDocumentResponse</returns>
        public ApiResponse<InlineDocumentResponse> PurchasesOrdersInlinePostWithHttpInfo (string authorization, InlineDocument inlineDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersInlinePost");
            // verify the required parameter 'inlineDocument' is set
            if (inlineDocument == null)
                throw new ApiException(400, "Missing required parameter 'inlineDocument' when calling PurchaseOrderApi->PurchasesOrdersInlinePost");

            var localVarPath = "/purchases-orders/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (inlineDocument != null && inlineDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersInlinePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Create purchase order document with discount and tax inline. สร้างเอกสารใบสั่งซื้อ แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>Task of InlineDocumentResponse</returns>
        public async System.Threading.Tasks.Task<InlineDocumentResponse> PurchasesOrdersInlinePostAsync (string authorization, InlineDocument inlineDocument)
        {
             ApiResponse<InlineDocumentResponse> localVarResponse = await PurchasesOrdersInlinePostAsyncWithHttpInfo(authorization, inlineDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create purchase order document with discount and tax inline. สร้างเอกสารใบสั่งซื้อ แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="inlineDocument"></param>
        /// <returns>Task of ApiResponse (InlineDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineDocumentResponse>> PurchasesOrdersInlinePostAsyncWithHttpInfo (string authorization, InlineDocument inlineDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersInlinePost");
            // verify the required parameter 'inlineDocument' is set
            if (inlineDocument == null)
                throw new ApiException(400, "Missing required parameter 'inlineDocument' when calling PurchaseOrderApi->PurchasesOrdersInlinePost");

            var localVarPath = "/purchases-orders/inline";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (inlineDocument != null && inlineDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(inlineDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = inlineDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersInlinePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineDocumentResponse)));
        }

        /// <summary>
        /// Create purchase order document. สร้างเอกสารใบสั่งซื้อ เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>SimpleDocumentResponse</returns>
        public SimpleDocumentResponse PurchasesOrdersPost (string authorization, SimpleDocument simpleDocument)
        {
             ApiResponse<SimpleDocumentResponse> localVarResponse = PurchasesOrdersPostWithHttpInfo(authorization, simpleDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create purchase order document. สร้างเอกสารใบสั่งซื้อ เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>ApiResponse of SimpleDocumentResponse</returns>
        public ApiResponse<SimpleDocumentResponse> PurchasesOrdersPostWithHttpInfo (string authorization, SimpleDocument simpleDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersPost");
            // verify the required parameter 'simpleDocument' is set
            if (simpleDocument == null)
                throw new ApiException(400, "Missing required parameter 'simpleDocument' when calling PurchaseOrderApi->PurchasesOrdersPost");

            var localVarPath = "/purchases-orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (simpleDocument != null && simpleDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(simpleDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = simpleDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimpleDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleDocumentResponse)));
        }

        /// <summary>
        /// Create purchase order document. สร้างเอกสารใบสั่งซื้อ เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>Task of SimpleDocumentResponse</returns>
        public async System.Threading.Tasks.Task<SimpleDocumentResponse> PurchasesOrdersPostAsync (string authorization, SimpleDocument simpleDocument)
        {
             ApiResponse<SimpleDocumentResponse> localVarResponse = await PurchasesOrdersPostAsyncWithHttpInfo(authorization, simpleDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create purchase order document. สร้างเอกสารใบสั่งซื้อ เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="simpleDocument"></param>
        /// <returns>Task of ApiResponse (SimpleDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SimpleDocumentResponse>> PurchasesOrdersPostAsyncWithHttpInfo (string authorization, SimpleDocument simpleDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersPost");
            // verify the required parameter 'simpleDocument' is set
            if (simpleDocument == null)
                throw new ApiException(400, "Missing required parameter 'simpleDocument' when calling PurchaseOrderApi->PurchasesOrdersPost");

            var localVarPath = "/purchases-orders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (simpleDocument != null && simpleDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(simpleDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = simpleDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SimpleDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SimpleDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SimpleDocumentResponse)));
        }

        /// <summary>
        /// Share link purchase order document. แชร์ลิงค์ เอกสารใบสั่งซื้อที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ShareDocumentResponse</returns>
        public ShareDocumentResponse PurchasesOrdersSharedocumentPost (string authorization, ShareDocument shareDocument)
        {
             ApiResponse<ShareDocumentResponse> localVarResponse = PurchasesOrdersSharedocumentPostWithHttpInfo(authorization, shareDocument);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Share link purchase order document. แชร์ลิงค์ เอกสารใบสั่งซื้อที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>ApiResponse of ShareDocumentResponse</returns>
        public ApiResponse<ShareDocumentResponse> PurchasesOrdersSharedocumentPostWithHttpInfo (string authorization, ShareDocument shareDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersSharedocumentPost");
            // verify the required parameter 'shareDocument' is set
            if (shareDocument == null)
                throw new ApiException(400, "Missing required parameter 'shareDocument' when calling PurchaseOrderApi->PurchasesOrdersSharedocumentPost");

            var localVarPath = "/purchases-orders/sharedocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (shareDocument != null && shareDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(shareDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shareDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersSharedocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShareDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShareDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShareDocumentResponse)));
        }

        /// <summary>
        /// Share link purchase order document. แชร์ลิงค์ เอกสารใบสั่งซื้อที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ShareDocumentResponse</returns>
        public async System.Threading.Tasks.Task<ShareDocumentResponse> PurchasesOrdersSharedocumentPostAsync (string authorization, ShareDocument shareDocument)
        {
             ApiResponse<ShareDocumentResponse> localVarResponse = await PurchasesOrdersSharedocumentPostAsyncWithHttpInfo(authorization, shareDocument);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Share link purchase order document. แชร์ลิงค์ เอกสารใบสั่งซื้อที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
        /// </summary>
        /// <exception cref="Flowaccount.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization"></param>
        /// <param name="shareDocument"></param>
        /// <returns>Task of ApiResponse (ShareDocumentResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ShareDocumentResponse>> PurchasesOrdersSharedocumentPostAsyncWithHttpInfo (string authorization, ShareDocument shareDocument)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling PurchaseOrderApi->PurchasesOrdersSharedocumentPost");
            // verify the required parameter 'shareDocument' is set
            if (shareDocument == null)
                throw new ApiException(400, "Missing required parameter 'shareDocument' when calling PurchaseOrderApi->PurchasesOrdersSharedocumentPost");

            var localVarPath = "/purchases-orders/sharedocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", this.Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (shareDocument != null && shareDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(shareDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = shareDocument; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PurchasesOrdersSharedocumentPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ShareDocumentResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ShareDocumentResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ShareDocumentResponse)));
        }

    }
}
