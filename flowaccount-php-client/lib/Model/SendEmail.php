<?php
/**
 * SendEmail
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendEmail Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class SendEmail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = 'document_structure_type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendEmail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'document_id' => 'int',
        'fromemail' => 'string',
        'toemail' => 'string',
        'c_c_myself' => 'bool',
        'cc_email' => 'string',
        'bcc_email' => 'string',
        'subject' => 'string',
        'message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'document_id' => 'int64',
        'fromemail' => null,
        'toemail' => null,
        'c_c_myself' => null,
        'cc_email' => null,
        'bcc_email' => null,
        'subject' => null,
        'message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'document_id' => 'documentId',
        'fromemail' => 'fromemail',
        'toemail' => 'toemail',
        'c_c_myself' => 'cCMyself',
        'cc_email' => 'ccEmail',
        'bcc_email' => 'bccEmail',
        'subject' => 'subject',
        'message' => 'message'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'document_id' => 'setDocumentId',
        'fromemail' => 'setFromemail',
        'toemail' => 'setToemail',
        'c_c_myself' => 'setCCMyself',
        'cc_email' => 'setCcEmail',
        'bcc_email' => 'setBccEmail',
        'subject' => 'setSubject',
        'message' => 'setMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'document_id' => 'getDocumentId',
        'fromemail' => 'getFromemail',
        'toemail' => 'getToemail',
        'c_c_myself' => 'getCCMyself',
        'cc_email' => 'getCcEmail',
        'bcc_email' => 'getBccEmail',
        'subject' => 'getSubject',
        'message' => 'getMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['fromemail'] = isset($data['fromemail']) ? $data['fromemail'] : null;
        $this->container['toemail'] = isset($data['toemail']) ? $data['toemail'] : null;
        $this->container['c_c_myself'] = isset($data['c_c_myself']) ? $data['c_c_myself'] : true;
        $this->container['cc_email'] = isset($data['cc_email']) ? $data['cc_email'] : null;
        $this->container['bcc_email'] = isset($data['bcc_email']) ? $data['bcc_email'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;

        // Initialize discriminator property with the model name.
        $this->container['document_structure_type'] = static::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['document_id'] === null) {
            $invalidProperties[] = "'document_id' can't be null";
        }
        if ($this->container['fromemail'] === null) {
            $invalidProperties[] = "'fromemail' can't be null";
        }
        if ($this->container['toemail'] === null) {
            $invalidProperties[] = "'toemail' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets document_id
     *
     * @return int
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param int $document_id documentId หรือ recordId ของเอกสารที่ต้องการส่งอีเมล
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets fromemail
     *
     * @return string
     */
    public function getFromemail()
    {
        return $this->container['fromemail'];
    }

    /**
     * Sets fromemail
     *
     * @param string $fromemail ใส่อีเมลผู้ส่ง <br> <ex>Example: myemail@email.com</ex>
     *
     * @return $this
     */
    public function setFromemail($fromemail)
    {
        $this->container['fromemail'] = $fromemail;

        return $this;
    }

    /**
     * Gets toemail
     *
     * @return string
     */
    public function getToemail()
    {
        return $this->container['toemail'];
    }

    /**
     * Sets toemail
     *
     * @param string $toemail ใส่อีเมลผู้รับ <br> <ex>Example: contact@email.com</ex>
     *
     * @return $this
     */
    public function setToemail($toemail)
    {
        $this->container['toemail'] = $toemail;

        return $this;
    }

    /**
     * Gets c_c_myself
     *
     * @return bool|null
     */
    public function getCCMyself()
    {
        return $this->container['c_c_myself'];
    }

    /**
     * Sets c_c_myself
     *
     * @param bool|null $c_c_myself ส่งสำเนาหาตนเอง
     *
     * @return $this
     */
    public function setCCMyself($c_c_myself)
    {
        $this->container['c_c_myself'] = $c_c_myself;

        return $this;
    }

    /**
     * Gets cc_email
     *
     * @return string|null
     */
    public function getCcEmail()
    {
        return $this->container['cc_email'];
    }

    /**
     * Sets cc_email
     *
     * @param string|null $cc_email สำเนา (CC) <br> <ex>Example: cc@email.com</ex>
     *
     * @return $this
     */
    public function setCcEmail($cc_email)
    {
        $this->container['cc_email'] = $cc_email;

        return $this;
    }

    /**
     * Gets bcc_email
     *
     * @return string|null
     */
    public function getBccEmail()
    {
        return $this->container['bcc_email'];
    }

    /**
     * Sets bcc_email
     *
     * @param string|null $bcc_email สำเนาลับ (BCC) <br> <ex>Example: bcc@email.com</ex>
     *
     * @return $this
     */
    public function setBccEmail($bcc_email)
    {
        $this->container['bcc_email'] = $bcc_email;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject หัวข้อ / ชื่อเรื่อง
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message ข้อความ เนื้อหาของ email
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


