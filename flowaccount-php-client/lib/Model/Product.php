<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * FlowAccount.com โปรแกรมบัญชีออนไลน์ใช้งานง่าย สำหรับธุรกิจที่พึ่งเริ่มต้น   # Introduction **Servers Production**    site: https://www.flowaccount.com    api url: https://openapi.flowaccount.com/v1    **Beta test**   site: http://sandbox-new.flowaccount.com/    api url: https://openapi.flowaccount.com/test
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer@flowaccount.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'type' => 'int',
        'code' => 'string',
        'name' => 'string',
        'sell_description' => 'string',
        'sell_price' => 'float',
        'sell_vat_type' => 'int',
        'unit_name' => 'string',
        'category_name' => 'string',
        'barcode' => 'string',
        'buy_description' => 'string',
        'buy_price' => 'float',
        'buy_vat_type' => 'int',
        'inventory_published_on' => 'string',
        'inventory_quantity' => 'float',
        'inventory_price' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'type' => 'int64',
        'code' => null,
        'name' => null,
        'sell_description' => null,
        'sell_price' => 'decimal',
        'sell_vat_type' => 'int64',
        'unit_name' => null,
        'category_name' => null,
        'barcode' => null,
        'buy_description' => null,
        'buy_price' => 'decimal',
        'buy_vat_type' => 'int64',
        'inventory_published_on' => null,
        'inventory_quantity' => 'decimal',
        'inventory_price' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'code' => 'code',
        'name' => 'name',
        'sell_description' => 'sellDescription',
        'sell_price' => 'sellPrice',
        'sell_vat_type' => 'sellVatType',
        'unit_name' => 'unitName',
        'category_name' => 'categoryName',
        'barcode' => 'barcode',
        'buy_description' => 'buyDescription',
        'buy_price' => 'buyPrice',
        'buy_vat_type' => 'buyVatType',
        'inventory_published_on' => 'inventoryPublishedOn',
        'inventory_quantity' => 'inventoryQuantity',
        'inventory_price' => 'inventoryPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'code' => 'setCode',
        'name' => 'setName',
        'sell_description' => 'setSellDescription',
        'sell_price' => 'setSellPrice',
        'sell_vat_type' => 'setSellVatType',
        'unit_name' => 'setUnitName',
        'category_name' => 'setCategoryName',
        'barcode' => 'setBarcode',
        'buy_description' => 'setBuyDescription',
        'buy_price' => 'setBuyPrice',
        'buy_vat_type' => 'setBuyVatType',
        'inventory_published_on' => 'setInventoryPublishedOn',
        'inventory_quantity' => 'setInventoryQuantity',
        'inventory_price' => 'setInventoryPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'code' => 'getCode',
        'name' => 'getName',
        'sell_description' => 'getSellDescription',
        'sell_price' => 'getSellPrice',
        'sell_vat_type' => 'getSellVatType',
        'unit_name' => 'getUnitName',
        'category_name' => 'getCategoryName',
        'barcode' => 'getBarcode',
        'buy_description' => 'getBuyDescription',
        'buy_price' => 'getBuyPrice',
        'buy_vat_type' => 'getBuyVatType',
        'inventory_published_on' => 'getInventoryPublishedOn',
        'inventory_quantity' => 'getInventoryQuantity',
        'inventory_price' => 'getInventoryPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : 1;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['sell_description'] = isset($data['sell_description']) ? $data['sell_description'] : null;
        $this->container['sell_price'] = isset($data['sell_price']) ? $data['sell_price'] : null;
        $this->container['sell_vat_type'] = isset($data['sell_vat_type']) ? $data['sell_vat_type'] : 3;
        $this->container['unit_name'] = isset($data['unit_name']) ? $data['unit_name'] : null;
        $this->container['category_name'] = isset($data['category_name']) ? $data['category_name'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['buy_description'] = isset($data['buy_description']) ? $data['buy_description'] : null;
        $this->container['buy_price'] = isset($data['buy_price']) ? $data['buy_price'] : null;
        $this->container['buy_vat_type'] = isset($data['buy_vat_type']) ? $data['buy_vat_type'] : 3;
        $this->container['inventory_published_on'] = isset($data['inventory_published_on']) ? $data['inventory_published_on'] : '2020-01-01';
        $this->container['inventory_quantity'] = isset($data['inventory_quantity']) ? $data['inventory_quantity'] : null;
        $this->container['inventory_price'] = isset($data['inventory_price']) ? $data['inventory_price'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type ประเภทสินค้า: 1 = บริการ / 3 = ไม่นับสต๊อก / 5 = นับสต๊อก
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code รหัสสินค้า / SKU <br> <ex>Example: P001</ex>
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name ชื่อสินค้า <br> <ex>Example: Product</ex>
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets sell_description
     *
     * @return string|null
     */
    public function getSellDescription()
    {
        return $this->container['sell_description'];
    }

    /**
     * Sets sell_description
     *
     * @param string|null $sell_description รายละเอียดสินค้า ฝั่งขาย
     *
     * @return $this
     */
    public function setSellDescription($sell_description)
    {
        $this->container['sell_description'] = $sell_description;

        return $this;
    }

    /**
     * Gets sell_price
     *
     * @return float|null
     */
    public function getSellPrice()
    {
        return $this->container['sell_price'];
    }

    /**
     * Sets sell_price
     *
     * @param float|null $sell_price ราคาขายสินค้า
     *
     * @return $this
     */
    public function setSellPrice($sell_price)
    {
        $this->container['sell_price'] = $sell_price;

        return $this;
    }

    /**
     * Gets sell_vat_type
     *
     * @return int|null
     */
    public function getSellVatType()
    {
        return $this->container['sell_vat_type'];
    }

    /**
     * Sets sell_vat_type
     *
     * @param int|null $sell_vat_type ภาษีขาย: <br> 1 = ราคาขายรวมภาษี <br> 3 = ราคาขายไม่รวมภาษี <br> 5 = ราคาขายภาษี 0% <br> 7 = ราคาขายสินค้าได้รับการยกเว้นภาษี
     *
     * @return $this
     */
    public function setSellVatType($sell_vat_type)
    {
        $this->container['sell_vat_type'] = $sell_vat_type;

        return $this;
    }

    /**
     * Gets unit_name
     *
     * @return string|null
     */
    public function getUnitName()
    {
        return $this->container['unit_name'];
    }

    /**
     * Sets unit_name
     *
     * @param string|null $unit_name หน่วยสินค้า
     *
     * @return $this
     */
    public function setUnitName($unit_name)
    {
        $this->container['unit_name'] = $unit_name;

        return $this;
    }

    /**
     * Gets category_name
     *
     * @return string|null
     */
    public function getCategoryName()
    {
        return $this->container['category_name'];
    }

    /**
     * Sets category_name
     *
     * @param string|null $category_name หมวดสินค้า
     *
     * @return $this
     */
    public function setCategoryName($category_name)
    {
        $this->container['category_name'] = $category_name;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string|null
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string|null $barcode บาร์โค้ด
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets buy_description
     *
     * @return string|null
     */
    public function getBuyDescription()
    {
        return $this->container['buy_description'];
    }

    /**
     * Sets buy_description
     *
     * @param string|null $buy_description รายละเอียดสินค้า ฝั่งซื้อ
     *
     * @return $this
     */
    public function setBuyDescription($buy_description)
    {
        $this->container['buy_description'] = $buy_description;

        return $this;
    }

    /**
     * Gets buy_price
     *
     * @return float|null
     */
    public function getBuyPrice()
    {
        return $this->container['buy_price'];
    }

    /**
     * Sets buy_price
     *
     * @param float|null $buy_price ราคาซื้อสินค้า
     *
     * @return $this
     */
    public function setBuyPrice($buy_price)
    {
        $this->container['buy_price'] = $buy_price;

        return $this;
    }

    /**
     * Gets buy_vat_type
     *
     * @return int|null
     */
    public function getBuyVatType()
    {
        return $this->container['buy_vat_type'];
    }

    /**
     * Sets buy_vat_type
     *
     * @param int|null $buy_vat_type ภาษีซื้อ: <br> 1 = ราคาซื้อรวมภาษี <br> 3 = ราคาซื้อไม่รวมภาษี <br> 5 = ราคาซื้อภาษี 0% <br> 7 = ราคาซื้อสินค้าได้รับการยกเว้นภาษี
     *
     * @return $this
     */
    public function setBuyVatType($buy_vat_type)
    {
        $this->container['buy_vat_type'] = $buy_vat_type;

        return $this;
    }

    /**
     * Gets inventory_published_on
     *
     * @return string|null
     */
    public function getInventoryPublishedOn()
    {
        return $this->container['inventory_published_on'];
    }

    /**
     * Sets inventory_published_on
     *
     * @param string|null $inventory_published_on วันที่ตั้งต้นสินค้า รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
     *
     * @return $this
     */
    public function setInventoryPublishedOn($inventory_published_on)
    {
        $this->container['inventory_published_on'] = $inventory_published_on;

        return $this;
    }

    /**
     * Gets inventory_quantity
     *
     * @return float|null
     */
    public function getInventoryQuantity()
    {
        return $this->container['inventory_quantity'];
    }

    /**
     * Sets inventory_quantity
     *
     * @param float|null $inventory_quantity จำนวนยอดตั้งต้นสินค้า
     *
     * @return $this
     */
    public function setInventoryQuantity($inventory_quantity)
    {
        $this->container['inventory_quantity'] = $inventory_quantity;

        return $this;
    }

    /**
     * Gets inventory_price
     *
     * @return float|null
     */
    public function getInventoryPrice()
    {
        return $this->container['inventory_price'];
    }

    /**
     * Sets inventory_price
     *
     * @param float|null $inventory_price ราคาซื้อสินค้า
     *
     * @return $this
     */
    public function setInventoryPrice($inventory_price)
    {
        $this->container['inventory_price'] = $inventory_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


