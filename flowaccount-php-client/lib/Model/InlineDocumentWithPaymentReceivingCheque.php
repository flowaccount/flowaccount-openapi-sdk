<?php
/**
 * InlineDocumentWithPaymentReceivingCheque
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.3.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineDocumentWithPaymentReceivingCheque Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineDocumentWithPaymentReceivingCheque implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = 'document_payment_structure_type';

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InlineDocumentWithPaymentReceivingCheque';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'contact_code' => 'string',
        'contact_name' => 'string',
        'contact_address' => 'string',
        'contact_tax_id' => 'string',
        'contact_branch' => 'string',
        'contact_person' => 'string',
        'contact_email' => 'string',
        'contact_number' => 'string',
        'contact_zip_code' => 'string',
        'contact_group' => 'int',
        'published_on' => '\DateTime',
        'credit_type' => 'int',
        'credit_days' => 'int',
        'due_date' => '\DateTime',
        'sales_name' => 'string',
        'project_name' => 'string',
        'reference' => 'string',
        'is_vat_inclusive' => 'bool',
        'use_receipt_deduction' => 'bool',
        'items' => '\OpenAPI\Client\Model\SimpleProductItem[]',
        'sub_total' => 'float',
        'discount_percentage' => 'int',
        'discount_amount' => 'float',
        'total_after_discount' => 'float',
        'is_vat' => 'bool',
        'vat_amount' => 'float',
        'grand_total' => 'float',
        'discount_type' => 'int',
        'use_inline_discount' => 'bool',
        'use_inline_vat' => 'bool',
        'exempt_amount' => 'float',
        'vatable_amount' => 'float',
        'document_show_withholding_tax' => 'bool',
        'document_withholding_tax_percentage' => 'int',
        'document_withholding_tax_amount' => 'float',
        'document_deduction_type' => 'int',
        'document_deduction_amount' => 'float',
        'remarks' => 'string',
        'internal_notes' => 'string',
        'show_signature_or_stamp' => 'bool',
        'document_reference' => '\OpenAPI\Client\Model\UpgradeDocument[]',
        'document_payment_structure_type' => 'string',
        'payment_method' => 'int',
        'payment_date' => '\DateTime',
        'collected' => 'float',
        'payment_deduction_type' => 'int',
        'payment_deduction_amount' => 'float',
        'withheld_percentage' => 'int',
        'withheld_amount' => 'float',
        'cheque_date' => '\DateTime',
        'cheque_number' => 'string',
        'cheque_bank_account_id' => 'int',
        'payment_remarks' => 'string',
        'remaining_collected_type' => 'int',
        'remaining_collected' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'contact_code' => null,
        'contact_name' => null,
        'contact_address' => null,
        'contact_tax_id' => null,
        'contact_branch' => null,
        'contact_person' => null,
        'contact_email' => null,
        'contact_number' => null,
        'contact_zip_code' => null,
        'contact_group' => null,
        'published_on' => 'date',
        'credit_type' => null,
        'credit_days' => null,
        'due_date' => 'date',
        'sales_name' => null,
        'project_name' => null,
        'reference' => null,
        'is_vat_inclusive' => null,
        'use_receipt_deduction' => null,
        'items' => null,
        'sub_total' => 'decimal',
        'discount_percentage' => null,
        'discount_amount' => 'decimal',
        'total_after_discount' => 'decimal',
        'is_vat' => null,
        'vat_amount' => 'decimal',
        'grand_total' => 'decimal',
        'discount_type' => null,
        'use_inline_discount' => null,
        'use_inline_vat' => null,
        'exempt_amount' => 'decimal',
        'vatable_amount' => 'decimal',
        'document_show_withholding_tax' => null,
        'document_withholding_tax_percentage' => null,
        'document_withholding_tax_amount' => 'decimal',
        'document_deduction_type' => null,
        'document_deduction_amount' => 'decimal',
        'remarks' => null,
        'internal_notes' => null,
        'show_signature_or_stamp' => null,
        'document_reference' => null,
        'document_payment_structure_type' => null,
        'payment_method' => 'int64',
        'payment_date' => 'date',
        'collected' => 'decimal',
        'payment_deduction_type' => 'int64',
        'payment_deduction_amount' => 'decimal',
        'withheld_percentage' => 'int64',
        'withheld_amount' => 'decimal',
        'cheque_date' => 'date',
        'cheque_number' => null,
        'cheque_bank_account_id' => 'int64',
        'payment_remarks' => null,
        'remaining_collected_type' => 'int64',
        'remaining_collected' => 'decimal'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contact_code' => 'contactCode',
        'contact_name' => 'contactName',
        'contact_address' => 'contactAddress',
        'contact_tax_id' => 'contactTaxId',
        'contact_branch' => 'contactBranch',
        'contact_person' => 'contactPerson',
        'contact_email' => 'contactEmail',
        'contact_number' => 'contactNumber',
        'contact_zip_code' => 'contactZipCode',
        'contact_group' => 'contactGroup',
        'published_on' => 'publishedOn',
        'credit_type' => 'creditType',
        'credit_days' => 'creditDays',
        'due_date' => 'dueDate',
        'sales_name' => 'salesName',
        'project_name' => 'projectName',
        'reference' => 'reference',
        'is_vat_inclusive' => 'isVatInclusive',
        'use_receipt_deduction' => 'useReceiptDeduction',
        'items' => 'items',
        'sub_total' => 'subTotal',
        'discount_percentage' => 'discountPercentage',
        'discount_amount' => 'discountAmount',
        'total_after_discount' => 'totalAfterDiscount',
        'is_vat' => 'isVat',
        'vat_amount' => 'vatAmount',
        'grand_total' => 'grandTotal',
        'discount_type' => 'discountType',
        'use_inline_discount' => 'useInlineDiscount',
        'use_inline_vat' => 'useInlineVat',
        'exempt_amount' => 'exemptAmount',
        'vatable_amount' => 'vatableAmount',
        'document_show_withholding_tax' => 'documentShowWithholdingTax',
        'document_withholding_tax_percentage' => 'documentWithholdingTaxPercentage',
        'document_withholding_tax_amount' => 'documentWithholdingTaxAmount',
        'document_deduction_type' => 'documentDeductionType',
        'document_deduction_amount' => 'documentDeductionAmount',
        'remarks' => 'remarks',
        'internal_notes' => 'internalNotes',
        'show_signature_or_stamp' => 'showSignatureOrStamp',
        'document_reference' => 'documentReference',
        'document_payment_structure_type' => 'documentPaymentStructureType',
        'payment_method' => 'paymentMethod',
        'payment_date' => 'paymentDate',
        'collected' => 'collected',
        'payment_deduction_type' => 'paymentDeductionType',
        'payment_deduction_amount' => 'paymentDeductionAmount',
        'withheld_percentage' => 'withheldPercentage',
        'withheld_amount' => 'withheldAmount',
        'cheque_date' => 'chequeDate',
        'cheque_number' => 'chequeNumber',
        'cheque_bank_account_id' => 'chequeBankAccountId',
        'payment_remarks' => 'paymentRemarks',
        'remaining_collected_type' => 'remainingCollectedType',
        'remaining_collected' => 'remainingCollected'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contact_code' => 'setContactCode',
        'contact_name' => 'setContactName',
        'contact_address' => 'setContactAddress',
        'contact_tax_id' => 'setContactTaxId',
        'contact_branch' => 'setContactBranch',
        'contact_person' => 'setContactPerson',
        'contact_email' => 'setContactEmail',
        'contact_number' => 'setContactNumber',
        'contact_zip_code' => 'setContactZipCode',
        'contact_group' => 'setContactGroup',
        'published_on' => 'setPublishedOn',
        'credit_type' => 'setCreditType',
        'credit_days' => 'setCreditDays',
        'due_date' => 'setDueDate',
        'sales_name' => 'setSalesName',
        'project_name' => 'setProjectName',
        'reference' => 'setReference',
        'is_vat_inclusive' => 'setIsVatInclusive',
        'use_receipt_deduction' => 'setUseReceiptDeduction',
        'items' => 'setItems',
        'sub_total' => 'setSubTotal',
        'discount_percentage' => 'setDiscountPercentage',
        'discount_amount' => 'setDiscountAmount',
        'total_after_discount' => 'setTotalAfterDiscount',
        'is_vat' => 'setIsVat',
        'vat_amount' => 'setVatAmount',
        'grand_total' => 'setGrandTotal',
        'discount_type' => 'setDiscountType',
        'use_inline_discount' => 'setUseInlineDiscount',
        'use_inline_vat' => 'setUseInlineVat',
        'exempt_amount' => 'setExemptAmount',
        'vatable_amount' => 'setVatableAmount',
        'document_show_withholding_tax' => 'setDocumentShowWithholdingTax',
        'document_withholding_tax_percentage' => 'setDocumentWithholdingTaxPercentage',
        'document_withholding_tax_amount' => 'setDocumentWithholdingTaxAmount',
        'document_deduction_type' => 'setDocumentDeductionType',
        'document_deduction_amount' => 'setDocumentDeductionAmount',
        'remarks' => 'setRemarks',
        'internal_notes' => 'setInternalNotes',
        'show_signature_or_stamp' => 'setShowSignatureOrStamp',
        'document_reference' => 'setDocumentReference',
        'document_payment_structure_type' => 'setDocumentPaymentStructureType',
        'payment_method' => 'setPaymentMethod',
        'payment_date' => 'setPaymentDate',
        'collected' => 'setCollected',
        'payment_deduction_type' => 'setPaymentDeductionType',
        'payment_deduction_amount' => 'setPaymentDeductionAmount',
        'withheld_percentage' => 'setWithheldPercentage',
        'withheld_amount' => 'setWithheldAmount',
        'cheque_date' => 'setChequeDate',
        'cheque_number' => 'setChequeNumber',
        'cheque_bank_account_id' => 'setChequeBankAccountId',
        'payment_remarks' => 'setPaymentRemarks',
        'remaining_collected_type' => 'setRemainingCollectedType',
        'remaining_collected' => 'setRemainingCollected'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contact_code' => 'getContactCode',
        'contact_name' => 'getContactName',
        'contact_address' => 'getContactAddress',
        'contact_tax_id' => 'getContactTaxId',
        'contact_branch' => 'getContactBranch',
        'contact_person' => 'getContactPerson',
        'contact_email' => 'getContactEmail',
        'contact_number' => 'getContactNumber',
        'contact_zip_code' => 'getContactZipCode',
        'contact_group' => 'getContactGroup',
        'published_on' => 'getPublishedOn',
        'credit_type' => 'getCreditType',
        'credit_days' => 'getCreditDays',
        'due_date' => 'getDueDate',
        'sales_name' => 'getSalesName',
        'project_name' => 'getProjectName',
        'reference' => 'getReference',
        'is_vat_inclusive' => 'getIsVatInclusive',
        'use_receipt_deduction' => 'getUseReceiptDeduction',
        'items' => 'getItems',
        'sub_total' => 'getSubTotal',
        'discount_percentage' => 'getDiscountPercentage',
        'discount_amount' => 'getDiscountAmount',
        'total_after_discount' => 'getTotalAfterDiscount',
        'is_vat' => 'getIsVat',
        'vat_amount' => 'getVatAmount',
        'grand_total' => 'getGrandTotal',
        'discount_type' => 'getDiscountType',
        'use_inline_discount' => 'getUseInlineDiscount',
        'use_inline_vat' => 'getUseInlineVat',
        'exempt_amount' => 'getExemptAmount',
        'vatable_amount' => 'getVatableAmount',
        'document_show_withholding_tax' => 'getDocumentShowWithholdingTax',
        'document_withholding_tax_percentage' => 'getDocumentWithholdingTaxPercentage',
        'document_withholding_tax_amount' => 'getDocumentWithholdingTaxAmount',
        'document_deduction_type' => 'getDocumentDeductionType',
        'document_deduction_amount' => 'getDocumentDeductionAmount',
        'remarks' => 'getRemarks',
        'internal_notes' => 'getInternalNotes',
        'show_signature_or_stamp' => 'getShowSignatureOrStamp',
        'document_reference' => 'getDocumentReference',
        'document_payment_structure_type' => 'getDocumentPaymentStructureType',
        'payment_method' => 'getPaymentMethod',
        'payment_date' => 'getPaymentDate',
        'collected' => 'getCollected',
        'payment_deduction_type' => 'getPaymentDeductionType',
        'payment_deduction_amount' => 'getPaymentDeductionAmount',
        'withheld_percentage' => 'getWithheldPercentage',
        'withheld_amount' => 'getWithheldAmount',
        'cheque_date' => 'getChequeDate',
        'cheque_number' => 'getChequeNumber',
        'cheque_bank_account_id' => 'getChequeBankAccountId',
        'payment_remarks' => 'getPaymentRemarks',
        'remaining_collected_type' => 'getRemainingCollectedType',
        'remaining_collected' => 'getRemainingCollected'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contact_code'] = isset($data['contact_code']) ? $data['contact_code'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['contact_address'] = isset($data['contact_address']) ? $data['contact_address'] : null;
        $this->container['contact_tax_id'] = isset($data['contact_tax_id']) ? $data['contact_tax_id'] : null;
        $this->container['contact_branch'] = isset($data['contact_branch']) ? $data['contact_branch'] : null;
        $this->container['contact_person'] = isset($data['contact_person']) ? $data['contact_person'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['contact_number'] = isset($data['contact_number']) ? $data['contact_number'] : null;
        $this->container['contact_zip_code'] = isset($data['contact_zip_code']) ? $data['contact_zip_code'] : null;
        $this->container['contact_group'] = isset($data['contact_group']) ? $data['contact_group'] : 1;
        $this->container['published_on'] = isset($data['published_on']) ? $data['published_on'] : null;
        $this->container['credit_type'] = isset($data['credit_type']) ? $data['credit_type'] : 1;
        $this->container['credit_days'] = isset($data['credit_days']) ? $data['credit_days'] : 0;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['sales_name'] = isset($data['sales_name']) ? $data['sales_name'] : 'อีเมล หรือ ชื่อผู้สร้างเอกสาร';
        $this->container['project_name'] = isset($data['project_name']) ? $data['project_name'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['is_vat_inclusive'] = isset($data['is_vat_inclusive']) ? $data['is_vat_inclusive'] : false;
        $this->container['use_receipt_deduction'] = isset($data['use_receipt_deduction']) ? $data['use_receipt_deduction'] : false;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['sub_total'] = isset($data['sub_total']) ? $data['sub_total'] : 0;
        $this->container['discount_percentage'] = isset($data['discount_percentage']) ? $data['discount_percentage'] : 0;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : 0;
        $this->container['total_after_discount'] = isset($data['total_after_discount']) ? $data['total_after_discount'] : null;
        $this->container['is_vat'] = isset($data['is_vat']) ? $data['is_vat'] : false;
        $this->container['vat_amount'] = isset($data['vat_amount']) ? $data['vat_amount'] : null;
        $this->container['grand_total'] = isset($data['grand_total']) ? $data['grand_total'] : null;
        $this->container['discount_type'] = isset($data['discount_type']) ? $data['discount_type'] : 1;
        $this->container['use_inline_discount'] = isset($data['use_inline_discount']) ? $data['use_inline_discount'] : true;
        $this->container['use_inline_vat'] = isset($data['use_inline_vat']) ? $data['use_inline_vat'] : null;
        $this->container['exempt_amount'] = isset($data['exempt_amount']) ? $data['exempt_amount'] : 0;
        $this->container['vatable_amount'] = isset($data['vatable_amount']) ? $data['vatable_amount'] : 0;
        $this->container['document_show_withholding_tax'] = isset($data['document_show_withholding_tax']) ? $data['document_show_withholding_tax'] : false;
        $this->container['document_withholding_tax_percentage'] = isset($data['document_withholding_tax_percentage']) ? $data['document_withholding_tax_percentage'] : 0;
        $this->container['document_withholding_tax_amount'] = isset($data['document_withholding_tax_amount']) ? $data['document_withholding_tax_amount'] : 0;
        $this->container['document_deduction_type'] = isset($data['document_deduction_type']) ? $data['document_deduction_type'] : 0;
        $this->container['document_deduction_amount'] = isset($data['document_deduction_amount']) ? $data['document_deduction_amount'] : 0;
        $this->container['remarks'] = isset($data['remarks']) ? $data['remarks'] : null;
        $this->container['internal_notes'] = isset($data['internal_notes']) ? $data['internal_notes'] : null;
        $this->container['show_signature_or_stamp'] = isset($data['show_signature_or_stamp']) ? $data['show_signature_or_stamp'] : true;
        $this->container['document_reference'] = isset($data['document_reference']) ? $data['document_reference'] : null;
        $this->container['document_payment_structure_type'] = isset($data['document_payment_structure_type']) ? $data['document_payment_structure_type'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : 1;
        $this->container['payment_date'] = isset($data['payment_date']) ? $data['payment_date'] : null;
        $this->container['collected'] = isset($data['collected']) ? $data['collected'] : 0;
        $this->container['payment_deduction_type'] = isset($data['payment_deduction_type']) ? $data['payment_deduction_type'] : 0;
        $this->container['payment_deduction_amount'] = isset($data['payment_deduction_amount']) ? $data['payment_deduction_amount'] : 0;
        $this->container['withheld_percentage'] = isset($data['withheld_percentage']) ? $data['withheld_percentage'] : 0;
        $this->container['withheld_amount'] = isset($data['withheld_amount']) ? $data['withheld_amount'] : 0;
        $this->container['cheque_date'] = isset($data['cheque_date']) ? $data['cheque_date'] : null;
        $this->container['cheque_number'] = isset($data['cheque_number']) ? $data['cheque_number'] : null;
        $this->container['cheque_bank_account_id'] = isset($data['cheque_bank_account_id']) ? $data['cheque_bank_account_id'] : 0;
        $this->container['payment_remarks'] = isset($data['payment_remarks']) ? $data['payment_remarks'] : null;
        $this->container['remaining_collected_type'] = isset($data['remaining_collected_type']) ? $data['remaining_collected_type'] : 0;
        $this->container['remaining_collected'] = isset($data['remaining_collected']) ? $data['remaining_collected'] : 0;

        // Initialize discriminator property with the model name.
        $this->container['document_payment_structure_type'] = static::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['contact_name'] === null) {
            $invalidProperties[] = "'contact_name' can't be null";
        }
        if ($this->container['published_on'] === null) {
            $invalidProperties[] = "'published_on' can't be null";
        }
        if ($this->container['due_date'] === null) {
            $invalidProperties[] = "'due_date' can't be null";
        }
        if ($this->container['total_after_discount'] === null) {
            $invalidProperties[] = "'total_after_discount' can't be null";
        }
        if ($this->container['grand_total'] === null) {
            $invalidProperties[] = "'grand_total' can't be null";
        }
        if ($this->container['document_payment_structure_type'] === null) {
            $invalidProperties[] = "'document_payment_structure_type' can't be null";
        }
        if ($this->container['payment_method'] === null) {
            $invalidProperties[] = "'payment_method' can't be null";
        }
        if ($this->container['payment_date'] === null) {
            $invalidProperties[] = "'payment_date' can't be null";
        }
        if ($this->container['collected'] === null) {
            $invalidProperties[] = "'collected' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contact_code
     *
     * @return string|null
     */
    public function getContactCode()
    {
        return $this->container['contact_code'];
    }

    /**
     * Sets contact_code
     *
     * @param string|null $contact_code รหัส ลูกค้า/ผู้จำหน่าย
     *
     * @return $this
     */
    public function setContactCode($contact_code)
    {
        $this->container['contact_code'] = $contact_code;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name ชื่อ ลูกค้า/ผู้จำหน่าย <br> <ex>Example: บริษัท ลูกค้า จำกัด, คุณลูกค้า ซื้อประจำ</ex>
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_address
     *
     * @return string|null
     */
    public function getContactAddress()
    {
        return $this->container['contact_address'];
    }

    /**
     * Sets contact_address
     *
     * @param string|null $contact_address ที่อยู่ ลูกค้า/ผู้จำหน่าย
     *
     * @return $this
     */
    public function setContactAddress($contact_address)
    {
        $this->container['contact_address'] = $contact_address;

        return $this;
    }

    /**
     * Gets contact_tax_id
     *
     * @return string|null
     */
    public function getContactTaxId()
    {
        return $this->container['contact_tax_id'];
    }

    /**
     * Sets contact_tax_id
     *
     * @param string|null $contact_tax_id เลขประจำตัวผู้เสียภาษี ลูกค้า หรือ ผู้จำหน่าย/ลูกค้า <br> (ถ้ามีจำเป็นต้องครบ 13 หลัก) <br> <ex>Example: 1234567890123 </ex>
     *
     * @return $this
     */
    public function setContactTaxId($contact_tax_id)
    {
        $this->container['contact_tax_id'] = $contact_tax_id;

        return $this;
    }

    /**
     * Gets contact_branch
     *
     * @return string|null
     */
    public function getContactBranch()
    {
        return $this->container['contact_branch'];
    }

    /**
     * Sets contact_branch
     *
     * @param string|null $contact_branch สำนักงาน/สาขา
     *
     * @return $this
     */
    public function setContactBranch($contact_branch)
    {
        $this->container['contact_branch'] = $contact_branch;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return string|null
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param string|null $contact_person ชื่อผู้ติดต่อ
     *
     * @return $this
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string|null
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string|null $contact_email อีเมลผู้ติดต่อ <br> <ex>Example: contact@email.com</ex>
     *
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_number
     *
     * @return string|null
     */
    public function getContactNumber()
    {
        return $this->container['contact_number'];
    }

    /**
     * Sets contact_number
     *
     * @param string|null $contact_number เบอร์มือถือผู้ติดต่อ <br> <ex>Example: 099-999-9999</ex>
     *
     * @return $this
     */
    public function setContactNumber($contact_number)
    {
        $this->container['contact_number'] = $contact_number;

        return $this;
    }

    /**
     * Gets contact_zip_code
     *
     * @return string|null
     */
    public function getContactZipCode()
    {
        return $this->container['contact_zip_code'];
    }

    /**
     * Sets contact_zip_code
     *
     * @param string|null $contact_zip_code รหัสไปรษณีย์ติดต่อ
     *
     * @return $this
     */
    public function setContactZipCode($contact_zip_code)
    {
        $this->container['contact_zip_code'] = $contact_zip_code;

        return $this;
    }

    /**
     * Gets contact_group
     *
     * @return int|null
     */
    public function getContactGroup()
    {
        return $this->container['contact_group'];
    }

    /**
     * Sets contact_group
     *
     * @param int|null $contact_group ประผู้ติดต่อ <br> 1 = บุคคลธรรมดา <br> 3 = นิติบุคคล
     *
     * @return $this
     */
    public function setContactGroup($contact_group)
    {
        $this->container['contact_group'] = $contact_group;

        return $this;
    }

    /**
     * Gets published_on
     *
     * @return \DateTime
     */
    public function getPublishedOn()
    {
        return $this->container['published_on'];
    }

    /**
     * Sets published_on
     *
     * @param \DateTime $published_on วันที่เอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
     *
     * @return $this
     */
    public function setPublishedOn($published_on)
    {
        $this->container['published_on'] = $published_on;

        return $this;
    }

    /**
     * Gets credit_type
     *
     * @return int|null
     */
    public function getCreditType()
    {
        return $this->container['credit_type'];
    }

    /**
     * Sets credit_type
     *
     * @param int|null $credit_type รูปแบบเครดิต <br> 1 = เครดิต (วัน) <br> 3 = เงินสด  <br> 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)
     *
     * @return $this
     */
    public function setCreditType($credit_type)
    {
        $this->container['credit_type'] = $credit_type;

        return $this;
    }

    /**
     * Gets credit_days
     *
     * @return int|null
     */
    public function getCreditDays()
    {
        return $this->container['credit_days'];
    }

    /**
     * Sets credit_days
     *
     * @param int|null $credit_days จำนวนวันที่ให้เครดิต <br> <ex>Example: 30</ex>
     *
     * @return $this
     */
    public function setCreditDays($credit_days)
    {
        $this->container['credit_days'] = $credit_days;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets sales_name
     *
     * @return string|null
     */
    public function getSalesName()
    {
        return $this->container['sales_name'];
    }

    /**
     * Sets sales_name
     *
     * @param string|null $sales_name ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย <br> <ex>Example: sale@email.com or Mr.Sale Shop</ex>
     *
     * @return $this
     */
    public function setSalesName($sales_name)
    {
        $this->container['sales_name'] = $sales_name;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string|null
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string|null $project_name ชื่อโปรเจค
     *
     * @return $this
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง <br> <ex>Example: INV2020010001</ex>
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets is_vat_inclusive
     *
     * @return bool|null
     */
    public function getIsVatInclusive()
    {
        return $this->container['is_vat_inclusive'];
    }

    /**
     * Sets is_vat_inclusive
     *
     * @param bool|null $is_vat_inclusive มูลค่าเอกสารรวมภาษีแล้วหรือไม่
     *
     * @return $this
     */
    public function setIsVatInclusive($is_vat_inclusive)
    {
        $this->container['is_vat_inclusive'] = $is_vat_inclusive;

        return $this;
    }

    /**
     * Gets use_receipt_deduction
     *
     * @return bool|null
     */
    public function getUseReceiptDeduction()
    {
        return $this->container['use_receipt_deduction'];
    }

    /**
     * Sets use_receipt_deduction
     *
     * @param bool|null $use_receipt_deduction เปิดใช้งานฟังก์ชั่น ปรับลดท้ายเอกสาร <br> (เฉพาะเอกสารใบกำกับภาษี / ใบเสร็จรับเงิน และ ใบเสร็จรับเงิน)
     *
     * @return $this
     */
    public function setUseReceiptDeduction($use_receipt_deduction)
    {
        $this->container['use_receipt_deduction'] = $use_receipt_deduction;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \OpenAPI\Client\Model\SimpleProductItem[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \OpenAPI\Client\Model\SimpleProductItem[]|null $items รายการสินค้าใช้งานสำหรับเอกสาร Simple
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return float|null
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param float|null $sub_total มูลค่ารวมเป็นเงิน
     *
     * @return $this
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return int|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param int|null $discount_percentage มูลค่าส่วนลดเป็นเปอร์เซ็นต์
     *
     * @return $this
     */
    public function setDiscountPercentage($discount_percentage)
    {
        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return float|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param float|null $discount_amount มูลค่าส่วนลดเป็นจำนวน (บาท)
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets total_after_discount
     *
     * @return float
     */
    public function getTotalAfterDiscount()
    {
        return $this->container['total_after_discount'];
    }

    /**
     * Sets total_after_discount
     *
     * @param float $total_after_discount มูลค่าหลังหักส่วนลด
     *
     * @return $this
     */
    public function setTotalAfterDiscount($total_after_discount)
    {
        $this->container['total_after_discount'] = $total_after_discount;

        return $this;
    }

    /**
     * Gets is_vat
     *
     * @return bool|null
     */
    public function getIsVat()
    {
        return $this->container['is_vat'];
    }

    /**
     * Sets is_vat
     *
     * @param bool|null $is_vat มูลค่าหลังหักส่วนลด มีภาษีมูลค่าเพิ่ม 7%
     *
     * @return $this
     */
    public function setIsVat($is_vat)
    {
        $this->container['is_vat'] = $is_vat;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return float|null
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param float|null $vat_amount ภาษีมูลค่าเพิ่ม
     *
     * @return $this
     */
    public function setVatAmount($vat_amount)
    {
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets grand_total
     *
     * @return float
     */
    public function getGrandTotal()
    {
        return $this->container['grand_total'];
    }

    /**
     * Sets grand_total
     *
     * @param float $grand_total จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว)
     *
     * @return $this
     */
    public function setGrandTotal($grand_total)
    {
        $this->container['grand_total'] = $grand_total;

        return $this;
    }

    /**
     * Gets discount_type
     *
     * @return int|null
     */
    public function getDiscountType()
    {
        return $this->container['discount_type'];
    }

    /**
     * Sets discount_type
     *
     * @param int|null $discount_type รูปแบบส่วนลดในเอกสาร กรณีใช้รูปแบบ Inline ส่วนลด หรือ ภาษี แยกตามรายการสินค้า <br> สามารถเลือกรูปแบบส่วนลดได้ <br> 1 =  เปอร์เซ็นต์ <br> 3 = จำนวน (บาท)
     *
     * @return $this
     */
    public function setDiscountType($discount_type)
    {
        $this->container['discount_type'] = $discount_type;

        return $this;
    }

    /**
     * Gets use_inline_discount
     *
     * @return bool|null
     */
    public function getUseInlineDiscount()
    {
        return $this->container['use_inline_discount'];
    }

    /**
     * Sets use_inline_discount
     *
     * @param bool|null $use_inline_discount inline discount ใช้งานส่วนลด แยกตามรายการสินค้า
     *
     * @return $this
     */
    public function setUseInlineDiscount($use_inline_discount)
    {
        $this->container['use_inline_discount'] = $use_inline_discount;

        return $this;
    }

    /**
     * Gets use_inline_vat
     *
     * @return bool|null
     */
    public function getUseInlineVat()
    {
        return $this->container['use_inline_vat'];
    }

    /**
     * Sets use_inline_vat
     *
     * @param bool|null $use_inline_vat inline vat ใช้งานส่วนลดและภาษี แยกตามรายการสินค้า
     *
     * @return $this
     */
    public function setUseInlineVat($use_inline_vat)
    {
        $this->container['use_inline_vat'] = $use_inline_vat;

        return $this;
    }

    /**
     * Gets exempt_amount
     *
     * @return float|null
     */
    public function getExemptAmount()
    {
        return $this->container['exempt_amount'];
    }

    /**
     * Sets exempt_amount
     *
     * @param float|null $exempt_amount ยอดขายที่ยกเว้นภาษีมูลค่าเพิ่ม
     *
     * @return $this
     */
    public function setExemptAmount($exempt_amount)
    {
        $this->container['exempt_amount'] = $exempt_amount;

        return $this;
    }

    /**
     * Gets vatable_amount
     *
     * @return float|null
     */
    public function getVatableAmount()
    {
        return $this->container['vatable_amount'];
    }

    /**
     * Sets vatable_amount
     *
     * @param float|null $vatable_amount ยอดขายที่คิดภาษีมูลค่าเพิ่ม
     *
     * @return $this
     */
    public function setVatableAmount($vatable_amount)
    {
        $this->container['vatable_amount'] = $vatable_amount;

        return $this;
    }

    /**
     * Gets document_show_withholding_tax
     *
     * @return bool|null
     */
    public function getDocumentShowWithholdingTax()
    {
        return $this->container['document_show_withholding_tax'];
    }

    /**
     * Sets document_show_withholding_tax
     *
     * @param bool|null $document_show_withholding_tax แสดงหรือไม่แสดง หัก ณ ที่จ่ายท้ายเอกสาร
     *
     * @return $this
     */
    public function setDocumentShowWithholdingTax($document_show_withholding_tax)
    {
        $this->container['document_show_withholding_tax'] = $document_show_withholding_tax;

        return $this;
    }

    /**
     * Gets document_withholding_tax_percentage
     *
     * @return int|null
     */
    public function getDocumentWithholdingTaxPercentage()
    {
        return $this->container['document_withholding_tax_percentage'];
    }

    /**
     * Sets document_withholding_tax_percentage
     *
     * @param int|null $document_withholding_tax_percentage ภาษี ณ ที่จ่าย (%)
     *
     * @return $this
     */
    public function setDocumentWithholdingTaxPercentage($document_withholding_tax_percentage)
    {
        $this->container['document_withholding_tax_percentage'] = $document_withholding_tax_percentage;

        return $this;
    }

    /**
     * Gets document_withholding_tax_amount
     *
     * @return float|null
     */
    public function getDocumentWithholdingTaxAmount()
    {
        return $this->container['document_withholding_tax_amount'];
    }

    /**
     * Sets document_withholding_tax_amount
     *
     * @param float|null $document_withholding_tax_amount มูลค่าภาษีหัก ณ ที่จ่าย
     *
     * @return $this
     */
    public function setDocumentWithholdingTaxAmount($document_withholding_tax_amount)
    {
        $this->container['document_withholding_tax_amount'] = $document_withholding_tax_amount;

        return $this;
    }

    /**
     * Gets document_deduction_type
     *
     * @return int|null
     */
    public function getDocumentDeductionType()
    {
        return $this->container['document_deduction_type'];
    }

    /**
     * Sets document_deduction_type
     *
     * @param int|null $document_deduction_type ประเภทรายการปรับลด <br> 1 = ส่วนลดพิเศษ <br> 3 = ค่านายหน้าและส่วนแบ่งการขาย <br> 5 = ค่าดำเนินการ <br> 7 = ปัดเศษ <br> (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)
     *
     * @return $this
     */
    public function setDocumentDeductionType($document_deduction_type)
    {
        $this->container['document_deduction_type'] = $document_deduction_type;

        return $this;
    }

    /**
     * Gets document_deduction_amount
     *
     * @return float|null
     */
    public function getDocumentDeductionAmount()
    {
        return $this->container['document_deduction_amount'];
    }

    /**
     * Sets document_deduction_amount
     *
     * @param float|null $document_deduction_amount จำนวนเงินยอดรายการปรับลด <br> (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)
     *
     * @return $this
     */
    public function setDocumentDeductionAmount($document_deduction_amount)
    {
        $this->container['document_deduction_amount'] = $document_deduction_amount;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks หมายเหตุเอกสาร
     *
     * @return $this
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets internal_notes
     *
     * @return string|null
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     *
     * @param string|null $internal_notes โน๊ตภายในบริษัท
     *
     * @return $this
     */
    public function setInternalNotes($internal_notes)
    {
        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets show_signature_or_stamp
     *
     * @return bool|null
     */
    public function getShowSignatureOrStamp()
    {
        return $this->container['show_signature_or_stamp'];
    }

    /**
     * Sets show_signature_or_stamp
     *
     * @param bool|null $show_signature_or_stamp ลายเซ็นอิเล็กทรอนิกส์และตรายาง
     *
     * @return $this
     */
    public function setShowSignatureOrStamp($show_signature_or_stamp)
    {
        $this->container['show_signature_or_stamp'] = $show_signature_or_stamp;

        return $this;
    }

    /**
     * Gets document_reference
     *
     * @return \OpenAPI\Client\Model\UpgradeDocument[]|null
     */
    public function getDocumentReference()
    {
        return $this->container['document_reference'];
    }

    /**
     * Sets document_reference
     *
     * @param \OpenAPI\Client\Model\UpgradeDocument[]|null $document_reference สำหรับอัพเกรดเอกสาร โดยอ้างอิงเอกสารต้นทาง (ยกเว้นเอกสารใบเสนอราคา)
     *
     * @return $this
     */
    public function setDocumentReference($document_reference)
    {
        $this->container['document_reference'] = $document_reference;

        return $this;
    }

    /**
     * Gets document_payment_structure_type
     *
     * @return string
     */
    public function getDocumentPaymentStructureType()
    {
        return $this->container['document_payment_structure_type'];
    }

    /**
     * Sets document_payment_structure_type
     *
     * @param string $document_payment_structure_type สร้างเอกสารแบบ Inline พร้อมรับชำระเงิน ด้วยเช็ค
     *
     * @return $this
     */
    public function setDocumentPaymentStructureType($document_payment_structure_type)
    {
        $this->container['document_payment_structure_type'] = $document_payment_structure_type;

        return $this;
    }

    /**
     * Gets payment_method
     *
     * @return int
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     *
     * @param int $payment_method ประเภทการเก็บเงิน <br> 3 = เช็ค
     *
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return \DateTime
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param \DateTime $payment_date วันที่รับชำระเงิน / วันที่ชำระเงิน รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
     *
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets collected
     *
     * @return float
     */
    public function getCollected()
    {
        return $this->container['collected'];
    }

    /**
     * Sets collected
     *
     * @param float $collected จำนวนเงินยอดรับสุทธิ <br> <ex> Example : 100.00 </ex>
     *
     * @return $this
     */
    public function setCollected($collected)
    {
        $this->container['collected'] = $collected;

        return $this;
    }

    /**
     * Gets payment_deduction_type
     *
     * @return int|null
     */
    public function getPaymentDeductionType()
    {
        return $this->container['payment_deduction_type'];
    }

    /**
     * Sets payment_deduction_type
     *
     * @param int|null $payment_deduction_type ประเภทรายการปรับลด <br> 1 = ส่วนลดพิเศษ <br> 3 = ค่านายหน้าและส่วนแบ่งการขาย <br> 5 = ค่าดำเนินการ <br> 7 = ปัดเศษ <br>
     *
     * @return $this
     */
    public function setPaymentDeductionType($payment_deduction_type)
    {
        $this->container['payment_deduction_type'] = $payment_deduction_type;

        return $this;
    }

    /**
     * Gets payment_deduction_amount
     *
     * @return float|null
     */
    public function getPaymentDeductionAmount()
    {
        return $this->container['payment_deduction_amount'];
    }

    /**
     * Sets payment_deduction_amount
     *
     * @param float|null $payment_deduction_amount จำนวนเงินยอดรายการปรับลด <br> <ex> Example : 100.00 </ex>
     *
     * @return $this
     */
    public function setPaymentDeductionAmount($payment_deduction_amount)
    {
        $this->container['payment_deduction_amount'] = $payment_deduction_amount;

        return $this;
    }

    /**
     * Gets withheld_percentage
     *
     * @return int|null
     */
    public function getWithheldPercentage()
    {
        return $this->container['withheld_percentage'];
    }

    /**
     * Sets withheld_percentage
     *
     * @param int|null $withheld_percentage เปอร์เซ็น หัก ณ ที่จ่าย <br> 0.5 = 0.5% <br> 0.75 = 0.75% <br> 1 = 1% <br> 1.5 = 1.5% <br> 2 = 2% <br> 3 = 3% <br> 5 = 5% <br> 10 = 10% <br> 15 = 15% <br> -1 = จำนวนเงิน <red>(สำหรับเอกสารที่ใช้ภาษีแยกตามรายการสินค้า ต้องใช้เป็นจำนวนเงิน)</red>
     *
     * @return $this
     */
    public function setWithheldPercentage($withheld_percentage)
    {
        $this->container['withheld_percentage'] = $withheld_percentage;

        return $this;
    }

    /**
     * Gets withheld_amount
     *
     * @return float|null
     */
    public function getWithheldAmount()
    {
        return $this->container['withheld_amount'];
    }

    /**
     * Sets withheld_amount
     *
     * @param float|null $withheld_amount จำนวน ยอดหัก ณ ที่จ่าย <br> <ex> Example : 100.00 </ex>
     *
     * @return $this
     */
    public function setWithheldAmount($withheld_amount)
    {
        $this->container['withheld_amount'] = $withheld_amount;

        return $this;
    }

    /**
     * Gets cheque_date
     *
     * @return \DateTime|null
     */
    public function getChequeDate()
    {
        return $this->container['cheque_date'];
    }

    /**
     * Sets cheque_date
     *
     * @param \DateTime|null $cheque_date วันที่หน้าเช็ค รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
     *
     * @return $this
     */
    public function setChequeDate($cheque_date)
    {
        $this->container['cheque_date'] = $cheque_date;

        return $this;
    }

    /**
     * Gets cheque_number
     *
     * @return string|null
     */
    public function getChequeNumber()
    {
        return $this->container['cheque_number'];
    }

    /**
     * Sets cheque_number
     *
     * @param string|null $cheque_number เลขที่เช็คธนาคาร <br> <ex>Example: 122-122-122</ex>
     *
     * @return $this
     */
    public function setChequeNumber($cheque_number)
    {
        $this->container['cheque_number'] = $cheque_number;

        return $this;
    }

    /**
     * Gets cheque_bank_account_id
     *
     * @return int|null
     */
    public function getChequeBankAccountId()
    {
        return $this->container['cheque_bank_account_id'];
    }

    /**
     * Sets cheque_bank_account_id
     *
     * @param int|null $cheque_bank_account_id ธนาคารที่ระบุหน้าเช็ค <br> 1 = ธนาคารกรุงเทพ <br> 2 = ธนาคารกสิกรไทย <br> 3 = ธนาคารกรุงไทย <br> 4 = ธนาคารทหารไทย <br> 5 = ธนาคารไทยพาณิชย์ <br> 6 = ธนาคารสแตนดาร์ดชาร์เตอร์ด <br> 7 = ธนาคารซีไอเอ็มบี ไทย <br> 8 = ธนาคารยูโอบี <br> 10 = ธนาคารกรุงศรีอยุธยา <br> 11 = ธนาคารออมสิน <br> 12 = ธนาคารธนชาต <br> 13 = ธนาคารแลนด์ แอนด์ เฮ้าส์ <br> 14 = ธนาคารเกียรตินาคิน <br> 15 = ธนาคารซิตี้แบงก์ <br> 16 = ธนาคารทิสโก้ <br> 53 = ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร <br> 54 = ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย <br> 55 = ธนาคารอาคารสงเคราะห์ <br> 56 = ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย <br> 57 = ธนาคารอิสลามแห่งประเทศไทย <br> 58 = ธนาคารแห่งประเทศจีน (ไทย) <br> 59 = ธนาคารไอซีบีซี (ไทย) <br> 60 = ธนาคารเมกะ สากลพาณิชย์ <br> 61 = ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น <br> 62 = ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) <br> 63 = ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น <br> 64 = ธนาคารไทยเครดิต เพื่อรายย่อย
     *
     * @return $this
     */
    public function setChequeBankAccountId($cheque_bank_account_id)
    {
        $this->container['cheque_bank_account_id'] = $cheque_bank_account_id;

        return $this;
    }

    /**
     * Gets payment_remarks
     *
     * @return string|null
     */
    public function getPaymentRemarks()
    {
        return $this->container['payment_remarks'];
    }

    /**
     * Sets payment_remarks
     *
     * @param string|null $payment_remarks หมายเหตุ การรับชำระเงิน หรือ ชำระเงิน
     *
     * @return $this
     */
    public function setPaymentRemarks($payment_remarks)
    {
        $this->container['payment_remarks'] = $payment_remarks;

        return $this;
    }

    /**
     * Gets remaining_collected_type
     *
     * @return int|null
     */
    public function getRemainingCollectedType()
    {
        return $this->container['remaining_collected_type'];
    }

    /**
     * Sets remaining_collected_type
     *
     * @param int|null $remaining_collected_type สาเหตุเงินขาด เงินเกิน <br> 51 = เงินขาดหรือเงินกิน <br> 55 = ค่าธรรมเนียมธนาคาร
     *
     * @return $this
     */
    public function setRemainingCollectedType($remaining_collected_type)
    {
        $this->container['remaining_collected_type'] = $remaining_collected_type;

        return $this;
    }

    /**
     * Gets remaining_collected
     *
     * @return float|null
     */
    public function getRemainingCollected()
    {
        return $this->container['remaining_collected'];
    }

    /**
     * Sets remaining_collected
     *
     * @param float|null $remaining_collected จำนวน ยอดเงินขาด หรือ เงินเกิน <br> <ex> Example : 100.00 </ex>
     *
     * @return $this
     */
    public function setRemainingCollected($remaining_collected)
    {
        $this->container['remaining_collected'] = $remaining_collected;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


