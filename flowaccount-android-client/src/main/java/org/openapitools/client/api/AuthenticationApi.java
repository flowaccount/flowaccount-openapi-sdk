/**
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AuthenResponse;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AuthenticationApi {
  String basePath = "https://openapi.flowaccount.com/v1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Generate Access Token
  * 
   * @param contentType 
   * @param grantType 
   * @param scope 
   * @param clientId 
   * @param clientSecret 
   * @param guid 
   * @return AuthenResponse
  */
  public AuthenResponse tokenPost (String contentType, String grantType, String scope, String clientId, String clientSecret, String guid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contentType' when calling tokenPost",
        new ApiException(400, "Missing the required parameter 'contentType' when calling tokenPost"));
    }

    // create path and map variables
    String path = "/token";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));
    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (grantType != null) {
        localVarBuilder.addTextBody("grant_type", ApiInvoker.parameterToString(grantType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (scope != null) {
        localVarBuilder.addTextBody("scope", ApiInvoker.parameterToString(scope), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (clientId != null) {
        localVarBuilder.addTextBody("client_id", ApiInvoker.parameterToString(clientId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (clientSecret != null) {
        localVarBuilder.addTextBody("client_secret", ApiInvoker.parameterToString(clientSecret), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      if (guid != null) {
        localVarBuilder.addTextBody("guid", ApiInvoker.parameterToString(guid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("grant_type", ApiInvoker.parameterToString(grantType));
      formParams.put("scope", ApiInvoker.parameterToString(scope));
      formParams.put("client_id", ApiInvoker.parameterToString(clientId));
      formParams.put("client_secret", ApiInvoker.parameterToString(clientSecret));
      formParams.put("guid", ApiInvoker.parameterToString(guid));
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AuthenResponse) ApiInvoker.deserialize(localVarResponse, "", AuthenResponse.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Generate Access Token
   * 
   * @param contentType    * @param grantType    * @param scope    * @param clientId    * @param clientSecret    * @param guid 
  */
  public void tokenPost (String contentType, String grantType, String scope, String clientId, String clientSecret, String guid, final Response.Listener<AuthenResponse> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'contentType' is set
    if (contentType == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'contentType' when calling tokenPost",
        new ApiException(400, "Missing the required parameter 'contentType' when calling tokenPost"));
    }

    // create path and map variables
    String path = "/token".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();


    headerParams.put("Content-Type", ApiInvoker.parameterToString(contentType));

    String[] contentTypes = {
      "application/x-www-form-urlencoded"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (grantType != null) {
        localVarBuilder.addTextBody("grant_type", ApiInvoker.parameterToString(grantType), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (scope != null) {
        localVarBuilder.addTextBody("scope", ApiInvoker.parameterToString(scope), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (clientId != null) {
        localVarBuilder.addTextBody("client_id", ApiInvoker.parameterToString(clientId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (clientSecret != null) {
        localVarBuilder.addTextBody("client_secret", ApiInvoker.parameterToString(clientSecret), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (guid != null) {
        localVarBuilder.addTextBody("guid", ApiInvoker.parameterToString(guid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("grant_type", ApiInvoker.parameterToString(grantType));
formParams.put("scope", ApiInvoker.parameterToString(scope));
formParams.put("client_id", ApiInvoker.parameterToString(clientId));
formParams.put("client_secret", ApiInvoker.parameterToString(clientSecret));
formParams.put("guid", ApiInvoker.parameterToString(guid));
    }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AuthenResponse) ApiInvoker.deserialize(localVarResponse,  "", AuthenResponse.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
