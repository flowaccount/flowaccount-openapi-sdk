/**
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import java.util.*;
import org.openapitools.client.model.InlineProductItem;
import org.openapitools.client.model.UpgradeDocument;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class InlineDocumentAllOf {
  
  @SerializedName("discountType")
  private Integer discountType = 1;
  @SerializedName("useInlineDiscount")
  private Boolean useInlineDiscount = true;
  @SerializedName("useInlineVat")
  private Boolean useInlineVat = null;
  @SerializedName("exemptAmount")
  private BigDecimal exemptAmount = 0;
  @SerializedName("vatableAmount")
  private BigDecimal vatableAmount = 0;
  @SerializedName("items")
  private List<InlineProductItem> items = null;
  @SerializedName("documentReference")
  private List<UpgradeDocument> documentReference = null;

  /**
   * รูปแบบส่วนลดในเอกสาร กรณีใช้รูปแบบ Inline ส่วนลด หรือ ภาษี แยกตามรายการสินค้า <br> สามารถเลือกรูปแบบส่วนลดได้ <br> 1 =  เปอร์เซ็นต์ <br> 3 = จำนวน (บาท)
   **/
  @ApiModelProperty(value = "รูปแบบส่วนลดในเอกสาร กรณีใช้รูปแบบ Inline ส่วนลด หรือ ภาษี แยกตามรายการสินค้า <br> สามารถเลือกรูปแบบส่วนลดได้ <br> 1 =  เปอร์เซ็นต์ <br> 3 = จำนวน (บาท)")
  public Integer getDiscountType() {
    return discountType;
  }
  public void setDiscountType(Integer discountType) {
    this.discountType = discountType;
  }

  /**
   * inline discount ใช้งานส่วนลด แยกตามรายการสินค้า
   **/
  @ApiModelProperty(value = "inline discount ใช้งานส่วนลด แยกตามรายการสินค้า")
  public Boolean getUseInlineDiscount() {
    return useInlineDiscount;
  }
  public void setUseInlineDiscount(Boolean useInlineDiscount) {
    this.useInlineDiscount = useInlineDiscount;
  }

  /**
   * inline vat ใช้งานส่วนลดและภาษี แยกตามรายการสินค้า
   **/
  @ApiModelProperty(value = "inline vat ใช้งานส่วนลดและภาษี แยกตามรายการสินค้า")
  public Boolean getUseInlineVat() {
    return useInlineVat;
  }
  public void setUseInlineVat(Boolean useInlineVat) {
    this.useInlineVat = useInlineVat;
  }

  /**
   * ยอดขายที่ยกเว้นภาษีมูลค่าเพิ่ม
   **/
  @ApiModelProperty(value = "ยอดขายที่ยกเว้นภาษีมูลค่าเพิ่ม")
  public BigDecimal getExemptAmount() {
    return exemptAmount;
  }
  public void setExemptAmount(BigDecimal exemptAmount) {
    this.exemptAmount = exemptAmount;
  }

  /**
   * ยอดขายที่คิดภาษีมูลค่าเพิ่ม
   **/
  @ApiModelProperty(value = "ยอดขายที่คิดภาษีมูลค่าเพิ่ม")
  public BigDecimal getVatableAmount() {
    return vatableAmount;
  }
  public void setVatableAmount(BigDecimal vatableAmount) {
    this.vatableAmount = vatableAmount;
  }

  /**
   * รายการสินค้าใช้งานสำหรับเอกสาร Inline
   **/
  @ApiModelProperty(value = "รายการสินค้าใช้งานสำหรับเอกสาร Inline")
  public List<InlineProductItem> getItems() {
    return items;
  }
  public void setItems(List<InlineProductItem> items) {
    this.items = items;
  }

  /**
   * สำหรับอัพเกรดเอกสาร โดยอ้างอิงเอกสารต้นทาง (ยกเว้นเอกสารใบเสนอราคา)
   **/
  @ApiModelProperty(value = "สำหรับอัพเกรดเอกสาร โดยอ้างอิงเอกสารต้นทาง (ยกเว้นเอกสารใบเสนอราคา)")
  public List<UpgradeDocument> getDocumentReference() {
    return documentReference;
  }
  public void setDocumentReference(List<UpgradeDocument> documentReference) {
    this.documentReference = documentReference;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InlineDocumentAllOf inlineDocumentAllOf = (InlineDocumentAllOf) o;
    return (this.discountType == null ? inlineDocumentAllOf.discountType == null : this.discountType.equals(inlineDocumentAllOf.discountType)) &&
        (this.useInlineDiscount == null ? inlineDocumentAllOf.useInlineDiscount == null : this.useInlineDiscount.equals(inlineDocumentAllOf.useInlineDiscount)) &&
        (this.useInlineVat == null ? inlineDocumentAllOf.useInlineVat == null : this.useInlineVat.equals(inlineDocumentAllOf.useInlineVat)) &&
        (this.exemptAmount == null ? inlineDocumentAllOf.exemptAmount == null : this.exemptAmount.equals(inlineDocumentAllOf.exemptAmount)) &&
        (this.vatableAmount == null ? inlineDocumentAllOf.vatableAmount == null : this.vatableAmount.equals(inlineDocumentAllOf.vatableAmount)) &&
        (this.items == null ? inlineDocumentAllOf.items == null : this.items.equals(inlineDocumentAllOf.items)) &&
        (this.documentReference == null ? inlineDocumentAllOf.documentReference == null : this.documentReference.equals(inlineDocumentAllOf.documentReference));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.discountType == null ? 0: this.discountType.hashCode());
    result = 31 * result + (this.useInlineDiscount == null ? 0: this.useInlineDiscount.hashCode());
    result = 31 * result + (this.useInlineVat == null ? 0: this.useInlineVat.hashCode());
    result = 31 * result + (this.exemptAmount == null ? 0: this.exemptAmount.hashCode());
    result = 31 * result + (this.vatableAmount == null ? 0: this.vatableAmount.hashCode());
    result = 31 * result + (this.items == null ? 0: this.items.hashCode());
    result = 31 * result + (this.documentReference == null ? 0: this.documentReference.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class InlineDocumentAllOf {\n");
    
    sb.append("  discountType: ").append(discountType).append("\n");
    sb.append("  useInlineDiscount: ").append(useInlineDiscount).append("\n");
    sb.append("  useInlineVat: ").append(useInlineVat).append("\n");
    sb.append("  exemptAmount: ").append(exemptAmount).append("\n");
    sb.append("  vatableAmount: ").append(vatableAmount).append("\n");
    sb.append("  items: ").append(items).append("\n");
    sb.append("  documentReference: ").append(documentReference).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
