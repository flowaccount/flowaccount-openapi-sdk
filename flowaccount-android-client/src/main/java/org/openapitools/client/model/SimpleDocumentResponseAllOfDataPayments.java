/**
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.model;

import java.math.BigDecimal;
import java.util.Date;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

/**
 * ข้อมูลการเก็บเงินและจ่ายเงินของเอกสาร &lt;br&gt; ข้อมูลการเก็บเงิน: &lt;br&gt;1. ใบกำกับภาษี/ใบเสร็จรับเงิน (Tax Invoice) &lt;br&gt; 2. ใบเสร็จรับเงิน (Receipt) &lt;br&gt; 3. ใบกำกับภาษี/ใบเสร็จรับเงิน (Cash Invoice) &lt;br&gt; ข้อมูลการจ่ายเงิน: &lt;br&gt;1. เอกสารใบรับสินค้า (Receiving Inventory)
 **/
@ApiModel(description = "ข้อมูลการเก็บเงินและจ่ายเงินของเอกสาร <br> ข้อมูลการเก็บเงิน: <br>1. ใบกำกับภาษี/ใบเสร็จรับเงิน (Tax Invoice) <br> 2. ใบเสร็จรับเงิน (Receipt) <br> 3. ใบกำกับภาษี/ใบเสร็จรับเงิน (Cash Invoice) <br> ข้อมูลการจ่ายเงิน: <br>1. เอกสารใบรับสินค้า (Receiving Inventory)")
public class SimpleDocumentResponseAllOfDataPayments {
  
  @SerializedName("paymentDate")
  private Date paymentDate = null;
  @SerializedName("collected")
  private BigDecimal collected = 0;
  @SerializedName("paymentDeductionType")
  private Long paymentDeductionType = 0;
  @SerializedName("paymentDeductionAmount")
  private BigDecimal paymentDeductionAmount = 0;
  @SerializedName("withheldPercentage")
  private Long withheldPercentage = 0;
  @SerializedName("withheldAmount")
  private BigDecimal withheldAmount = 0;
  @SerializedName("paymentCharge")
  private BigDecimal paymentCharge = 0;
  @SerializedName("paymentMethod")
  private Integer paymentMethod = 0;
  @SerializedName("paymentChannel")
  private String paymentChannel = null;
  @SerializedName("bankAccountType")
  private Integer bankAccountType = null;
  @SerializedName("bankAccountName")
  private String bankAccountName = null;
  @SerializedName("bankAccountNumber")
  private String bankAccountNumber = null;
  @SerializedName("chequeDate")
  private Date chequeDate = null;
  @SerializedName("chequeNumber")
  private String chequeNumber = null;
  @SerializedName("creditCardBankAccountId")
  private Long creditCardBankAccountId = 0;
  @SerializedName("paymentRemarks")
  private String paymentRemarks = null;
  @SerializedName("remainingCollectedType")
  private Long remainingCollectedType = 0;
  @SerializedName("remainingCollected")
  private BigDecimal remainingCollected = 0;

  /**
   * วันที่รับชำระเงิน รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
   **/
  @ApiModelProperty(value = "วันที่รับชำระเงิน รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>")
  public Date getPaymentDate() {
    return paymentDate;
  }
  public void setPaymentDate(Date paymentDate) {
    this.paymentDate = paymentDate;
  }

  /**
   * จำนวนเงินยอดรับสุทธิ
   **/
  @ApiModelProperty(value = "จำนวนเงินยอดรับสุทธิ")
  public BigDecimal getCollected() {
    return collected;
  }
  public void setCollected(BigDecimal collected) {
    this.collected = collected;
  }

  /**
   * ประเภทรายการปรับลด: <br> 1 = ส่วนลดพิเศษ <br> 3 = ค่านายหน้าและส่วนแบ่งการขาย <br> 5 = ค่าดำเนินการ <br> 7 = ปัดเศษ <br> (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)
   **/
  @ApiModelProperty(value = "ประเภทรายการปรับลด: <br> 1 = ส่วนลดพิเศษ <br> 3 = ค่านายหน้าและส่วนแบ่งการขาย <br> 5 = ค่าดำเนินการ <br> 7 = ปัดเศษ <br> (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)")
  public Long getPaymentDeductionType() {
    return paymentDeductionType;
  }
  public void setPaymentDeductionType(Long paymentDeductionType) {
    this.paymentDeductionType = paymentDeductionType;
  }

  /**
   * จำนวนเงินยอดรายการปรับลด <br> (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)
   **/
  @ApiModelProperty(value = "จำนวนเงินยอดรายการปรับลด <br> (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)")
  public BigDecimal getPaymentDeductionAmount() {
    return paymentDeductionAmount;
  }
  public void setPaymentDeductionAmount(BigDecimal paymentDeductionAmount) {
    this.paymentDeductionAmount = paymentDeductionAmount;
  }

  /**
   * เปอร์เซ็น หัก ณ ที่จ่าย
   **/
  @ApiModelProperty(value = "เปอร์เซ็น หัก ณ ที่จ่าย")
  public Long getWithheldPercentage() {
    return withheldPercentage;
  }
  public void setWithheldPercentage(Long withheldPercentage) {
    this.withheldPercentage = withheldPercentage;
  }

  /**
   * จำนวน ยอดหัก ณ ที่จ่าย
   **/
  @ApiModelProperty(value = "จำนวน ยอดหัก ณ ที่จ่าย")
  public BigDecimal getWithheldAmount() {
    return withheldAmount;
  }
  public void setWithheldAmount(BigDecimal withheldAmount) {
    this.withheldAmount = withheldAmount;
  }

  /**
   * ค่าธรรมเนียม ที่ชำระโดยการโอนเงิน หรือ เช็ค <br> (เฉพาะเอกสารค่าใช้จ่าย)
   **/
  @ApiModelProperty(value = "ค่าธรรมเนียม ที่ชำระโดยการโอนเงิน หรือ เช็ค <br> (เฉพาะเอกสารค่าใช้จ่าย)")
  public BigDecimal getPaymentCharge() {
    return paymentCharge;
  }
  public void setPaymentCharge(BigDecimal paymentCharge) {
    this.paymentCharge = paymentCharge;
  }

  /**
   * วิธีการชำระ: <br> 1 = เงินสด <br> 3 = เช็ค <br> 5 = โอนเงิน <br> 7 = เครดิต
   **/
  @ApiModelProperty(value = "วิธีการชำระ: <br> 1 = เงินสด <br> 3 = เช็ค <br> 5 = โอนเงิน <br> 7 = เครดิต")
  public Integer getPaymentMethod() {
    return paymentMethod;
  }
  public void setPaymentMethod(Integer paymentMethod) {
    this.paymentMethod = paymentMethod;
  }

  /**
   * ช่องทางการชำระเงิน: <br> - เงินสด (Cash) <br> - โอนเงิน (Transfer) - ชื่อธนาคาร (Bank Name) <br> - เช็ค (Cheque) <br> - บัตรเครดิต (Credit card)
   **/
  @ApiModelProperty(value = "ช่องทางการชำระเงิน: <br> - เงินสด (Cash) <br> - โอนเงิน (Transfer) - ชื่อธนาคาร (Bank Name) <br> - เช็ค (Cheque) <br> - บัตรเครดิต (Credit card)")
  public String getPaymentChannel() {
    return paymentChannel;
  }
  public void setPaymentChannel(String paymentChannel) {
    this.paymentChannel = paymentChannel;
  }

  /**
   * ประเภทบัญชีธนาคาร: <br> 1 = ออมทรัพย์ <br> 3 = กระแสรายวัน <br> 7 = ฝากประจำ
   **/
  @ApiModelProperty(value = "ประเภทบัญชีธนาคาร: <br> 1 = ออมทรัพย์ <br> 3 = กระแสรายวัน <br> 7 = ฝากประจำ")
  public Integer getBankAccountType() {
    return bankAccountType;
  }
  public void setBankAccountType(Integer bankAccountType) {
    this.bankAccountType = bankAccountType;
  }

  /**
   * ชื่อธนาคาร
   **/
  @ApiModelProperty(value = "ชื่อธนาคาร")
  public String getBankAccountName() {
    return bankAccountName;
  }
  public void setBankAccountName(String bankAccountName) {
    this.bankAccountName = bankAccountName;
  }

  /**
   * เลขที่ธนาคาร / บัตรเคดิต
   **/
  @ApiModelProperty(value = "เลขที่ธนาคาร / บัตรเคดิต")
  public String getBankAccountNumber() {
    return bankAccountNumber;
  }
  public void setBankAccountNumber(String bankAccountNumber) {
    this.bankAccountNumber = bankAccountNumber;
  }

  /**
   * วันที่หน้าเช็ค รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
   **/
  @ApiModelProperty(value = "วันที่หน้าเช็ค รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>")
  public Date getChequeDate() {
    return chequeDate;
  }
  public void setChequeDate(Date chequeDate) {
    this.chequeDate = chequeDate;
  }

  /**
   * เลขที่เช็คธนาคาร
   **/
  @ApiModelProperty(value = "เลขที่เช็คธนาคาร")
  public String getChequeNumber() {
    return chequeNumber;
  }
  public void setChequeNumber(String chequeNumber) {
    this.chequeNumber = chequeNumber;
  }

  /**
   * ธนาคารที่ชำระด้วยบัตรเครดิต <br> 1 = ธนาคารกรุงเทพ <br> 2 = ธนาคารกสิกรไทย <br> 3 = ธนาคารกรุงไทย <br> 4 = ธนาคารทหารไทย <br> 5 = ธนาคารไทยพาณิชย์ <br> 6 = ธนาคารสแตนดาร์ดชาร์เตอร์ด <br> 7 = ธนาคารซีไอเอ็มบี ไทย <br> 8 = ธนาคารยูโอบี <br> 10 = ธนาคารกรุงศรีอยุธยา <br> 11 = ธนาคารออมสิน <br> 12 = ธนาคารธนชาต <br> 13 = ธนาคารแลนด์ แอนด์ เฮ้าส์ <br> 14 = ธนาคารเกียรตินาคิน <br> 15 = ธนาคารซิตี้แบงก์ <br> 16 = ธนาคารทิสโก้ <br> 53 = ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร <br> 54 = ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย <br> 55 = ธนาคารอาคารสงเคราะห์ <br> 56 = ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย <br> 57 = ธนาคารอิสลามแห่งประเทศไทย <br> 58 = ธนาคารแห่งประเทศจีน (ไทย) <br> 59 = ธนาคารไอซีบีซี (ไทย) <br> 60 = ธนาคารเมกะ สากลพาณิชย์ <br> 61 = ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น <br> 62 = ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) <br> 63 = ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น <br> 64 = ธนาคารไทยเครดิต เพื่อรายย่อย 
   **/
  @ApiModelProperty(value = "ธนาคารที่ชำระด้วยบัตรเครดิต <br> 1 = ธนาคารกรุงเทพ <br> 2 = ธนาคารกสิกรไทย <br> 3 = ธนาคารกรุงไทย <br> 4 = ธนาคารทหารไทย <br> 5 = ธนาคารไทยพาณิชย์ <br> 6 = ธนาคารสแตนดาร์ดชาร์เตอร์ด <br> 7 = ธนาคารซีไอเอ็มบี ไทย <br> 8 = ธนาคารยูโอบี <br> 10 = ธนาคารกรุงศรีอยุธยา <br> 11 = ธนาคารออมสิน <br> 12 = ธนาคารธนชาต <br> 13 = ธนาคารแลนด์ แอนด์ เฮ้าส์ <br> 14 = ธนาคารเกียรตินาคิน <br> 15 = ธนาคารซิตี้แบงก์ <br> 16 = ธนาคารทิสโก้ <br> 53 = ธนาคารเพื่อการเกษตรและสหกรณ์การเกษตร <br> 54 = ธนาคารเพื่อการส่งออกและนำเข้าแห่งประเทศไทย <br> 55 = ธนาคารอาคารสงเคราะห์ <br> 56 = ธนาคารพัฒนาวิสาหกิจขนาดกลางและขนาดย่อมแห่งประเทศไทย <br> 57 = ธนาคารอิสลามแห่งประเทศไทย <br> 58 = ธนาคารแห่งประเทศจีน (ไทย) <br> 59 = ธนาคารไอซีบีซี (ไทย) <br> 60 = ธนาคารเมกะ สากลพาณิชย์ <br> 61 = ธนาคารซูมิโตโม มิตซุย แบงกิ้ง คอร์ปอเรชั่น <br> 62 = ธนาคารมิซูโฮ จำกัด (กรุงเทพฯ) <br> 63 = ธนาคารฮ่องกงและเซี่ยงไฮ้แบงกิ้งคอร์ปอเรชั่น <br> 64 = ธนาคารไทยเครดิต เพื่อรายย่อย ")
  public Long getCreditCardBankAccountId() {
    return creditCardBankAccountId;
  }
  public void setCreditCardBankAccountId(Long creditCardBankAccountId) {
    this.creditCardBankAccountId = creditCardBankAccountId;
  }

  /**
   * หมายเหตุ การรับชำระเงิน หรือ ชำระเงิน
   **/
  @ApiModelProperty(value = "หมายเหตุ การรับชำระเงิน หรือ ชำระเงิน")
  public String getPaymentRemarks() {
    return paymentRemarks;
  }
  public void setPaymentRemarks(String paymentRemarks) {
    this.paymentRemarks = paymentRemarks;
  }

  /**
   * สาเหตุเงินขาดเงินเกิน: <br> 51 = เงินขาดหรือเงินกิน <br> 55 = ค่าธรรมเนียมธนาคาร 
   **/
  @ApiModelProperty(value = "สาเหตุเงินขาดเงินเกิน: <br> 51 = เงินขาดหรือเงินกิน <br> 55 = ค่าธรรมเนียมธนาคาร ")
  public Long getRemainingCollectedType() {
    return remainingCollectedType;
  }
  public void setRemainingCollectedType(Long remainingCollectedType) {
    this.remainingCollectedType = remainingCollectedType;
  }

  /**
   * จำนวน ยอดเงินขาด หรือ เงินเกิน
   **/
  @ApiModelProperty(value = "จำนวน ยอดเงินขาด หรือ เงินเกิน")
  public BigDecimal getRemainingCollected() {
    return remainingCollected;
  }
  public void setRemainingCollected(BigDecimal remainingCollected) {
    this.remainingCollected = remainingCollected;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleDocumentResponseAllOfDataPayments simpleDocumentResponseAllOfDataPayments = (SimpleDocumentResponseAllOfDataPayments) o;
    return (this.paymentDate == null ? simpleDocumentResponseAllOfDataPayments.paymentDate == null : this.paymentDate.equals(simpleDocumentResponseAllOfDataPayments.paymentDate)) &&
        (this.collected == null ? simpleDocumentResponseAllOfDataPayments.collected == null : this.collected.equals(simpleDocumentResponseAllOfDataPayments.collected)) &&
        (this.paymentDeductionType == null ? simpleDocumentResponseAllOfDataPayments.paymentDeductionType == null : this.paymentDeductionType.equals(simpleDocumentResponseAllOfDataPayments.paymentDeductionType)) &&
        (this.paymentDeductionAmount == null ? simpleDocumentResponseAllOfDataPayments.paymentDeductionAmount == null : this.paymentDeductionAmount.equals(simpleDocumentResponseAllOfDataPayments.paymentDeductionAmount)) &&
        (this.withheldPercentage == null ? simpleDocumentResponseAllOfDataPayments.withheldPercentage == null : this.withheldPercentage.equals(simpleDocumentResponseAllOfDataPayments.withheldPercentage)) &&
        (this.withheldAmount == null ? simpleDocumentResponseAllOfDataPayments.withheldAmount == null : this.withheldAmount.equals(simpleDocumentResponseAllOfDataPayments.withheldAmount)) &&
        (this.paymentCharge == null ? simpleDocumentResponseAllOfDataPayments.paymentCharge == null : this.paymentCharge.equals(simpleDocumentResponseAllOfDataPayments.paymentCharge)) &&
        (this.paymentMethod == null ? simpleDocumentResponseAllOfDataPayments.paymentMethod == null : this.paymentMethod.equals(simpleDocumentResponseAllOfDataPayments.paymentMethod)) &&
        (this.paymentChannel == null ? simpleDocumentResponseAllOfDataPayments.paymentChannel == null : this.paymentChannel.equals(simpleDocumentResponseAllOfDataPayments.paymentChannel)) &&
        (this.bankAccountType == null ? simpleDocumentResponseAllOfDataPayments.bankAccountType == null : this.bankAccountType.equals(simpleDocumentResponseAllOfDataPayments.bankAccountType)) &&
        (this.bankAccountName == null ? simpleDocumentResponseAllOfDataPayments.bankAccountName == null : this.bankAccountName.equals(simpleDocumentResponseAllOfDataPayments.bankAccountName)) &&
        (this.bankAccountNumber == null ? simpleDocumentResponseAllOfDataPayments.bankAccountNumber == null : this.bankAccountNumber.equals(simpleDocumentResponseAllOfDataPayments.bankAccountNumber)) &&
        (this.chequeDate == null ? simpleDocumentResponseAllOfDataPayments.chequeDate == null : this.chequeDate.equals(simpleDocumentResponseAllOfDataPayments.chequeDate)) &&
        (this.chequeNumber == null ? simpleDocumentResponseAllOfDataPayments.chequeNumber == null : this.chequeNumber.equals(simpleDocumentResponseAllOfDataPayments.chequeNumber)) &&
        (this.creditCardBankAccountId == null ? simpleDocumentResponseAllOfDataPayments.creditCardBankAccountId == null : this.creditCardBankAccountId.equals(simpleDocumentResponseAllOfDataPayments.creditCardBankAccountId)) &&
        (this.paymentRemarks == null ? simpleDocumentResponseAllOfDataPayments.paymentRemarks == null : this.paymentRemarks.equals(simpleDocumentResponseAllOfDataPayments.paymentRemarks)) &&
        (this.remainingCollectedType == null ? simpleDocumentResponseAllOfDataPayments.remainingCollectedType == null : this.remainingCollectedType.equals(simpleDocumentResponseAllOfDataPayments.remainingCollectedType)) &&
        (this.remainingCollected == null ? simpleDocumentResponseAllOfDataPayments.remainingCollected == null : this.remainingCollected.equals(simpleDocumentResponseAllOfDataPayments.remainingCollected));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.paymentDate == null ? 0: this.paymentDate.hashCode());
    result = 31 * result + (this.collected == null ? 0: this.collected.hashCode());
    result = 31 * result + (this.paymentDeductionType == null ? 0: this.paymentDeductionType.hashCode());
    result = 31 * result + (this.paymentDeductionAmount == null ? 0: this.paymentDeductionAmount.hashCode());
    result = 31 * result + (this.withheldPercentage == null ? 0: this.withheldPercentage.hashCode());
    result = 31 * result + (this.withheldAmount == null ? 0: this.withheldAmount.hashCode());
    result = 31 * result + (this.paymentCharge == null ? 0: this.paymentCharge.hashCode());
    result = 31 * result + (this.paymentMethod == null ? 0: this.paymentMethod.hashCode());
    result = 31 * result + (this.paymentChannel == null ? 0: this.paymentChannel.hashCode());
    result = 31 * result + (this.bankAccountType == null ? 0: this.bankAccountType.hashCode());
    result = 31 * result + (this.bankAccountName == null ? 0: this.bankAccountName.hashCode());
    result = 31 * result + (this.bankAccountNumber == null ? 0: this.bankAccountNumber.hashCode());
    result = 31 * result + (this.chequeDate == null ? 0: this.chequeDate.hashCode());
    result = 31 * result + (this.chequeNumber == null ? 0: this.chequeNumber.hashCode());
    result = 31 * result + (this.creditCardBankAccountId == null ? 0: this.creditCardBankAccountId.hashCode());
    result = 31 * result + (this.paymentRemarks == null ? 0: this.paymentRemarks.hashCode());
    result = 31 * result + (this.remainingCollectedType == null ? 0: this.remainingCollectedType.hashCode());
    result = 31 * result + (this.remainingCollected == null ? 0: this.remainingCollected.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleDocumentResponseAllOfDataPayments {\n");
    
    sb.append("  paymentDate: ").append(paymentDate).append("\n");
    sb.append("  collected: ").append(collected).append("\n");
    sb.append("  paymentDeductionType: ").append(paymentDeductionType).append("\n");
    sb.append("  paymentDeductionAmount: ").append(paymentDeductionAmount).append("\n");
    sb.append("  withheldPercentage: ").append(withheldPercentage).append("\n");
    sb.append("  withheldAmount: ").append(withheldAmount).append("\n");
    sb.append("  paymentCharge: ").append(paymentCharge).append("\n");
    sb.append("  paymentMethod: ").append(paymentMethod).append("\n");
    sb.append("  paymentChannel: ").append(paymentChannel).append("\n");
    sb.append("  bankAccountType: ").append(bankAccountType).append("\n");
    sb.append("  bankAccountName: ").append(bankAccountName).append("\n");
    sb.append("  bankAccountNumber: ").append(bankAccountNumber).append("\n");
    sb.append("  chequeDate: ").append(chequeDate).append("\n");
    sb.append("  chequeNumber: ").append(chequeNumber).append("\n");
    sb.append("  creditCardBankAccountId: ").append(creditCardBankAccountId).append("\n");
    sb.append("  paymentRemarks: ").append(paymentRemarks).append("\n");
    sb.append("  remainingCollectedType: ").append(remainingCollectedType).append("\n");
    sb.append("  remainingCollected: ").append(remainingCollected).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
