/**
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.reflect.TypeToken;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Date;
import org.openapitools.client.model.*;

public class JsonUtil {
  public static GsonBuilder gsonBuilder;

  static {
    gsonBuilder = new GsonBuilder();
    gsonBuilder.serializeNulls();
    gsonBuilder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
    gsonBuilder.registerTypeAdapter(Date.class, new JsonDeserializer<Date>() {
      public Date deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
        return new Date(json.getAsJsonPrimitive().getAsLong());
      }
    });
  }

  public static Gson getGson() {
    return gsonBuilder.create();
  }

  public static String serialize(Object obj){
    return getGson().toJson(obj);
  }

  public static <T> T deserializeToList(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getListTypeForDeserialization(cls));
  }

  public static <T> T deserializeToObject(String jsonString, Class cls){
    return getGson().fromJson(jsonString, getTypeForDeserialization(cls));
  }

  public static Type getListTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AttachmentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<AttachmentResponse>>(){}.getType();
    }
    
    if ("AttachmentResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<List<AttachmentResponseData>>(){}.getType();
    }
    
    if ("AuthenResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<AuthenResponse>>(){}.getType();
    }
    
    if ("BankAccount".equalsIgnoreCase(className)) {
      return new TypeToken<List<BankAccount>>(){}.getType();
    }
    
    if ("BankAccountResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<BankAccountResponse>>(){}.getType();
    }
    
    if ("BusinessCategory".equalsIgnoreCase(className)) {
      return new TypeToken<List<BusinessCategory>>(){}.getType();
    }
    
    if ("CompanyInfo".equalsIgnoreCase(className)) {
      return new TypeToken<List<CompanyInfo>>(){}.getType();
    }
    
    if ("CompanyInfoResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<CompanyInfoResponse>>(){}.getType();
    }
    
    if ("CompanyInfoResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<CompanyInfoResponseAllOf>>(){}.getType();
    }
    
    if ("Contact".equalsIgnoreCase(className)) {
      return new TypeToken<List<Contact>>(){}.getType();
    }
    
    if ("ContactResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ContactResponse>>(){}.getType();
    }
    
    if ("ContactResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<ContactResponseAllOf>>(){}.getType();
    }
    
    if ("DeleteResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<DeleteResponse>>(){}.getType();
    }
    
    if ("DeleteResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<List<DeleteResponseData>>(){}.getType();
    }
    
    if ("Document".equalsIgnoreCase(className)) {
      return new TypeToken<List<Document>>(){}.getType();
    }
    
    if ("DocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<DocumentResponse>>(){}.getType();
    }
    
    if ("ExpenseDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseDocument>>(){}.getType();
    }
    
    if ("ExpenseInlineDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseInlineDocument>>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseInlineDocumentAllOf>>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseInlineDocumentResponse>>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseInlineDocumentResponseAllOf>>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentResponseAllOfData".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseInlineDocumentResponseAllOfData>>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentWithPaymentPaidCash".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseInlineDocumentWithPaymentPaidCash>>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentWithPaymentPaidCheque".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseInlineDocumentWithPaymentPaidCheque>>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentWithPaymentPaidCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseInlineDocumentWithPaymentPaidCreditCard>>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentWithPaymentPaidTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseInlineDocumentWithPaymentPaidTransfer>>(){}.getType();
    }
    
    if ("ExpenseInlineProductItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseInlineProductItem>>(){}.getType();
    }
    
    if ("ExpenseResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseResponse>>(){}.getType();
    }
    
    if ("ExpenseSimpleDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseSimpleDocument>>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseSimpleDocumentAllOf>>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseSimpleDocumentResponse>>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseSimpleDocumentResponseAllOf>>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentResponseAllOfData".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseSimpleDocumentResponseAllOfData>>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentWithPaymentPaidCash".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseSimpleDocumentWithPaymentPaidCash>>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentWithPaymentPaidCheque".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseSimpleDocumentWithPaymentPaidCheque>>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentWithPaymentPaidCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseSimpleDocumentWithPaymentPaidCreditCard>>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentWithPaymentPaidTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseSimpleDocumentWithPaymentPaidTransfer>>(){}.getType();
    }
    
    if ("ExpenseSimpleProductItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<ExpenseSimpleProductItem>>(){}.getType();
    }
    
    if ("InlineDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocument>>(){}.getType();
    }
    
    if ("InlineDocumentAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocumentAllOf>>(){}.getType();
    }
    
    if ("InlineDocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocumentResponse>>(){}.getType();
    }
    
    if ("InlineDocumentResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocumentResponseAllOf>>(){}.getType();
    }
    
    if ("InlineDocumentResponseAllOfData".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocumentResponseAllOfData>>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentPaidCash".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocumentWithPaymentPaidCash>>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentPaidCheque".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocumentWithPaymentPaidCheque>>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentPaidCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocumentWithPaymentPaidCreditCard>>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentPaidTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocumentWithPaymentPaidTransfer>>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentReceivingCash".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocumentWithPaymentReceivingCash>>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentReceivingCheque".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocumentWithPaymentReceivingCheque>>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentReceivingCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocumentWithPaymentReceivingCreditCard>>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentReceivingTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineDocumentWithPaymentReceivingTransfer>>(){}.getType();
    }
    
    if ("InlineObject".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject>>(){}.getType();
    }
    
    if ("InlineObject1".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject1>>(){}.getType();
    }
    
    if ("InlineObject2".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject2>>(){}.getType();
    }
    
    if ("InlineObject3".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject3>>(){}.getType();
    }
    
    if ("InlineObject4".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject4>>(){}.getType();
    }
    
    if ("InlineObject5".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject5>>(){}.getType();
    }
    
    if ("InlineObject6".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject6>>(){}.getType();
    }
    
    if ("InlineObject7".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject7>>(){}.getType();
    }
    
    if ("InlineObject8".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject8>>(){}.getType();
    }
    
    if ("InlineObject9".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineObject9>>(){}.getType();
    }
    
    if ("InlineProductItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineProductItem>>(){}.getType();
    }
    
    if ("InlineProductItemAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<InlineProductItemAllOf>>(){}.getType();
    }
    
    if ("PaymentPaidCash".equalsIgnoreCase(className)) {
      return new TypeToken<List<PaymentPaidCash>>(){}.getType();
    }
    
    if ("PaymentPaidCheque".equalsIgnoreCase(className)) {
      return new TypeToken<List<PaymentPaidCheque>>(){}.getType();
    }
    
    if ("PaymentPaidCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<List<PaymentPaidCreditCard>>(){}.getType();
    }
    
    if ("PaymentPaidTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<List<PaymentPaidTransfer>>(){}.getType();
    }
    
    if ("PaymentReceivingCash".equalsIgnoreCase(className)) {
      return new TypeToken<List<PaymentReceivingCash>>(){}.getType();
    }
    
    if ("PaymentReceivingCheque".equalsIgnoreCase(className)) {
      return new TypeToken<List<PaymentReceivingCheque>>(){}.getType();
    }
    
    if ("PaymentReceivingCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<List<PaymentReceivingCreditCard>>(){}.getType();
    }
    
    if ("PaymentReceivingTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<List<PaymentReceivingTransfer>>(){}.getType();
    }
    
    if ("ProductInventory".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProductInventory>>(){}.getType();
    }
    
    if ("ProductInventoryBalance".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProductInventoryBalance>>(){}.getType();
    }
    
    if ("ProductItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProductItem>>(){}.getType();
    }
    
    if ("ProductNonInventory".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProductNonInventory>>(){}.getType();
    }
    
    if ("ProductResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProductResponse>>(){}.getType();
    }
    
    if ("ProductResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProductResponseData>>(){}.getType();
    }
    
    if ("ProductService".equalsIgnoreCase(className)) {
      return new TypeToken<List<ProductService>>(){}.getType();
    }
    
    if ("ReferencedByMe".equalsIgnoreCase(className)) {
      return new TypeToken<List<ReferencedByMe>>(){}.getType();
    }
    
    if ("ReferencedToMe".equalsIgnoreCase(className)) {
      return new TypeToken<List<ReferencedToMe>>(){}.getType();
    }
    
    if ("SendEmail".equalsIgnoreCase(className)) {
      return new TypeToken<List<SendEmail>>(){}.getType();
    }
    
    if ("SendEmailCoppies".equalsIgnoreCase(className)) {
      return new TypeToken<List<SendEmailCoppies>>(){}.getType();
    }
    
    if ("SendEmailCoppiesAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<SendEmailCoppiesAllOf>>(){}.getType();
    }
    
    if ("SendEmailResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<SendEmailResponse>>(){}.getType();
    }
    
    if ("SendEmailResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<List<SendEmailResponseData>>(){}.getType();
    }
    
    if ("SendEmailSimple".equalsIgnoreCase(className)) {
      return new TypeToken<List<SendEmailSimple>>(){}.getType();
    }
    
    if ("ShareDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<ShareDocument>>(){}.getType();
    }
    
    if ("ShareDocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<ShareDocumentResponse>>(){}.getType();
    }
    
    if ("ShareDocumentResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<List<ShareDocumentResponseData>>(){}.getType();
    }
    
    if ("SimpleDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocument>>(){}.getType();
    }
    
    if ("SimpleDocumentAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentAllOf>>(){}.getType();
    }
    
    if ("SimpleDocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentResponse>>(){}.getType();
    }
    
    if ("SimpleDocumentResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentResponseAllOf>>(){}.getType();
    }
    
    if ("SimpleDocumentResponseAllOfData".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentResponseAllOfData>>(){}.getType();
    }
    
    if ("SimpleDocumentResponseAllOfDataCompany".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentResponseAllOfDataCompany>>(){}.getType();
    }
    
    if ("SimpleDocumentResponseAllOfDataPayments".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentResponseAllOfDataPayments>>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentPaidCash".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentWithPaymentPaidCash>>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentPaidCheque".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentWithPaymentPaidCheque>>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentPaidCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentWithPaymentPaidCreditCard>>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentPaidTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentWithPaymentPaidTransfer>>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentReceivingCash".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentWithPaymentReceivingCash>>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentReceivingCheque".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentWithPaymentReceivingCheque>>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentReceivingCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentWithPaymentReceivingCreditCard>>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentReceivingTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleDocumentWithPaymentReceivingTransfer>>(){}.getType();
    }
    
    if ("SimpleProductItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<SimpleProductItem>>(){}.getType();
    }
    
    if ("StatusDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<StatusDocument>>(){}.getType();
    }
    
    if ("UpdateDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateDocument>>(){}.getType();
    }
    
    if ("UpdateExpenseDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateExpenseDocument>>(){}.getType();
    }
    
    if ("UpdateExpenseInlineDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateExpenseInlineDocument>>(){}.getType();
    }
    
    if ("UpdateExpenseSimpleDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateExpenseSimpleDocument>>(){}.getType();
    }
    
    if ("UpdateInlineDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateInlineDocument>>(){}.getType();
    }
    
    if ("UpdateSimpleDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateSimpleDocument>>(){}.getType();
    }
    
    if ("UpdateWithholidingTaxDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpdateWithholidingTaxDocument>>(){}.getType();
    }
    
    if ("UpgradeDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<UpgradeDocument>>(){}.getType();
    }
    
    if ("WithholidingTaxDocument".equalsIgnoreCase(className)) {
      return new TypeToken<List<WithholidingTaxDocument>>(){}.getType();
    }
    
    if ("WithholidingTaxDocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<List<WithholidingTaxDocumentResponse>>(){}.getType();
    }
    
    if ("WithholidingTaxDocumentResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<List<WithholidingTaxDocumentResponseData>>(){}.getType();
    }
    
    if ("WithholidingTaxItem".equalsIgnoreCase(className)) {
      return new TypeToken<List<WithholidingTaxItem>>(){}.getType();
    }
    
    return new TypeToken<List<Object>>(){}.getType();
  }

  public static Type getTypeForDeserialization(Class cls) {
    String className = cls.getSimpleName();
    
    if ("AttachmentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<AttachmentResponse>(){}.getType();
    }
    
    if ("AttachmentResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<AttachmentResponseData>(){}.getType();
    }
    
    if ("AuthenResponse".equalsIgnoreCase(className)) {
      return new TypeToken<AuthenResponse>(){}.getType();
    }
    
    if ("BankAccount".equalsIgnoreCase(className)) {
      return new TypeToken<BankAccount>(){}.getType();
    }
    
    if ("BankAccountResponse".equalsIgnoreCase(className)) {
      return new TypeToken<BankAccountResponse>(){}.getType();
    }
    
    if ("BusinessCategory".equalsIgnoreCase(className)) {
      return new TypeToken<BusinessCategory>(){}.getType();
    }
    
    if ("CompanyInfo".equalsIgnoreCase(className)) {
      return new TypeToken<CompanyInfo>(){}.getType();
    }
    
    if ("CompanyInfoResponse".equalsIgnoreCase(className)) {
      return new TypeToken<CompanyInfoResponse>(){}.getType();
    }
    
    if ("CompanyInfoResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<CompanyInfoResponseAllOf>(){}.getType();
    }
    
    if ("Contact".equalsIgnoreCase(className)) {
      return new TypeToken<Contact>(){}.getType();
    }
    
    if ("ContactResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ContactResponse>(){}.getType();
    }
    
    if ("ContactResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<ContactResponseAllOf>(){}.getType();
    }
    
    if ("DeleteResponse".equalsIgnoreCase(className)) {
      return new TypeToken<DeleteResponse>(){}.getType();
    }
    
    if ("DeleteResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<DeleteResponseData>(){}.getType();
    }
    
    if ("Document".equalsIgnoreCase(className)) {
      return new TypeToken<Document>(){}.getType();
    }
    
    if ("DocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<DocumentResponse>(){}.getType();
    }
    
    if ("ExpenseDocument".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseDocument>(){}.getType();
    }
    
    if ("ExpenseInlineDocument".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseInlineDocument>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseInlineDocumentAllOf>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseInlineDocumentResponse>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseInlineDocumentResponseAllOf>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentResponseAllOfData".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseInlineDocumentResponseAllOfData>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentWithPaymentPaidCash".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseInlineDocumentWithPaymentPaidCash>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentWithPaymentPaidCheque".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseInlineDocumentWithPaymentPaidCheque>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentWithPaymentPaidCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseInlineDocumentWithPaymentPaidCreditCard>(){}.getType();
    }
    
    if ("ExpenseInlineDocumentWithPaymentPaidTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseInlineDocumentWithPaymentPaidTransfer>(){}.getType();
    }
    
    if ("ExpenseInlineProductItem".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseInlineProductItem>(){}.getType();
    }
    
    if ("ExpenseResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseResponse>(){}.getType();
    }
    
    if ("ExpenseSimpleDocument".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseSimpleDocument>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseSimpleDocumentAllOf>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseSimpleDocumentResponse>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseSimpleDocumentResponseAllOf>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentResponseAllOfData".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseSimpleDocumentResponseAllOfData>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentWithPaymentPaidCash".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseSimpleDocumentWithPaymentPaidCash>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentWithPaymentPaidCheque".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseSimpleDocumentWithPaymentPaidCheque>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentWithPaymentPaidCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseSimpleDocumentWithPaymentPaidCreditCard>(){}.getType();
    }
    
    if ("ExpenseSimpleDocumentWithPaymentPaidTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseSimpleDocumentWithPaymentPaidTransfer>(){}.getType();
    }
    
    if ("ExpenseSimpleProductItem".equalsIgnoreCase(className)) {
      return new TypeToken<ExpenseSimpleProductItem>(){}.getType();
    }
    
    if ("InlineDocument".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocument>(){}.getType();
    }
    
    if ("InlineDocumentAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocumentAllOf>(){}.getType();
    }
    
    if ("InlineDocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocumentResponse>(){}.getType();
    }
    
    if ("InlineDocumentResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocumentResponseAllOf>(){}.getType();
    }
    
    if ("InlineDocumentResponseAllOfData".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocumentResponseAllOfData>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentPaidCash".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocumentWithPaymentPaidCash>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentPaidCheque".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocumentWithPaymentPaidCheque>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentPaidCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocumentWithPaymentPaidCreditCard>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentPaidTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocumentWithPaymentPaidTransfer>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentReceivingCash".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocumentWithPaymentReceivingCash>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentReceivingCheque".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocumentWithPaymentReceivingCheque>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentReceivingCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocumentWithPaymentReceivingCreditCard>(){}.getType();
    }
    
    if ("InlineDocumentWithPaymentReceivingTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<InlineDocumentWithPaymentReceivingTransfer>(){}.getType();
    }
    
    if ("InlineObject".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject>(){}.getType();
    }
    
    if ("InlineObject1".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject1>(){}.getType();
    }
    
    if ("InlineObject2".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject2>(){}.getType();
    }
    
    if ("InlineObject3".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject3>(){}.getType();
    }
    
    if ("InlineObject4".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject4>(){}.getType();
    }
    
    if ("InlineObject5".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject5>(){}.getType();
    }
    
    if ("InlineObject6".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject6>(){}.getType();
    }
    
    if ("InlineObject7".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject7>(){}.getType();
    }
    
    if ("InlineObject8".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject8>(){}.getType();
    }
    
    if ("InlineObject9".equalsIgnoreCase(className)) {
      return new TypeToken<InlineObject9>(){}.getType();
    }
    
    if ("InlineProductItem".equalsIgnoreCase(className)) {
      return new TypeToken<InlineProductItem>(){}.getType();
    }
    
    if ("InlineProductItemAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<InlineProductItemAllOf>(){}.getType();
    }
    
    if ("PaymentPaidCash".equalsIgnoreCase(className)) {
      return new TypeToken<PaymentPaidCash>(){}.getType();
    }
    
    if ("PaymentPaidCheque".equalsIgnoreCase(className)) {
      return new TypeToken<PaymentPaidCheque>(){}.getType();
    }
    
    if ("PaymentPaidCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<PaymentPaidCreditCard>(){}.getType();
    }
    
    if ("PaymentPaidTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<PaymentPaidTransfer>(){}.getType();
    }
    
    if ("PaymentReceivingCash".equalsIgnoreCase(className)) {
      return new TypeToken<PaymentReceivingCash>(){}.getType();
    }
    
    if ("PaymentReceivingCheque".equalsIgnoreCase(className)) {
      return new TypeToken<PaymentReceivingCheque>(){}.getType();
    }
    
    if ("PaymentReceivingCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<PaymentReceivingCreditCard>(){}.getType();
    }
    
    if ("PaymentReceivingTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<PaymentReceivingTransfer>(){}.getType();
    }
    
    if ("ProductInventory".equalsIgnoreCase(className)) {
      return new TypeToken<ProductInventory>(){}.getType();
    }
    
    if ("ProductInventoryBalance".equalsIgnoreCase(className)) {
      return new TypeToken<ProductInventoryBalance>(){}.getType();
    }
    
    if ("ProductItem".equalsIgnoreCase(className)) {
      return new TypeToken<ProductItem>(){}.getType();
    }
    
    if ("ProductNonInventory".equalsIgnoreCase(className)) {
      return new TypeToken<ProductNonInventory>(){}.getType();
    }
    
    if ("ProductResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ProductResponse>(){}.getType();
    }
    
    if ("ProductResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<ProductResponseData>(){}.getType();
    }
    
    if ("ProductService".equalsIgnoreCase(className)) {
      return new TypeToken<ProductService>(){}.getType();
    }
    
    if ("ReferencedByMe".equalsIgnoreCase(className)) {
      return new TypeToken<ReferencedByMe>(){}.getType();
    }
    
    if ("ReferencedToMe".equalsIgnoreCase(className)) {
      return new TypeToken<ReferencedToMe>(){}.getType();
    }
    
    if ("SendEmail".equalsIgnoreCase(className)) {
      return new TypeToken<SendEmail>(){}.getType();
    }
    
    if ("SendEmailCoppies".equalsIgnoreCase(className)) {
      return new TypeToken<SendEmailCoppies>(){}.getType();
    }
    
    if ("SendEmailCoppiesAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<SendEmailCoppiesAllOf>(){}.getType();
    }
    
    if ("SendEmailResponse".equalsIgnoreCase(className)) {
      return new TypeToken<SendEmailResponse>(){}.getType();
    }
    
    if ("SendEmailResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<SendEmailResponseData>(){}.getType();
    }
    
    if ("SendEmailSimple".equalsIgnoreCase(className)) {
      return new TypeToken<SendEmailSimple>(){}.getType();
    }
    
    if ("ShareDocument".equalsIgnoreCase(className)) {
      return new TypeToken<ShareDocument>(){}.getType();
    }
    
    if ("ShareDocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<ShareDocumentResponse>(){}.getType();
    }
    
    if ("ShareDocumentResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<ShareDocumentResponseData>(){}.getType();
    }
    
    if ("SimpleDocument".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocument>(){}.getType();
    }
    
    if ("SimpleDocumentAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentAllOf>(){}.getType();
    }
    
    if ("SimpleDocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentResponse>(){}.getType();
    }
    
    if ("SimpleDocumentResponseAllOf".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentResponseAllOf>(){}.getType();
    }
    
    if ("SimpleDocumentResponseAllOfData".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentResponseAllOfData>(){}.getType();
    }
    
    if ("SimpleDocumentResponseAllOfDataCompany".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentResponseAllOfDataCompany>(){}.getType();
    }
    
    if ("SimpleDocumentResponseAllOfDataPayments".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentResponseAllOfDataPayments>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentPaidCash".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentWithPaymentPaidCash>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentPaidCheque".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentWithPaymentPaidCheque>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentPaidCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentWithPaymentPaidCreditCard>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentPaidTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentWithPaymentPaidTransfer>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentReceivingCash".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentWithPaymentReceivingCash>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentReceivingCheque".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentWithPaymentReceivingCheque>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentReceivingCreditCard".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentWithPaymentReceivingCreditCard>(){}.getType();
    }
    
    if ("SimpleDocumentWithPaymentReceivingTransfer".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleDocumentWithPaymentReceivingTransfer>(){}.getType();
    }
    
    if ("SimpleProductItem".equalsIgnoreCase(className)) {
      return new TypeToken<SimpleProductItem>(){}.getType();
    }
    
    if ("StatusDocument".equalsIgnoreCase(className)) {
      return new TypeToken<StatusDocument>(){}.getType();
    }
    
    if ("UpdateDocument".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateDocument>(){}.getType();
    }
    
    if ("UpdateExpenseDocument".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateExpenseDocument>(){}.getType();
    }
    
    if ("UpdateExpenseInlineDocument".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateExpenseInlineDocument>(){}.getType();
    }
    
    if ("UpdateExpenseSimpleDocument".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateExpenseSimpleDocument>(){}.getType();
    }
    
    if ("UpdateInlineDocument".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateInlineDocument>(){}.getType();
    }
    
    if ("UpdateSimpleDocument".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateSimpleDocument>(){}.getType();
    }
    
    if ("UpdateWithholidingTaxDocument".equalsIgnoreCase(className)) {
      return new TypeToken<UpdateWithholidingTaxDocument>(){}.getType();
    }
    
    if ("UpgradeDocument".equalsIgnoreCase(className)) {
      return new TypeToken<UpgradeDocument>(){}.getType();
    }
    
    if ("WithholidingTaxDocument".equalsIgnoreCase(className)) {
      return new TypeToken<WithholidingTaxDocument>(){}.getType();
    }
    
    if ("WithholidingTaxDocumentResponse".equalsIgnoreCase(className)) {
      return new TypeToken<WithholidingTaxDocumentResponse>(){}.getType();
    }
    
    if ("WithholidingTaxDocumentResponseData".equalsIgnoreCase(className)) {
      return new TypeToken<WithholidingTaxDocumentResponseData>(){}.getType();
    }
    
    if ("WithholidingTaxItem".equalsIgnoreCase(className)) {
      return new TypeToken<WithholidingTaxItem>(){}.getType();
    }
    
    return new TypeToken<Object>(){}.getType();
  }

};
