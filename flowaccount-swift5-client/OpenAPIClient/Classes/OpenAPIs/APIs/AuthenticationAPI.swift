//
// AuthenticationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class AuthenticationAPI {
    /**
     Generate Access Token
     
     - parameter contentType: (header)  
     - parameter grantType: (form)  (optional)
     - parameter scope: (form)  (optional)
     - parameter clientId: (form)  (optional)
     - parameter clientSecret: (form)  (optional)
     - parameter guid: (form)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func tokenPost(contentType: String, grantType: String? = nil, scope: String? = nil, clientId: String? = nil, clientSecret: String? = nil, guid: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AuthenResponse?,_ error: Error?) -> Void)) {
        tokenPostWithRequestBuilder(contentType: contentType, grantType: grantType, scope: scope, clientId: clientId, clientSecret: clientSecret, guid: guid).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate Access Token
     - POST /token
     - parameter contentType: (header)  
     - parameter grantType: (form)  (optional)
     - parameter scope: (form)  (optional)
     - parameter clientId: (form)  (optional)
     - parameter clientSecret: (form)  (optional)
     - parameter guid: (form)  (optional)
     - returns: RequestBuilder<AuthenResponse> 
     */
    open class func tokenPostWithRequestBuilder(contentType: String, grantType: String? = nil, scope: String? = nil, clientId: String? = nil, clientSecret: String? = nil, guid: String? = nil) -> RequestBuilder<AuthenResponse> {
        let path = "/token"
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "grant_type": grantType?.encodeToJSON(),
            "scope": scope?.encodeToJSON(),
            "client_id": clientId?.encodeToJSON(),
            "client_secret": clientSecret?.encodeToJSON(),
            "guid": guid?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Content-Type": contentType.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AuthenResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
