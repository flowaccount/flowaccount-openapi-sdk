//
// ReceiptAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class ReceiptAPI {
    /**
     Send email receipt document.
     
     - parameter authorization: (header)  
     - parameter sendEmailCoppies: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsEmailDocumentPost(authorization: String, sendEmailCoppies: SendEmailCoppies, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SendEmailResponse?,_ error: Error?) -> Void)) {
        receiptsEmailDocumentPostWithRequestBuilder(authorization: authorization, sendEmailCoppies: sendEmailCoppies).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Send email receipt document.
     - POST /receipts/email-document
     - ส่งเอกสารใบเสร็จรับเงิน ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
     - parameter authorization: (header)  
     - parameter sendEmailCoppies: (body)  
     - returns: RequestBuilder<SendEmailResponse> 
     */
    open class func receiptsEmailDocumentPostWithRequestBuilder(authorization: String, sendEmailCoppies: SendEmailCoppies) -> RequestBuilder<SendEmailResponse> {
        let path = "/receipts/email-document"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendEmailCoppies)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SendEmailResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get list all receipt documents
     
     - parameter currentPage: (query) Query current page document receipts. &lt;br&gt;Example Pattern: &lt;ex&gt;/receipts?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/receipts?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt; 
     - parameter pageSize: (query) Query document receipts list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /receipts?pageSize&#x3D;20 &lt;/ex&gt; 
     - parameter authorization: (header)  
     - parameter sortBy: (query) Query document receipts list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)
     - parameter filter: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsGet(currentPage: Int, pageSize: Int, authorization: String, sortBy: String? = nil, filter: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AllDocumentResponse?,_ error: Error?) -> Void)) {
        receiptsGetWithRequestBuilder(currentPage: currentPage, pageSize: pageSize, authorization: authorization, sortBy: sortBy, filter: filter).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get list all receipt documents
     - GET /receipts
     - เรียกดูข้อมูลเอกสารใบเสร็จรับเงิน ทั้งหมดในระบบ
     - parameter currentPage: (query) Query current page document receipts. &lt;br&gt;Example Pattern: &lt;ex&gt;/receipts?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/receipts?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt; 
     - parameter pageSize: (query) Query document receipts list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /receipts?pageSize&#x3D;20 &lt;/ex&gt; 
     - parameter authorization: (header)  
     - parameter sortBy: (query) Query document receipts list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)
     - parameter filter: (query)  (optional)
     - returns: RequestBuilder<AllDocumentResponse> 
     */
    open class func receiptsGetWithRequestBuilder(currentPage: Int, pageSize: Int, authorization: String, sortBy: String? = nil, filter: String? = nil) -> RequestBuilder<AllDocumentResponse> {
        let path = "/receipts"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "currentPage": currentPage.encodeToJSON(), 
            "pageSize": pageSize.encodeToJSON(), 
            "sortBy": sortBy?.encodeToJSON(), 
            "filter": filter?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AllDocumentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Add Attachment to receipt document.
     
     - parameter authorization: (header)  
     - parameter id: (path) documentId หรือ recordId ของเอกสารที่ต้องการแนบ 
     - parameter file: (form) รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsIdAttachmentPost(authorization: String, id: String, file: URL? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AttachmentResponse?,_ error: Error?) -> Void)) {
        receiptsIdAttachmentPostWithRequestBuilder(authorization: authorization, id: id, file: file).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add Attachment to receipt document.
     - POST /receipts/{id}/attachment
     - แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ
     - parameter authorization: (header)  
     - parameter id: (path) documentId หรือ recordId ของเอกสารที่ต้องการแนบ 
     - parameter file: (form) รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)
     - returns: RequestBuilder<AttachmentResponse> 
     */
    open class func receiptsIdAttachmentPostWithRequestBuilder(authorization: String, id: String, file: URL? = nil) -> RequestBuilder<AttachmentResponse> {
        var path = "/receipts/{id}/attachment"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "file": file?.encodeToJSON()
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<AttachmentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Delete receipt document.
     
     - parameter authorization: (header)  
     - parameter id: (path) ID เอกสารใช้ recordId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsIdDelete(authorization: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteResponse?,_ error: Error?) -> Void)) {
        receiptsIdDeleteWithRequestBuilder(authorization: authorization, id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete receipt document.
     - DELETE /receipts/{id}
     - ลบ เอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ <br> ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
     - parameter authorization: (header)  
     - parameter id: (path) ID เอกสารใช้ recordId 
     - returns: RequestBuilder<DeleteResponse> 
     */
    open class func receiptsIdDeleteWithRequestBuilder(authorization: String, id: String) -> RequestBuilder<DeleteResponse> {
        var path = "/receipts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DeleteResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get receipt document.
     
     - parameter authorization: (header)  
     - parameter id: (path) ID เอกสารใช้ recordId 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsIdGet(authorization: String, id: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineDocumentResponse?,_ error: Error?) -> Void)) {
        receiptsIdGetWithRequestBuilder(authorization: authorization, id: id).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get receipt document.
     - GET /receipts/{id}
     - เรียกดูข้อมูลเอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ
     - parameter authorization: (header)  
     - parameter id: (path) ID เอกสารใช้ recordId 
     - returns: RequestBuilder<InlineDocumentResponse> 
     */
    open class func receiptsIdGetWithRequestBuilder(authorization: String, id: String) -> RequestBuilder<InlineDocumentResponse> {
        var path = "/receipts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineDocumentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Change paid status of receipt document.
     
     - parameter authorization: (header)  
     - parameter id: (path) ID เอกสารใช้ recordId หรือ documentId 
     - parameter paymentReceivingDocument: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsIdPaymentPost(authorization: String, id: String, paymentReceivingDocument: PaymentReceivingDocument, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineDocumentResponse?,_ error: Error?) -> Void)) {
        receiptsIdPaymentPostWithRequestBuilder(authorization: authorization, id: id, paymentReceivingDocument: paymentReceivingDocument).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Change paid status of receipt document.
     - POST /receipts/{id}/payment
     - เก็บเงิน เอกสารใบเสร็จรับเงิน (เงินสด) เปลี่ยนสถานะเป็น เก็บเงินแล้ว
     - parameter authorization: (header)  
     - parameter id: (path) ID เอกสารใช้ recordId หรือ documentId 
     - parameter paymentReceivingDocument: (body)  
     - returns: RequestBuilder<InlineDocumentResponse> 
     */
    open class func receiptsIdPaymentPostWithRequestBuilder(authorization: String, id: String, paymentReceivingDocument: PaymentReceivingDocument) -> RequestBuilder<InlineDocumentResponse> {
        var path = "/receipts/{id}/payment"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: paymentReceivingDocument)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineDocumentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Edit receipt document.
     
     - parameter authorization: (header)  
     - parameter id: (path) ID เอกสารใช้ recordId 
     - parameter updateInlineDocument: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsIdPut(authorization: String, id: String, updateInlineDocument: UpdateInlineDocument, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineDocumentResponse?,_ error: Error?) -> Void)) {
        receiptsIdPutWithRequestBuilder(authorization: authorization, id: id, updateInlineDocument: updateInlineDocument).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Edit receipt document.
     - PUT /receipts/{id}
     - แก้ไขข้อมูลเอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการและเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
     - parameter authorization: (header)  
     - parameter id: (path) ID เอกสารใช้ recordId 
     - parameter updateInlineDocument: (body)  
     - returns: RequestBuilder<InlineDocumentResponse> 
     */
    open class func receiptsIdPutWithRequestBuilder(authorization: String, id: String, updateInlineDocument: UpdateInlineDocument) -> RequestBuilder<InlineDocumentResponse> {
        var path = "/receipts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateInlineDocument)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineDocumentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Change status of receipt document.
     
     - parameter authorization: (header)  
     - parameter id: (path) ID เอกสารใช้ recordId 
     - parameter statusId: (path) เปลี่ยนสถานะเอกสารได้ 1 สถานะ &lt;br&gt; void &#x3D; ยกเลิก 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsIdStatusStatusIdPost(authorization: String, id: String, statusId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineDocumentResponse?,_ error: Error?) -> Void)) {
        receiptsIdStatusStatusIdPostWithRequestBuilder(authorization: authorization, id: id, statusId: statusId).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Change status of receipt document.
     - POST /receipts/{id}/status/{statusId}
     - เปลี่ยนสถานะของเอกสารใบเสร็จรับเงิน สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
     - parameter authorization: (header)  
     - parameter id: (path) ID เอกสารใช้ recordId 
     - parameter statusId: (path) เปลี่ยนสถานะเอกสารได้ 1 สถานะ &lt;br&gt; void &#x3D; ยกเลิก 
     - returns: RequestBuilder<InlineDocumentResponse> 
     */
    open class func receiptsIdStatusStatusIdPostWithRequestBuilder(authorization: String, id: String, statusId: String) -> RequestBuilder<InlineDocumentResponse> {
        var path = "/receipts/{id}/status/{statusId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let statusIdPreEscape = "\(APIHelper.mapValueToPathItem(statusId))"
        let statusIdPostEscape = statusIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{statusId}", with: statusIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineDocumentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Create receipt document with discount and tax inline.
     
     - parameter authorization: (header)  
     - parameter inlineDocument: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsInlinePost(authorization: String, inlineDocument: InlineDocument, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineDocumentResponse?,_ error: Error?) -> Void)) {
        receiptsInlinePostWithRequestBuilder(authorization: authorization, inlineDocument: inlineDocument).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create receipt document with discount and tax inline.
     - POST /receipts/inline
     - สร้างเอกสารใบเสร็จรับเงิน แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting) <br> <br> ข้อมูลการออกเอกสารใบเสร็จรับเงิน : https://flowaccount.com/blog/ใบเสร็จรับเงิน
     - parameter authorization: (header)  
     - parameter inlineDocument: (body)  
     - returns: RequestBuilder<InlineDocumentResponse> 
     */
    open class func receiptsInlinePostWithRequestBuilder(authorization: String, inlineDocument: InlineDocument) -> RequestBuilder<InlineDocumentResponse> {
        let path = "/receipts/inline"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineDocument)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineDocumentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create receipt document with discount and tax inline with payment.
     
     - parameter authorization: (header)  
     - parameter inlineDocumentWithPaymentReceiving: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsInlineWithPaymentPost(authorization: String, inlineDocumentWithPaymentReceiving: InlineDocumentWithPaymentReceiving, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: InlineDocumentResponse?,_ error: Error?) -> Void)) {
        receiptsInlineWithPaymentPostWithRequestBuilder(authorization: authorization, inlineDocumentWithPaymentReceiving: inlineDocumentWithPaymentReceiving).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create receipt document with discount and tax inline with payment.
     - POST /receipts/inline/with-payment
     - สร้างเอกสารใบเสร็จรับเงิน แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้าพร้อมเก็บเงิน <br>เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
     - parameter authorization: (header)  
     - parameter inlineDocumentWithPaymentReceiving: (body)  
     - returns: RequestBuilder<InlineDocumentResponse> 
     */
    open class func receiptsInlineWithPaymentPostWithRequestBuilder(authorization: String, inlineDocumentWithPaymentReceiving: InlineDocumentWithPaymentReceiving) -> RequestBuilder<InlineDocumentResponse> {
        let path = "/receipts/inline/with-payment"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inlineDocumentWithPaymentReceiving)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InlineDocumentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create receipt document.
     
     - parameter authorization: (header)  
     - parameter simpleDocument: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsPost(authorization: String, simpleDocument: SimpleDocument, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SimpleDocumentResponse?,_ error: Error?) -> Void)) {
        receiptsPostWithRequestBuilder(authorization: authorization, simpleDocument: simpleDocument).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create receipt document.
     - POST /receipts
     - สร้างเอกสารใบเสร็จรับเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting) <br> <br> ข้อมูลการออกเอกสารใบเสร็จรับเงิน : https://flowaccount.com/blog/ใบเสร็จรับเงิน
     - parameter authorization: (header)  
     - parameter simpleDocument: (body)  
     - returns: RequestBuilder<SimpleDocumentResponse> 
     */
    open class func receiptsPostWithRequestBuilder(authorization: String, simpleDocument: SimpleDocument) -> RequestBuilder<SimpleDocumentResponse> {
        let path = "/receipts"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: simpleDocument)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SimpleDocumentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Share link receipt document.
     
     - parameter authorization: (header)  
     - parameter shareDocument: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsSharedocumentPost(authorization: String, shareDocument: ShareDocument, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ShareDocumentResponse?,_ error: Error?) -> Void)) {
        receiptsSharedocumentPostWithRequestBuilder(authorization: authorization, shareDocument: shareDocument).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Share link receipt document.
     - POST /receipts/sharedocument
     - แชร์ลิงค์ เอกสารใบเสร็จรับเงิน ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
     - parameter authorization: (header)  
     - parameter shareDocument: (body)  
     - returns: RequestBuilder<ShareDocumentResponse> 
     */
    open class func receiptsSharedocumentPostWithRequestBuilder(authorization: String, shareDocument: ShareDocument) -> RequestBuilder<ShareDocumentResponse> {
        let path = "/receipts/sharedocument"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: shareDocument)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ShareDocumentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Create receipt document with payment.
     
     - parameter authorization: (header)  
     - parameter simpleDocumentWithPaymentReceiving: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func receiptsWithPaymentPost(authorization: String, simpleDocumentWithPaymentReceiving: SimpleDocumentWithPaymentReceiving, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SimpleDocumentResponse?,_ error: Error?) -> Void)) {
        receiptsWithPaymentPostWithRequestBuilder(authorization: authorization, simpleDocumentWithPaymentReceiving: simpleDocumentWithPaymentReceiving).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create receipt document with payment.
     - POST /receipts/with-payment
     - สร้างเอกสารใบเสร็จรับเงิน พร้อมเก็บเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
     - parameter authorization: (header)  
     - parameter simpleDocumentWithPaymentReceiving: (body)  
     - returns: RequestBuilder<SimpleDocumentResponse> 
     */
    open class func receiptsWithPaymentPostWithRequestBuilder(authorization: String, simpleDocumentWithPaymentReceiving: SimpleDocumentWithPaymentReceiving) -> RequestBuilder<SimpleDocumentResponse> {
        let path = "/receipts/with-payment"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: simpleDocumentWithPaymentReceiving)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<SimpleDocumentResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
