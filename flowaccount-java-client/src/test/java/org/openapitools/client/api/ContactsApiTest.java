/*
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Contact;
import org.openapitools.client.model.ContactResponse;
import org.openapitools.client.model.DeleteResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactsApi
 */
@Ignore
public class ContactsApiTest {

    private final ContactsApi api = new ContactsApi();

    
    /**
     * Get list all contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contactsGetTest() throws ApiException {
        Integer currentPage = null;
        Integer pageSize = null;
        String authorization = null;
        String sortBy = null;
        String filter = null;
        ContactResponse response = api.contactsGet(currentPage, pageSize, authorization, sortBy, filter);

        // TODO: test validations
    }
    
    /**
     * Delete contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contactsIdDeleteTest() throws ApiException {
        String authorization = null;
        String id = null;
        DeleteResponse response = api.contactsIdDelete(authorization, id);

        // TODO: test validations
    }
    
    /**
     * Get contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contactsIdGetTest() throws ApiException {
        String authorization = null;
        String id = null;
        ContactResponse response = api.contactsIdGet(authorization, id);

        // TODO: test validations
    }
    
    /**
     * Update contacts.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contactsIdPutTest() throws ApiException {
        String authorization = null;
        String id = null;
        Contact contact = null;
        ContactResponse response = api.contactsIdPut(authorization, id, contact);

        // TODO: test validations
    }
    
    /**
     * Create contacts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void contactsPostTest() throws ApiException {
        String authorization = null;
        Contact contact = null;
        ContactResponse response = api.contactsPost(authorization, contact);

        // TODO: test validations
    }
    
}
