/*
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AllExpenseDocumentResponse;
import org.openapitools.client.model.AttachmentResponse;
import org.openapitools.client.model.BusinessCategory;
import org.openapitools.client.model.DeleteResponse;
import org.openapitools.client.model.ExpenseInlineDocument;
import org.openapitools.client.model.ExpenseInlineDocumentResponse;
import org.openapitools.client.model.ExpenseInlineDocumentWithPaymentPaid;
import org.openapitools.client.model.ExpenseSimpleDocument;
import org.openapitools.client.model.ExpenseSimpleDocumentResponse;
import org.openapitools.client.model.ExpenseSimpleDocumentWithPaymentPaid;
import java.io.File;
import org.openapitools.client.model.PaymentPaidDocument;
import org.openapitools.client.model.SendEmail;
import org.openapitools.client.model.SendEmailResponse;
import org.openapitools.client.model.SendEmailSimple;
import org.openapitools.client.model.ShareDocument;
import org.openapitools.client.model.ShareDocumentResponse;
import org.openapitools.client.model.UpdateExpenseDocument;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpensesApi
 */
@Ignore
public class ExpensesApiTest {

    private final ExpensesApi api = new ExpensesApi();

    
    /**
     * Accounting categories expenses document.
     *
     * เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักบัญชี)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesCategoriesAccountingGetTest() throws ApiException {
        String authorization = null;
        BusinessCategory response = api.expensesCategoriesAccountingGet(authorization);

        // TODO: test validations
    }
    
    /**
     * Business categories expenses document.
     *
     * เรียกดูข้อมูลหมวดหมู่เอกสารค่าใช้จ่าย (สำหรับนักธุรกิจ)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesCategoriesBusinessGetTest() throws ApiException {
        String authorization = null;
        BusinessCategory response = api.expensesCategoriesBusinessGet(authorization);

        // TODO: test validations
    }
    
    /**
     * Send email expenses document.
     *
     * ส่งเอกสารค่าใช้จ่าย ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesEmailDocumentPostTest() throws ApiException {
        String authorization = null;
        SendEmailSimple sendEmailSimple = null;
        SendEmailResponse response = api.expensesEmailDocumentPost(authorization, sendEmailSimple);

        // TODO: test validations
    }
    
    /**
     * Get list all expenses documents.
     *
     * เรียกดูข้อมูลเอกสารค่าใช้จ่ายทั้งหมดในระบบ
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesGetTest() throws ApiException {
        Integer currentPage = null;
        Integer pageSize = null;
        String authorization = null;
        String sortBy = null;
        String filter = null;
        AllExpenseDocumentResponse response = api.expensesGet(currentPage, pageSize, authorization, sortBy, filter);

        // TODO: test validations
    }
    
    /**
     * Attachment to expenses document.
     *
     * แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesIdAttachmentPostTest() throws ApiException {
        String authorization = null;
        String id = null;
        File file = null;
        AttachmentResponse response = api.expensesIdAttachmentPost(authorization, id, file);

        // TODO: test validations
    }
    
    /**
     * Delete expenses document.
     *
     * ลบ เอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesIdDeleteTest() throws ApiException {
        String authorization = null;
        String id = null;
        DeleteResponse response = api.expensesIdDelete(authorization, id);

        // TODO: test validations
    }
    
    /**
     * Get expenses document.
     *
     * เรียกดูข้อมูลเอกสารค่าใช้จ่ายตามเลขที่เอกสารที่ต้องการ
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesIdGetTest() throws ApiException {
        String authorization = null;
        String id = null;
        AllExpenseDocumentResponse response = api.expensesIdGet(authorization, id);

        // TODO: test validations
    }
    
    /**
     * Change status is paid expenses document.
     *
     * ชำระเงิน เอกสารค่าใช้จ่ายเปลี่ยน สถานะเป็น ชำระเงินแล้ว
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesIdPaymentPostTest() throws ApiException {
        String authorization = null;
        String id = null;
        PaymentPaidDocument paymentPaidDocument = null;
        ExpenseSimpleDocumentResponse response = api.expensesIdPaymentPost(authorization, id, paymentPaidDocument);

        // TODO: test validations
    }
    
    /**
     * Edit expenses document.
     *
     * แก้ไขข้อมูลเอกสารค่าใช้จ่าย ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesIdPutTest() throws ApiException {
        String authorization = null;
        String id = null;
        UpdateExpenseDocument updateExpenseDocument = null;
        ExpenseInlineDocumentResponse response = api.expensesIdPut(authorization, id, updateExpenseDocument);

        // TODO: test validations
    }
    
    /**
     * Change status expenses document.
     *
     * เปลี่ยนสถานะของเอกสารค่าใช้จ่าย สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesIdStatusStatusIdPostTest() throws ApiException {
        String authorization = null;
        String id = null;
        String statusId = null;
        ExpenseInlineDocumentResponse response = api.expensesIdStatusStatusIdPost(authorization, id, statusId);

        // TODO: test validations
    }
    
    /**
     * Create expenses document inline discount or inline vat.
     *
     * สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesInlinePostTest() throws ApiException {
        String authorization = null;
        ExpenseInlineDocument expenseInlineDocument = null;
        ExpenseInlineDocumentResponse response = api.expensesInlinePost(authorization, expenseInlineDocument);

        // TODO: test validations
    }
    
    /**
     * Create expenses document inline discount or inline vat with payment.
     *
     * สร้างเอกสารค่าใช้จ่าย แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesInlineWithPaymentPostTest() throws ApiException {
        String authorization = null;
        ExpenseInlineDocumentWithPaymentPaid expenseInlineDocumentWithPaymentPaid = null;
        ExpenseInlineDocumentResponse response = api.expensesInlineWithPaymentPost(authorization, expenseInlineDocumentWithPaymentPaid);

        // TODO: test validations
    }
    
    /**
     * Create expenses document.
     *
     * สร้างเอกสารค่าใช้จ่าย เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesPostTest() throws ApiException {
        String authorization = null;
        ExpenseSimpleDocument expenseSimpleDocument = null;
        ExpenseSimpleDocumentResponse response = api.expensesPost(authorization, expenseSimpleDocument);

        // TODO: test validations
    }
    
    /**
     * Share link expenses document.
     *
     * แชร์ลิงค์ เอกสารค่าใช้จ่าย ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesSharedocumentPostTest() throws ApiException {
        String authorization = null;
        ShareDocument shareDocument = null;
        ShareDocumentResponse response = api.expensesSharedocumentPost(authorization, shareDocument);

        // TODO: test validations
    }
    
    /**
     * Create expenses document with payment.
     *
     * สร้างเอกสารค่าใช้จ่าย พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void expensesWithPaymentPostTest() throws ApiException {
        String authorization = null;
        ExpenseSimpleDocumentWithPaymentPaid expenseSimpleDocumentWithPaymentPaid = null;
        ExpenseSimpleDocumentResponse response = api.expensesWithPaymentPost(authorization, expenseSimpleDocumentWithPaymentPaid);

        // TODO: test validations
    }
    
}
