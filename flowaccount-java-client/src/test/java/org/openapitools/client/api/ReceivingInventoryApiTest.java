/*
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AllDocumentResponse;
import org.openapitools.client.model.AttachmentResponse;
import org.openapitools.client.model.DeleteResponse;
import java.io.File;
import org.openapitools.client.model.InlineDocument;
import org.openapitools.client.model.InlineDocumentResponse;
import org.openapitools.client.model.InlineDocumentWithPaymentPaid;
import org.openapitools.client.model.PaymentPaidDocument;
import org.openapitools.client.model.SendEmailCoppies;
import org.openapitools.client.model.SendEmailResponse;
import org.openapitools.client.model.ShareDocument;
import org.openapitools.client.model.ShareDocumentResponse;
import org.openapitools.client.model.SimpleDocument;
import org.openapitools.client.model.SimpleDocumentResponse;
import org.openapitools.client.model.SimpleDocumentWithPaymentPaid;
import org.openapitools.client.model.UpdateInlineDocument;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReceivingInventoryApi
 */
@Ignore
public class ReceivingInventoryApiTest {

    private final ReceivingInventoryApi api = new ReceivingInventoryApi();

    
    /**
     * Send email receiving inventory document.
     *
     * ส่งเอกสารใบรับสินค้า ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesEmailDocumentPostTest() throws ApiException {
        String authorization = null;
        SendEmailCoppies sendEmailCoppies = null;
        SendEmailResponse response = api.purchasesEmailDocumentPost(authorization, sendEmailCoppies);

        // TODO: test validations
    }
    
    /**
     * Get all receiving inventory documents.
     *
     * เรียกดูข้อมูลเอกสารใบรับสินค้าทั้งหมดในระบบ
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesGetTest() throws ApiException {
        Integer currentPage = null;
        Integer pageSize = null;
        String authorization = null;
        String sortBy = null;
        String filter = null;
        AllDocumentResponse response = api.purchasesGet(currentPage, pageSize, authorization, sortBy, filter);

        // TODO: test validations
    }
    
    /**
     * Attachment receiving inventory document.
     *
     * แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบรับสินค้าตามเลขที่เอกสารที่ต้องการ
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesIdAttachmentPostTest() throws ApiException {
        String authorization = null;
        String id = null;
        File file = null;
        AttachmentResponse response = api.purchasesIdAttachmentPost(authorization, id, file);

        // TODO: test validations
    }
    
    /**
     * Delete receiving inventory document.
     *
     * ลบ เอกสารใบรับสินค้า ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesIdDeleteTest() throws ApiException {
        String authorization = null;
        String id = null;
        DeleteResponse response = api.purchasesIdDelete(authorization, id);

        // TODO: test validations
    }
    
    /**
     * Get receiving inventory document.
     *
     * เรียกดูข้อมูลเอกสารใบรับสินค้าตามเลขที่เอกสารที่ต้องการ
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesIdGetTest() throws ApiException {
        String authorization = null;
        String id = null;
        InlineDocumentResponse response = api.purchasesIdGet(authorization, id);

        // TODO: test validations
    }
    
    /**
     * Change status is paid receiving inventory document.
     *
     * ขำระเงิน เอกสารใบรับสินค้าเปลี่ยนสถานะเป็น ชำระเงินแล้ว
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesIdPaymentPostTest() throws ApiException {
        String authorization = null;
        String id = null;
        PaymentPaidDocument paymentPaidDocument = null;
        InlineDocumentResponse response = api.purchasesIdPaymentPost(authorization, id, paymentPaidDocument);

        // TODO: test validations
    }
    
    /**
     * Edit receiving inventory document.
     *
     * แก้ไขข้อมูลเอกสารใบรับสินค้า ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รออนุมัติ (Awaiting)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesIdPutTest() throws ApiException {
        String authorization = null;
        String id = null;
        UpdateInlineDocument updateInlineDocument = null;
        InlineDocumentResponse response = api.purchasesIdPut(authorization, id, updateInlineDocument);

        // TODO: test validations
    }
    
    /**
     * Change status receiving inventory document.
     *
     * เปลี่ยนสถานะของเอกสารใบรับสินค้า สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesIdStatusStatusIdPostTest() throws ApiException {
        String authorization = null;
        String id = null;
        String statusId = null;
        InlineDocumentResponse response = api.purchasesIdStatusStatusIdPost(authorization, id, statusId);

        // TODO: test validations
    }
    
    /**
     * Create receiving inventory document inline discount or inline vat.
     *
     * สร้างเอกสารใบรับสินค้า แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesInlinePostTest() throws ApiException {
        String authorization = null;
        InlineDocument inlineDocument = null;
        InlineDocumentResponse response = api.purchasesInlinePost(authorization, inlineDocument);

        // TODO: test validations
    }
    
    /**
     * Create receiving inventory document inline discount or inline vat with payment.
     *
     * สร้างเอกสารใบรับสินค้า แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesInlineWithPaymentPostTest() throws ApiException {
        String authorization = null;
        InlineDocumentWithPaymentPaid inlineDocumentWithPaymentPaid = null;
        InlineDocumentResponse response = api.purchasesInlineWithPaymentPost(authorization, inlineDocumentWithPaymentPaid);

        // TODO: test validations
    }
    
    /**
     * Create receiving inventory document.
     *
     * สร้างเอกสารใบรับสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesPostTest() throws ApiException {
        String authorization = null;
        SimpleDocument simpleDocument = null;
        SimpleDocumentResponse response = api.purchasesPost(authorization, simpleDocument);

        // TODO: test validations
    }
    
    /**
     * Share link receiving inventory document.
     *
     * แชร์ลิงค์ เอกสารใบรับสินค้าที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesSharedocumentPostTest() throws ApiException {
        String authorization = null;
        ShareDocument shareDocument = null;
        ShareDocumentResponse response = api.purchasesSharedocumentPost(authorization, shareDocument);

        // TODO: test validations
    }
    
    /**
     * Create receiving inventory document with payment.
     *
     * สร้างเอกสารใบรับสินค้า พร้อมชำระเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ ชำระเงินแล้ว (paid)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void purchasesWithPaymentPostTest() throws ApiException {
        String authorization = null;
        SimpleDocumentWithPaymentPaid simpleDocumentWithPaymentPaid = null;
        SimpleDocumentResponse response = api.purchasesWithPaymentPost(authorization, simpleDocumentWithPaymentPaid);

        // TODO: test validations
    }
    
}
