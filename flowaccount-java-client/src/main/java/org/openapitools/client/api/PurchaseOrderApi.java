/*
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AllDocumentResponse;
import org.openapitools.client.model.AttachmentResponse;
import org.openapitools.client.model.DeleteResponse;
import java.io.File;
import org.openapitools.client.model.InlineDocument;
import org.openapitools.client.model.InlineDocumentResponse;
import org.openapitools.client.model.SendEmailCoppies;
import org.openapitools.client.model.SendEmailResponse;
import org.openapitools.client.model.ShareDocument;
import org.openapitools.client.model.ShareDocumentResponse;
import org.openapitools.client.model.SimpleDocument;
import org.openapitools.client.model.SimpleDocumentResponse;
import org.openapitools.client.model.UpdateInlineDocument;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PurchaseOrderApi {
    private ApiClient localVarApiClient;

    public PurchaseOrderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PurchaseOrderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for purchasesOrdersEmailDocumentPost
     * @param authorization  (required)
     * @param sendEmailCoppies  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersEmailDocumentPostCall(String authorization, SendEmailCoppies sendEmailCoppies, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendEmailCoppies;

        // create path and map variables
        String localVarPath = "/purchases-orders/email-document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchasesOrdersEmailDocumentPostValidateBeforeCall(String authorization, SendEmailCoppies sendEmailCoppies, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling purchasesOrdersEmailDocumentPost(Async)");
        }
        
        // verify the required parameter 'sendEmailCoppies' is set
        if (sendEmailCoppies == null) {
            throw new ApiException("Missing the required parameter 'sendEmailCoppies' when calling purchasesOrdersEmailDocumentPost(Async)");
        }
        

        okhttp3.Call localVarCall = purchasesOrdersEmailDocumentPostCall(authorization, sendEmailCoppies, _callback);
        return localVarCall;

    }

    /**
     * Send email purchase order document.
     * ส่งเอกสารใบสั่งซื้อ ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param sendEmailCoppies  (required)
     * @return SendEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public SendEmailResponse purchasesOrdersEmailDocumentPost(String authorization, SendEmailCoppies sendEmailCoppies) throws ApiException {
        ApiResponse<SendEmailResponse> localVarResp = purchasesOrdersEmailDocumentPostWithHttpInfo(authorization, sendEmailCoppies);
        return localVarResp.getData();
    }

    /**
     * Send email purchase order document.
     * ส่งเอกสารใบสั่งซื้อ ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param sendEmailCoppies  (required)
     * @return ApiResponse&lt;SendEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendEmailResponse> purchasesOrdersEmailDocumentPostWithHttpInfo(String authorization, SendEmailCoppies sendEmailCoppies) throws ApiException {
        okhttp3.Call localVarCall = purchasesOrdersEmailDocumentPostValidateBeforeCall(authorization, sendEmailCoppies, null);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send email purchase order document. (asynchronously)
     * ส่งเอกสารใบสั่งซื้อ ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param sendEmailCoppies  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersEmailDocumentPostAsync(String authorization, SendEmailCoppies sendEmailCoppies, final ApiCallback<SendEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchasesOrdersEmailDocumentPostValidateBeforeCall(authorization, sendEmailCoppies, _callback);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchasesOrdersGet
     * @param currentPage Query current page document purchase orders. &lt;br&gt;Example Pattern: &lt;ex&gt;/purchases-orders?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/purchases-orders?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt; (required)
     * @param pageSize Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?pageSize&#x3D;20 &lt;/ex&gt; (required)
     * @param authorization  (required)
     * @param sortBy Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)
     * @param filter Query filter purchases-orders. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?filter&#x3D;[{&#39;columnName&#39;:&#39;Contact.NameLocal&#39;,&#39;columnValue&#39;:&#39;Contact Name&#39;,&#39;columnPredicateOperator&#39;:&#39;And&#39;}] &lt;/ex&gt; (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersGetCall(Integer currentPage, Integer pageSize, String authorization, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/purchases-orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchasesOrdersGetValidateBeforeCall(Integer currentPage, Integer pageSize, String authorization, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currentPage' is set
        if (currentPage == null) {
            throw new ApiException("Missing the required parameter 'currentPage' when calling purchasesOrdersGet(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling purchasesOrdersGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling purchasesOrdersGet(Async)");
        }
        

        okhttp3.Call localVarCall = purchasesOrdersGetCall(currentPage, pageSize, authorization, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Get all purchase order documents.
     * เรียกดูข้อมูลเอกสารใบสั่งซื้อทั้งหมดในระบบ
     * @param currentPage Query current page document purchase orders. &lt;br&gt;Example Pattern: &lt;ex&gt;/purchases-orders?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/purchases-orders?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt; (required)
     * @param pageSize Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?pageSize&#x3D;20 &lt;/ex&gt; (required)
     * @param authorization  (required)
     * @param sortBy Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)
     * @param filter Query filter purchases-orders. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?filter&#x3D;[{&#39;columnName&#39;:&#39;Contact.NameLocal&#39;,&#39;columnValue&#39;:&#39;Contact Name&#39;,&#39;columnPredicateOperator&#39;:&#39;And&#39;}] &lt;/ex&gt; (optional)
     * @return AllDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public AllDocumentResponse purchasesOrdersGet(Integer currentPage, Integer pageSize, String authorization, String sortBy, String filter) throws ApiException {
        ApiResponse<AllDocumentResponse> localVarResp = purchasesOrdersGetWithHttpInfo(currentPage, pageSize, authorization, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Get all purchase order documents.
     * เรียกดูข้อมูลเอกสารใบสั่งซื้อทั้งหมดในระบบ
     * @param currentPage Query current page document purchase orders. &lt;br&gt;Example Pattern: &lt;ex&gt;/purchases-orders?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/purchases-orders?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt; (required)
     * @param pageSize Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?pageSize&#x3D;20 &lt;/ex&gt; (required)
     * @param authorization  (required)
     * @param sortBy Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)
     * @param filter Query filter purchases-orders. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?filter&#x3D;[{&#39;columnName&#39;:&#39;Contact.NameLocal&#39;,&#39;columnValue&#39;:&#39;Contact Name&#39;,&#39;columnPredicateOperator&#39;:&#39;And&#39;}] &lt;/ex&gt; (optional)
     * @return ApiResponse&lt;AllDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllDocumentResponse> purchasesOrdersGetWithHttpInfo(Integer currentPage, Integer pageSize, String authorization, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = purchasesOrdersGetValidateBeforeCall(currentPage, pageSize, authorization, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<AllDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all purchase order documents. (asynchronously)
     * เรียกดูข้อมูลเอกสารใบสั่งซื้อทั้งหมดในระบบ
     * @param currentPage Query current page document purchase orders. &lt;br&gt;Example Pattern: &lt;ex&gt;/purchases-orders?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/purchases-orders?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt; (required)
     * @param pageSize Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?pageSize&#x3D;20 &lt;/ex&gt; (required)
     * @param authorization  (required)
     * @param sortBy Query document purchase orders list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/purchases-orders?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)
     * @param filter Query filter purchases-orders. &lt;br&gt;Example Pattern: &lt;ex&gt; /purchases-orders?filter&#x3D;[{&#39;columnName&#39;:&#39;Contact.NameLocal&#39;,&#39;columnValue&#39;:&#39;Contact Name&#39;,&#39;columnPredicateOperator&#39;:&#39;And&#39;}] &lt;/ex&gt; (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersGetAsync(Integer currentPage, Integer pageSize, String authorization, String sortBy, String filter, final ApiCallback<AllDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchasesOrdersGetValidateBeforeCall(currentPage, pageSize, authorization, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<AllDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchasesOrdersIdAttachmentPost
     * @param authorization  (required)
     * @param id documentId หรือ recordId ของเอกสารที่ต้องการแนบ (required)
     * @param file รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersIdAttachmentPostCall(String authorization, String id, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/purchases-orders/{id}/attachment"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchasesOrdersIdAttachmentPostValidateBeforeCall(String authorization, String id, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling purchasesOrdersIdAttachmentPost(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling purchasesOrdersIdAttachmentPost(Async)");
        }
        

        okhttp3.Call localVarCall = purchasesOrdersIdAttachmentPostCall(authorization, id, file, _callback);
        return localVarCall;

    }

    /**
     * Attachment purchase order document.
     * แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param id documentId หรือ recordId ของเอกสารที่ต้องการแนบ (required)
     * @param file รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)
     * @return AttachmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public AttachmentResponse purchasesOrdersIdAttachmentPost(String authorization, String id, File file) throws ApiException {
        ApiResponse<AttachmentResponse> localVarResp = purchasesOrdersIdAttachmentPostWithHttpInfo(authorization, id, file);
        return localVarResp.getData();
    }

    /**
     * Attachment purchase order document.
     * แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param id documentId หรือ recordId ของเอกสารที่ต้องการแนบ (required)
     * @param file รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)
     * @return ApiResponse&lt;AttachmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachmentResponse> purchasesOrdersIdAttachmentPostWithHttpInfo(String authorization, String id, File file) throws ApiException {
        okhttp3.Call localVarCall = purchasesOrdersIdAttachmentPostValidateBeforeCall(authorization, id, file, null);
        Type localVarReturnType = new TypeToken<AttachmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Attachment purchase order document. (asynchronously)
     * แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param id documentId หรือ recordId ของเอกสารที่ต้องการแนบ (required)
     * @param file รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersIdAttachmentPostAsync(String authorization, String id, File file, final ApiCallback<AttachmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchasesOrdersIdAttachmentPostValidateBeforeCall(authorization, id, file, _callback);
        Type localVarReturnType = new TypeToken<AttachmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchasesOrdersIdDelete
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersIdDeleteCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/purchases-orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchasesOrdersIdDeleteValidateBeforeCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling purchasesOrdersIdDelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling purchasesOrdersIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = purchasesOrdersIdDeleteCall(authorization, id, _callback);
        return localVarCall;

    }

    /**
     * Delete purchase order document.
     * ลบ เอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @return DeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteResponse purchasesOrdersIdDelete(String authorization, String id) throws ApiException {
        ApiResponse<DeleteResponse> localVarResp = purchasesOrdersIdDeleteWithHttpInfo(authorization, id);
        return localVarResp.getData();
    }

    /**
     * Delete purchase order document.
     * ลบ เอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @return ApiResponse&lt;DeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteResponse> purchasesOrdersIdDeleteWithHttpInfo(String authorization, String id) throws ApiException {
        okhttp3.Call localVarCall = purchasesOrdersIdDeleteValidateBeforeCall(authorization, id, null);
        Type localVarReturnType = new TypeToken<DeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete purchase order document. (asynchronously)
     * ลบ เอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รออนุมัติ 
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersIdDeleteAsync(String authorization, String id, final ApiCallback<DeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchasesOrdersIdDeleteValidateBeforeCall(authorization, id, _callback);
        Type localVarReturnType = new TypeToken<DeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchasesOrdersIdGet
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersIdGetCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/purchases-orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchasesOrdersIdGetValidateBeforeCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling purchasesOrdersIdGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling purchasesOrdersIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = purchasesOrdersIdGetCall(authorization, id, _callback);
        return localVarCall;

    }

    /**
     * Get purchase order document.
     * เรียกดูข้อมูลเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @return InlineDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public InlineDocumentResponse purchasesOrdersIdGet(String authorization, String id) throws ApiException {
        ApiResponse<InlineDocumentResponse> localVarResp = purchasesOrdersIdGetWithHttpInfo(authorization, id);
        return localVarResp.getData();
    }

    /**
     * Get purchase order document.
     * เรียกดูข้อมูลเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @return ApiResponse&lt;InlineDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineDocumentResponse> purchasesOrdersIdGetWithHttpInfo(String authorization, String id) throws ApiException {
        okhttp3.Call localVarCall = purchasesOrdersIdGetValidateBeforeCall(authorization, id, null);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get purchase order document. (asynchronously)
     * เรียกดูข้อมูลเอกสารใบสั่งซื้อตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersIdGetAsync(String authorization, String id, final ApiCallback<InlineDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchasesOrdersIdGetValidateBeforeCall(authorization, id, _callback);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchasesOrdersIdPut
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param updateInlineDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersIdPutCall(String authorization, String id, UpdateInlineDocument updateInlineDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateInlineDocument;

        // create path and map variables
        String localVarPath = "/purchases-orders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchasesOrdersIdPutValidateBeforeCall(String authorization, String id, UpdateInlineDocument updateInlineDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling purchasesOrdersIdPut(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling purchasesOrdersIdPut(Async)");
        }
        
        // verify the required parameter 'updateInlineDocument' is set
        if (updateInlineDocument == null) {
            throw new ApiException("Missing the required parameter 'updateInlineDocument' when calling purchasesOrdersIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = purchasesOrdersIdPutCall(authorization, id, updateInlineDocument, _callback);
        return localVarCall;

    }

    /**
     * Edit purchase order document.
     * แก้ไขข้อมูลเอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รออนุมัติ (Awaiting)
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param updateInlineDocument  (required)
     * @return InlineDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public InlineDocumentResponse purchasesOrdersIdPut(String authorization, String id, UpdateInlineDocument updateInlineDocument) throws ApiException {
        ApiResponse<InlineDocumentResponse> localVarResp = purchasesOrdersIdPutWithHttpInfo(authorization, id, updateInlineDocument);
        return localVarResp.getData();
    }

    /**
     * Edit purchase order document.
     * แก้ไขข้อมูลเอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รออนุมัติ (Awaiting)
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param updateInlineDocument  (required)
     * @return ApiResponse&lt;InlineDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineDocumentResponse> purchasesOrdersIdPutWithHttpInfo(String authorization, String id, UpdateInlineDocument updateInlineDocument) throws ApiException {
        okhttp3.Call localVarCall = purchasesOrdersIdPutValidateBeforeCall(authorization, id, updateInlineDocument, null);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit purchase order document. (asynchronously)
     * แก้ไขข้อมูลเอกสารใบสั่งซื้อ ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รออนุมัติ (Awaiting)
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param updateInlineDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersIdPutAsync(String authorization, String id, UpdateInlineDocument updateInlineDocument, final ApiCallback<InlineDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchasesOrdersIdPutValidateBeforeCall(authorization, id, updateInlineDocument, _callback);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchasesOrdersIdStatusStatusIdPost
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param statusId เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; void &#x3D; ยกเลิก (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersIdStatusStatusIdPostCall(String authorization, String id, String statusId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/purchases-orders/{id}/status/{statusId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "statusId" + "\\}", localVarApiClient.escapeString(statusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchasesOrdersIdStatusStatusIdPostValidateBeforeCall(String authorization, String id, String statusId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling purchasesOrdersIdStatusStatusIdPost(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling purchasesOrdersIdStatusStatusIdPost(Async)");
        }
        
        // verify the required parameter 'statusId' is set
        if (statusId == null) {
            throw new ApiException("Missing the required parameter 'statusId' when calling purchasesOrdersIdStatusStatusIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = purchasesOrdersIdStatusStatusIdPostCall(authorization, id, statusId, _callback);
        return localVarCall;

    }

    /**
     * Change status purchase order document.
     * เปลี่ยนสถานะของเอกสารใบสั่งซื้อ สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param statusId เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; void &#x3D; ยกเลิก (required)
     * @return InlineDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public InlineDocumentResponse purchasesOrdersIdStatusStatusIdPost(String authorization, String id, String statusId) throws ApiException {
        ApiResponse<InlineDocumentResponse> localVarResp = purchasesOrdersIdStatusStatusIdPostWithHttpInfo(authorization, id, statusId);
        return localVarResp.getData();
    }

    /**
     * Change status purchase order document.
     * เปลี่ยนสถานะของเอกสารใบสั่งซื้อ สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param statusId เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; void &#x3D; ยกเลิก (required)
     * @return ApiResponse&lt;InlineDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineDocumentResponse> purchasesOrdersIdStatusStatusIdPostWithHttpInfo(String authorization, String id, String statusId) throws ApiException {
        okhttp3.Call localVarCall = purchasesOrdersIdStatusStatusIdPostValidateBeforeCall(authorization, id, statusId, null);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change status purchase order document. (asynchronously)
     * เปลี่ยนสถานะของเอกสารใบสั่งซื้อ สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รออนุมัติ (awaiting)
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param statusId เปลี่ยนสถานะเอกสารได้ 4 สถานะ &lt;br&gt; awaiting &#x3D; รออนุมัติ &lt;br&gt; approved &#x3D; อนุมัติ &lt;br&gt; approvedandprocessed &#x3D; ดำเนินการแล้ว &lt;br&gt; void &#x3D; ยกเลิก (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersIdStatusStatusIdPostAsync(String authorization, String id, String statusId, final ApiCallback<InlineDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchasesOrdersIdStatusStatusIdPostValidateBeforeCall(authorization, id, statusId, _callback);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchasesOrdersInlinePost
     * @param authorization  (required)
     * @param inlineDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersInlinePostCall(String authorization, InlineDocument inlineDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineDocument;

        // create path and map variables
        String localVarPath = "/purchases-orders/inline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchasesOrdersInlinePostValidateBeforeCall(String authorization, InlineDocument inlineDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling purchasesOrdersInlinePost(Async)");
        }
        
        // verify the required parameter 'inlineDocument' is set
        if (inlineDocument == null) {
            throw new ApiException("Missing the required parameter 'inlineDocument' when calling purchasesOrdersInlinePost(Async)");
        }
        

        okhttp3.Call localVarCall = purchasesOrdersInlinePostCall(authorization, inlineDocument, _callback);
        return localVarCall;

    }

    /**
     * Create purchase order document inline discount or inline vat.
     * สร้างเอกสารใบสั่งซื้อ แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
     * @param authorization  (required)
     * @param inlineDocument  (required)
     * @return InlineDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public InlineDocumentResponse purchasesOrdersInlinePost(String authorization, InlineDocument inlineDocument) throws ApiException {
        ApiResponse<InlineDocumentResponse> localVarResp = purchasesOrdersInlinePostWithHttpInfo(authorization, inlineDocument);
        return localVarResp.getData();
    }

    /**
     * Create purchase order document inline discount or inline vat.
     * สร้างเอกสารใบสั่งซื้อ แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
     * @param authorization  (required)
     * @param inlineDocument  (required)
     * @return ApiResponse&lt;InlineDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineDocumentResponse> purchasesOrdersInlinePostWithHttpInfo(String authorization, InlineDocument inlineDocument) throws ApiException {
        okhttp3.Call localVarCall = purchasesOrdersInlinePostValidateBeforeCall(authorization, inlineDocument, null);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create purchase order document inline discount or inline vat. (asynchronously)
     * สร้างเอกสารใบสั่งซื้อ แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
     * @param authorization  (required)
     * @param inlineDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersInlinePostAsync(String authorization, InlineDocument inlineDocument, final ApiCallback<InlineDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchasesOrdersInlinePostValidateBeforeCall(authorization, inlineDocument, _callback);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchasesOrdersPost
     * @param authorization  (required)
     * @param simpleDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersPostCall(String authorization, SimpleDocument simpleDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = simpleDocument;

        // create path and map variables
        String localVarPath = "/purchases-orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchasesOrdersPostValidateBeforeCall(String authorization, SimpleDocument simpleDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling purchasesOrdersPost(Async)");
        }
        
        // verify the required parameter 'simpleDocument' is set
        if (simpleDocument == null) {
            throw new ApiException("Missing the required parameter 'simpleDocument' when calling purchasesOrdersPost(Async)");
        }
        

        okhttp3.Call localVarCall = purchasesOrdersPostCall(authorization, simpleDocument, _callback);
        return localVarCall;

    }

    /**
     * Create purchase order document.
     * สร้างเอกสารใบสั่งซื้อ เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
     * @param authorization  (required)
     * @param simpleDocument  (required)
     * @return SimpleDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public SimpleDocumentResponse purchasesOrdersPost(String authorization, SimpleDocument simpleDocument) throws ApiException {
        ApiResponse<SimpleDocumentResponse> localVarResp = purchasesOrdersPostWithHttpInfo(authorization, simpleDocument);
        return localVarResp.getData();
    }

    /**
     * Create purchase order document.
     * สร้างเอกสารใบสั่งซื้อ เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
     * @param authorization  (required)
     * @param simpleDocument  (required)
     * @return ApiResponse&lt;SimpleDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimpleDocumentResponse> purchasesOrdersPostWithHttpInfo(String authorization, SimpleDocument simpleDocument) throws ApiException {
        okhttp3.Call localVarCall = purchasesOrdersPostValidateBeforeCall(authorization, simpleDocument, null);
        Type localVarReturnType = new TypeToken<SimpleDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create purchase order document. (asynchronously)
     * สร้างเอกสารใบสั่งซื้อ เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รออนุมัติ (awaiting) &lt;br&gt;
     * @param authorization  (required)
     * @param simpleDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersPostAsync(String authorization, SimpleDocument simpleDocument, final ApiCallback<SimpleDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchasesOrdersPostValidateBeforeCall(authorization, simpleDocument, _callback);
        Type localVarReturnType = new TypeToken<SimpleDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for purchasesOrdersSharedocumentPost
     * @param authorization  (required)
     * @param shareDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersSharedocumentPostCall(String authorization, ShareDocument shareDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shareDocument;

        // create path and map variables
        String localVarPath = "/purchases-orders/sharedocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchasesOrdersSharedocumentPostValidateBeforeCall(String authorization, ShareDocument shareDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling purchasesOrdersSharedocumentPost(Async)");
        }
        
        // verify the required parameter 'shareDocument' is set
        if (shareDocument == null) {
            throw new ApiException("Missing the required parameter 'shareDocument' when calling purchasesOrdersSharedocumentPost(Async)");
        }
        

        okhttp3.Call localVarCall = purchasesOrdersSharedocumentPostCall(authorization, shareDocument, _callback);
        return localVarCall;

    }

    /**
     * Share link purchase order document.
     * แชร์ลิงค์ เอกสารใบสั่งซื้อที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
     * @param authorization  (required)
     * @param shareDocument  (required)
     * @return ShareDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ShareDocumentResponse purchasesOrdersSharedocumentPost(String authorization, ShareDocument shareDocument) throws ApiException {
        ApiResponse<ShareDocumentResponse> localVarResp = purchasesOrdersSharedocumentPostWithHttpInfo(authorization, shareDocument);
        return localVarResp.getData();
    }

    /**
     * Share link purchase order document.
     * แชร์ลิงค์ เอกสารใบสั่งซื้อที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
     * @param authorization  (required)
     * @param shareDocument  (required)
     * @return ApiResponse&lt;ShareDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareDocumentResponse> purchasesOrdersSharedocumentPostWithHttpInfo(String authorization, ShareDocument shareDocument) throws ApiException {
        okhttp3.Call localVarCall = purchasesOrdersSharedocumentPostValidateBeforeCall(authorization, shareDocument, null);
        Type localVarReturnType = new TypeToken<ShareDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Share link purchase order document. (asynchronously)
     * แชร์ลิงค์ เอกสารใบสั่งซื้อที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
     * @param authorization  (required)
     * @param shareDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call purchasesOrdersSharedocumentPostAsync(String authorization, ShareDocument shareDocument, final ApiCallback<ShareDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchasesOrdersSharedocumentPostValidateBeforeCall(authorization, shareDocument, _callback);
        Type localVarReturnType = new TypeToken<ShareDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
