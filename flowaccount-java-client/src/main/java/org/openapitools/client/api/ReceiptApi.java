/*
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AllDocumentResponse;
import org.openapitools.client.model.AttachmentResponse;
import org.openapitools.client.model.DeleteResponse;
import java.io.File;
import org.openapitools.client.model.InlineDocument;
import org.openapitools.client.model.InlineDocumentResponse;
import org.openapitools.client.model.InlineDocumentWithPaymentReceiving;
import org.openapitools.client.model.PaymentReceivingDocument;
import org.openapitools.client.model.SendEmailCoppies;
import org.openapitools.client.model.SendEmailResponse;
import org.openapitools.client.model.ShareDocument;
import org.openapitools.client.model.ShareDocumentResponse;
import org.openapitools.client.model.SimpleDocument;
import org.openapitools.client.model.SimpleDocumentResponse;
import org.openapitools.client.model.SimpleDocumentWithPaymentReceiving;
import org.openapitools.client.model.UpdateInlineDocument;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReceiptApi {
    private ApiClient localVarApiClient;

    public ReceiptApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReceiptApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for receiptsEmailDocumentPost
     * @param authorization  (required)
     * @param sendEmailCoppies  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsEmailDocumentPostCall(String authorization, SendEmailCoppies sendEmailCoppies, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sendEmailCoppies;

        // create path and map variables
        String localVarPath = "/receipts/email-document";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsEmailDocumentPostValidateBeforeCall(String authorization, SendEmailCoppies sendEmailCoppies, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsEmailDocumentPost(Async)");
        }
        
        // verify the required parameter 'sendEmailCoppies' is set
        if (sendEmailCoppies == null) {
            throw new ApiException("Missing the required parameter 'sendEmailCoppies' when calling receiptsEmailDocumentPost(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsEmailDocumentPostCall(authorization, sendEmailCoppies, _callback);
        return localVarCall;

    }

    /**
     * Send email receipt document.
     * ส่งเอกสารใบเสร็จรับเงิน ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param sendEmailCoppies  (required)
     * @return SendEmailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public SendEmailResponse receiptsEmailDocumentPost(String authorization, SendEmailCoppies sendEmailCoppies) throws ApiException {
        ApiResponse<SendEmailResponse> localVarResp = receiptsEmailDocumentPostWithHttpInfo(authorization, sendEmailCoppies);
        return localVarResp.getData();
    }

    /**
     * Send email receipt document.
     * ส่งเอกสารใบเสร็จรับเงิน ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param sendEmailCoppies  (required)
     * @return ApiResponse&lt;SendEmailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendEmailResponse> receiptsEmailDocumentPostWithHttpInfo(String authorization, SendEmailCoppies sendEmailCoppies) throws ApiException {
        okhttp3.Call localVarCall = receiptsEmailDocumentPostValidateBeforeCall(authorization, sendEmailCoppies, null);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send email receipt document. (asynchronously)
     * ส่งเอกสารใบเสร็จรับเงิน ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param sendEmailCoppies  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsEmailDocumentPostAsync(String authorization, SendEmailCoppies sendEmailCoppies, final ApiCallback<SendEmailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsEmailDocumentPostValidateBeforeCall(authorization, sendEmailCoppies, _callback);
        Type localVarReturnType = new TypeToken<SendEmailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiptsGet
     * @param currentPage Query current page document receipts. &lt;br&gt;Example Pattern: &lt;ex&gt;/receipts?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/receipts?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt; (required)
     * @param pageSize Query document receipts list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /receipts?pageSize&#x3D;20 &lt;/ex&gt; (required)
     * @param authorization  (required)
     * @param sortBy Query document receipts list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsGetCall(Integer currentPage, Integer pageSize, String authorization, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/receipts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (currentPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentPage", currentPage));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsGetValidateBeforeCall(Integer currentPage, Integer pageSize, String authorization, String sortBy, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'currentPage' is set
        if (currentPage == null) {
            throw new ApiException("Missing the required parameter 'currentPage' when calling receiptsGet(Async)");
        }
        
        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling receiptsGet(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsGet(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsGetCall(currentPage, pageSize, authorization, sortBy, filter, _callback);
        return localVarCall;

    }

    /**
     * Get list all receipt documents
     * เรียกดูข้อมูลเอกสารใบเสร็จรับเงิน ทั้งหมดในระบบ
     * @param currentPage Query current page document receipts. &lt;br&gt;Example Pattern: &lt;ex&gt;/receipts?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/receipts?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt; (required)
     * @param pageSize Query document receipts list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /receipts?pageSize&#x3D;20 &lt;/ex&gt; (required)
     * @param authorization  (required)
     * @param sortBy Query document receipts list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)
     * @param filter  (optional)
     * @return AllDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public AllDocumentResponse receiptsGet(Integer currentPage, Integer pageSize, String authorization, String sortBy, String filter) throws ApiException {
        ApiResponse<AllDocumentResponse> localVarResp = receiptsGetWithHttpInfo(currentPage, pageSize, authorization, sortBy, filter);
        return localVarResp.getData();
    }

    /**
     * Get list all receipt documents
     * เรียกดูข้อมูลเอกสารใบเสร็จรับเงิน ทั้งหมดในระบบ
     * @param currentPage Query current page document receipts. &lt;br&gt;Example Pattern: &lt;ex&gt;/receipts?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/receipts?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt; (required)
     * @param pageSize Query document receipts list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /receipts?pageSize&#x3D;20 &lt;/ex&gt; (required)
     * @param authorization  (required)
     * @param sortBy Query document receipts list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;AllDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AllDocumentResponse> receiptsGetWithHttpInfo(Integer currentPage, Integer pageSize, String authorization, String sortBy, String filter) throws ApiException {
        okhttp3.Call localVarCall = receiptsGetValidateBeforeCall(currentPage, pageSize, authorization, sortBy, filter, null);
        Type localVarReturnType = new TypeToken<AllDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get list all receipt documents (asynchronously)
     * เรียกดูข้อมูลเอกสารใบเสร็จรับเงิน ทั้งหมดในระบบ
     * @param currentPage Query current page document receipts. &lt;br&gt;Example Pattern: &lt;ex&gt;/receipts?currentPage&#x3D;1 &lt;/ex&gt;&lt;ex&gt;/receipts?currentPage&#x3D;1&amp;pageSize&#x3D;20&lt;/ex&gt; (required)
     * @param pageSize Query document receipts list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /receipts?pageSize&#x3D;20 &lt;/ex&gt; (required)
     * @param authorization  (required)
     * @param sortBy Query document receipts list amount per page. &lt;br&gt;Example Pattern: &lt;ex&gt; /receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;publishedOn&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}] &lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Contact.NameLocal&#39;,&#39;sortOrder&#39;:&#39;desc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Value&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt;&lt;ex&gt;/receipts?sortBy&#x3D;[{&#39;name&#39;:&#39;Status&#39;,&#39;sortOrder&#39;:&#39;asc&#39;},{&#39;name&#39;:&#39;documentSerial&#39;,&#39;sortOrder&#39;:&#39;desc&#39;}]&lt;/ex&gt; (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsGetAsync(Integer currentPage, Integer pageSize, String authorization, String sortBy, String filter, final ApiCallback<AllDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsGetValidateBeforeCall(currentPage, pageSize, authorization, sortBy, filter, _callback);
        Type localVarReturnType = new TypeToken<AllDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiptsIdAttachmentPost
     * @param authorization  (required)
     * @param id documentId หรือ recordId ของเอกสารที่ต้องการแนบ (required)
     * @param file รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsIdAttachmentPostCall(String authorization, String id, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/receipts/{id}/attachment"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (file != null) {
            localVarFormParams.put("file", file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsIdAttachmentPostValidateBeforeCall(String authorization, String id, File file, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsIdAttachmentPost(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling receiptsIdAttachmentPost(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsIdAttachmentPostCall(authorization, id, file, _callback);
        return localVarCall;

    }

    /**
     * Add Attachment to receipt document.
     * แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param id documentId หรือ recordId ของเอกสารที่ต้องการแนบ (required)
     * @param file รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)
     * @return AttachmentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public AttachmentResponse receiptsIdAttachmentPost(String authorization, String id, File file) throws ApiException {
        ApiResponse<AttachmentResponse> localVarResp = receiptsIdAttachmentPostWithHttpInfo(authorization, id, file);
        return localVarResp.getData();
    }

    /**
     * Add Attachment to receipt document.
     * แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param id documentId หรือ recordId ของเอกสารที่ต้องการแนบ (required)
     * @param file รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)
     * @return ApiResponse&lt;AttachmentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AttachmentResponse> receiptsIdAttachmentPostWithHttpInfo(String authorization, String id, File file) throws ApiException {
        okhttp3.Call localVarCall = receiptsIdAttachmentPostValidateBeforeCall(authorization, id, file, null);
        Type localVarReturnType = new TypeToken<AttachmentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Attachment to receipt document. (asynchronously)
     * แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param id documentId หรือ recordId ของเอกสารที่ต้องการแนบ (required)
     * @param file รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsIdAttachmentPostAsync(String authorization, String id, File file, final ApiCallback<AttachmentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsIdAttachmentPostValidateBeforeCall(authorization, id, file, _callback);
        Type localVarReturnType = new TypeToken<AttachmentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiptsIdDelete
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsIdDeleteCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/receipts/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsIdDeleteValidateBeforeCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsIdDelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling receiptsIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsIdDeleteCall(authorization, id, _callback);
        return localVarCall;

    }

    /**
     * Delete receipt document.
     * ลบ เอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @return DeleteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public DeleteResponse receiptsIdDelete(String authorization, String id) throws ApiException {
        ApiResponse<DeleteResponse> localVarResp = receiptsIdDeleteWithHttpInfo(authorization, id);
        return localVarResp.getData();
    }

    /**
     * Delete receipt document.
     * ลบ เอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @return ApiResponse&lt;DeleteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteResponse> receiptsIdDeleteWithHttpInfo(String authorization, String id) throws ApiException {
        okhttp3.Call localVarCall = receiptsIdDeleteValidateBeforeCall(authorization, id, null);
        Type localVarReturnType = new TypeToken<DeleteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete receipt document. (asynchronously)
     * ลบ เอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ &lt;br&gt; ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsIdDeleteAsync(String authorization, String id, final ApiCallback<DeleteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsIdDeleteValidateBeforeCall(authorization, id, _callback);
        Type localVarReturnType = new TypeToken<DeleteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiptsIdGet
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsIdGetCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/receipts/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsIdGetValidateBeforeCall(String authorization, String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsIdGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling receiptsIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsIdGetCall(authorization, id, _callback);
        return localVarCall;

    }

    /**
     * Get receipt document.
     * เรียกดูข้อมูลเอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @return InlineDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public InlineDocumentResponse receiptsIdGet(String authorization, String id) throws ApiException {
        ApiResponse<InlineDocumentResponse> localVarResp = receiptsIdGetWithHttpInfo(authorization, id);
        return localVarResp.getData();
    }

    /**
     * Get receipt document.
     * เรียกดูข้อมูลเอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @return ApiResponse&lt;InlineDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineDocumentResponse> receiptsIdGetWithHttpInfo(String authorization, String id) throws ApiException {
        okhttp3.Call localVarCall = receiptsIdGetValidateBeforeCall(authorization, id, null);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get receipt document. (asynchronously)
     * เรียกดูข้อมูลเอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการ
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsIdGetAsync(String authorization, String id, final ApiCallback<InlineDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsIdGetValidateBeforeCall(authorization, id, _callback);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiptsIdPaymentPost
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId หรือ documentId (required)
     * @param paymentReceivingDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsIdPaymentPostCall(String authorization, String id, PaymentReceivingDocument paymentReceivingDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = paymentReceivingDocument;

        // create path and map variables
        String localVarPath = "/receipts/{id}/payment"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsIdPaymentPostValidateBeforeCall(String authorization, String id, PaymentReceivingDocument paymentReceivingDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsIdPaymentPost(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling receiptsIdPaymentPost(Async)");
        }
        
        // verify the required parameter 'paymentReceivingDocument' is set
        if (paymentReceivingDocument == null) {
            throw new ApiException("Missing the required parameter 'paymentReceivingDocument' when calling receiptsIdPaymentPost(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsIdPaymentPostCall(authorization, id, paymentReceivingDocument, _callback);
        return localVarCall;

    }

    /**
     * Change paid status of receipt document.
     * เก็บเงิน เอกสารใบเสร็จรับเงิน (เงินสด) เปลี่ยนสถานะเป็น เก็บเงินแล้ว
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId หรือ documentId (required)
     * @param paymentReceivingDocument  (required)
     * @return InlineDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public InlineDocumentResponse receiptsIdPaymentPost(String authorization, String id, PaymentReceivingDocument paymentReceivingDocument) throws ApiException {
        ApiResponse<InlineDocumentResponse> localVarResp = receiptsIdPaymentPostWithHttpInfo(authorization, id, paymentReceivingDocument);
        return localVarResp.getData();
    }

    /**
     * Change paid status of receipt document.
     * เก็บเงิน เอกสารใบเสร็จรับเงิน (เงินสด) เปลี่ยนสถานะเป็น เก็บเงินแล้ว
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId หรือ documentId (required)
     * @param paymentReceivingDocument  (required)
     * @return ApiResponse&lt;InlineDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineDocumentResponse> receiptsIdPaymentPostWithHttpInfo(String authorization, String id, PaymentReceivingDocument paymentReceivingDocument) throws ApiException {
        okhttp3.Call localVarCall = receiptsIdPaymentPostValidateBeforeCall(authorization, id, paymentReceivingDocument, null);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change paid status of receipt document. (asynchronously)
     * เก็บเงิน เอกสารใบเสร็จรับเงิน (เงินสด) เปลี่ยนสถานะเป็น เก็บเงินแล้ว
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId หรือ documentId (required)
     * @param paymentReceivingDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsIdPaymentPostAsync(String authorization, String id, PaymentReceivingDocument paymentReceivingDocument, final ApiCallback<InlineDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsIdPaymentPostValidateBeforeCall(authorization, id, paymentReceivingDocument, _callback);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiptsIdPut
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param updateInlineDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsIdPutCall(String authorization, String id, UpdateInlineDocument updateInlineDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = updateInlineDocument;

        // create path and map variables
        String localVarPath = "/receipts/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsIdPutValidateBeforeCall(String authorization, String id, UpdateInlineDocument updateInlineDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsIdPut(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling receiptsIdPut(Async)");
        }
        
        // verify the required parameter 'updateInlineDocument' is set
        if (updateInlineDocument == null) {
            throw new ApiException("Missing the required parameter 'updateInlineDocument' when calling receiptsIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsIdPutCall(authorization, id, updateInlineDocument, _callback);
        return localVarCall;

    }

    /**
     * Edit receipt document.
     * แก้ไขข้อมูลเอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการและเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param updateInlineDocument  (required)
     * @return InlineDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public InlineDocumentResponse receiptsIdPut(String authorization, String id, UpdateInlineDocument updateInlineDocument) throws ApiException {
        ApiResponse<InlineDocumentResponse> localVarResp = receiptsIdPutWithHttpInfo(authorization, id, updateInlineDocument);
        return localVarResp.getData();
    }

    /**
     * Edit receipt document.
     * แก้ไขข้อมูลเอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการและเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param updateInlineDocument  (required)
     * @return ApiResponse&lt;InlineDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineDocumentResponse> receiptsIdPutWithHttpInfo(String authorization, String id, UpdateInlineDocument updateInlineDocument) throws ApiException {
        okhttp3.Call localVarCall = receiptsIdPutValidateBeforeCall(authorization, id, updateInlineDocument, null);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Edit receipt document. (asynchronously)
     * แก้ไขข้อมูลเอกสารใบเสร็จรับเงิน ตามเลขที่เอกสารที่ต้องการและเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param updateInlineDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsIdPutAsync(String authorization, String id, UpdateInlineDocument updateInlineDocument, final ApiCallback<InlineDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsIdPutValidateBeforeCall(authorization, id, updateInlineDocument, _callback);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiptsIdStatusStatusIdPost
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param statusId เปลี่ยนสถานะเอกสารได้ 1 สถานะ &lt;br&gt; void &#x3D; ยกเลิก (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsIdStatusStatusIdPostCall(String authorization, String id, String statusId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/receipts/{id}/status/{statusId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "statusId" + "\\}", localVarApiClient.escapeString(statusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsIdStatusStatusIdPostValidateBeforeCall(String authorization, String id, String statusId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsIdStatusStatusIdPost(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling receiptsIdStatusStatusIdPost(Async)");
        }
        
        // verify the required parameter 'statusId' is set
        if (statusId == null) {
            throw new ApiException("Missing the required parameter 'statusId' when calling receiptsIdStatusStatusIdPost(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsIdStatusStatusIdPostCall(authorization, id, statusId, _callback);
        return localVarCall;

    }

    /**
     * Change status of receipt document.
     * เปลี่ยนสถานะของเอกสารใบเสร็จรับเงิน สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param statusId เปลี่ยนสถานะเอกสารได้ 1 สถานะ &lt;br&gt; void &#x3D; ยกเลิก (required)
     * @return InlineDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public InlineDocumentResponse receiptsIdStatusStatusIdPost(String authorization, String id, String statusId) throws ApiException {
        ApiResponse<InlineDocumentResponse> localVarResp = receiptsIdStatusStatusIdPostWithHttpInfo(authorization, id, statusId);
        return localVarResp.getData();
    }

    /**
     * Change status of receipt document.
     * เปลี่ยนสถานะของเอกสารใบเสร็จรับเงิน สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param statusId เปลี่ยนสถานะเอกสารได้ 1 สถานะ &lt;br&gt; void &#x3D; ยกเลิก (required)
     * @return ApiResponse&lt;InlineDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineDocumentResponse> receiptsIdStatusStatusIdPostWithHttpInfo(String authorization, String id, String statusId) throws ApiException {
        okhttp3.Call localVarCall = receiptsIdStatusStatusIdPostValidateBeforeCall(authorization, id, statusId, null);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Change status of receipt document. (asynchronously)
     * เปลี่ยนสถานะของเอกสารใบเสร็จรับเงิน สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
     * @param authorization  (required)
     * @param id ID เอกสารใช้ recordId (required)
     * @param statusId เปลี่ยนสถานะเอกสารได้ 1 สถานะ &lt;br&gt; void &#x3D; ยกเลิก (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsIdStatusStatusIdPostAsync(String authorization, String id, String statusId, final ApiCallback<InlineDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsIdStatusStatusIdPostValidateBeforeCall(authorization, id, statusId, _callback);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiptsInlinePost
     * @param authorization  (required)
     * @param inlineDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsInlinePostCall(String authorization, InlineDocument inlineDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineDocument;

        // create path and map variables
        String localVarPath = "/receipts/inline";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsInlinePostValidateBeforeCall(String authorization, InlineDocument inlineDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsInlinePost(Async)");
        }
        
        // verify the required parameter 'inlineDocument' is set
        if (inlineDocument == null) {
            throw new ApiException("Missing the required parameter 'inlineDocument' when calling receiptsInlinePost(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsInlinePostCall(authorization, inlineDocument, _callback);
        return localVarCall;

    }

    /**
     * Create receipt document with discount and tax inline.
     * สร้างเอกสารใบเสร็จรับเงิน แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสร็จรับเงิน : https://flowaccount.com/blog/ใบเสร็จรับเงิน
     * @param authorization  (required)
     * @param inlineDocument  (required)
     * @return InlineDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public InlineDocumentResponse receiptsInlinePost(String authorization, InlineDocument inlineDocument) throws ApiException {
        ApiResponse<InlineDocumentResponse> localVarResp = receiptsInlinePostWithHttpInfo(authorization, inlineDocument);
        return localVarResp.getData();
    }

    /**
     * Create receipt document with discount and tax inline.
     * สร้างเอกสารใบเสร็จรับเงิน แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสร็จรับเงิน : https://flowaccount.com/blog/ใบเสร็จรับเงิน
     * @param authorization  (required)
     * @param inlineDocument  (required)
     * @return ApiResponse&lt;InlineDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineDocumentResponse> receiptsInlinePostWithHttpInfo(String authorization, InlineDocument inlineDocument) throws ApiException {
        okhttp3.Call localVarCall = receiptsInlinePostValidateBeforeCall(authorization, inlineDocument, null);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create receipt document with discount and tax inline. (asynchronously)
     * สร้างเอกสารใบเสร็จรับเงิน แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสร็จรับเงิน : https://flowaccount.com/blog/ใบเสร็จรับเงิน
     * @param authorization  (required)
     * @param inlineDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsInlinePostAsync(String authorization, InlineDocument inlineDocument, final ApiCallback<InlineDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsInlinePostValidateBeforeCall(authorization, inlineDocument, _callback);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiptsInlineWithPaymentPost
     * @param authorization  (required)
     * @param inlineDocumentWithPaymentReceiving  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsInlineWithPaymentPostCall(String authorization, InlineDocumentWithPaymentReceiving inlineDocumentWithPaymentReceiving, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inlineDocumentWithPaymentReceiving;

        // create path and map variables
        String localVarPath = "/receipts/inline/with-payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsInlineWithPaymentPostValidateBeforeCall(String authorization, InlineDocumentWithPaymentReceiving inlineDocumentWithPaymentReceiving, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsInlineWithPaymentPost(Async)");
        }
        
        // verify the required parameter 'inlineDocumentWithPaymentReceiving' is set
        if (inlineDocumentWithPaymentReceiving == null) {
            throw new ApiException("Missing the required parameter 'inlineDocumentWithPaymentReceiving' when calling receiptsInlineWithPaymentPost(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsInlineWithPaymentPostCall(authorization, inlineDocumentWithPaymentReceiving, _callback);
        return localVarCall;

    }

    /**
     * Create receipt document with discount and tax inline with payment.
     * สร้างเอกสารใบเสร็จรับเงิน แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้าพร้อมเก็บเงิน &lt;br&gt;เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
     * @param authorization  (required)
     * @param inlineDocumentWithPaymentReceiving  (required)
     * @return InlineDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public InlineDocumentResponse receiptsInlineWithPaymentPost(String authorization, InlineDocumentWithPaymentReceiving inlineDocumentWithPaymentReceiving) throws ApiException {
        ApiResponse<InlineDocumentResponse> localVarResp = receiptsInlineWithPaymentPostWithHttpInfo(authorization, inlineDocumentWithPaymentReceiving);
        return localVarResp.getData();
    }

    /**
     * Create receipt document with discount and tax inline with payment.
     * สร้างเอกสารใบเสร็จรับเงิน แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้าพร้อมเก็บเงิน &lt;br&gt;เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
     * @param authorization  (required)
     * @param inlineDocumentWithPaymentReceiving  (required)
     * @return ApiResponse&lt;InlineDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineDocumentResponse> receiptsInlineWithPaymentPostWithHttpInfo(String authorization, InlineDocumentWithPaymentReceiving inlineDocumentWithPaymentReceiving) throws ApiException {
        okhttp3.Call localVarCall = receiptsInlineWithPaymentPostValidateBeforeCall(authorization, inlineDocumentWithPaymentReceiving, null);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create receipt document with discount and tax inline with payment. (asynchronously)
     * สร้างเอกสารใบเสร็จรับเงิน แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้าพร้อมเก็บเงิน &lt;br&gt;เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
     * @param authorization  (required)
     * @param inlineDocumentWithPaymentReceiving  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsInlineWithPaymentPostAsync(String authorization, InlineDocumentWithPaymentReceiving inlineDocumentWithPaymentReceiving, final ApiCallback<InlineDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsInlineWithPaymentPostValidateBeforeCall(authorization, inlineDocumentWithPaymentReceiving, _callback);
        Type localVarReturnType = new TypeToken<InlineDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiptsPost
     * @param authorization  (required)
     * @param simpleDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsPostCall(String authorization, SimpleDocument simpleDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = simpleDocument;

        // create path and map variables
        String localVarPath = "/receipts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsPostValidateBeforeCall(String authorization, SimpleDocument simpleDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsPost(Async)");
        }
        
        // verify the required parameter 'simpleDocument' is set
        if (simpleDocument == null) {
            throw new ApiException("Missing the required parameter 'simpleDocument' when calling receiptsPost(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsPostCall(authorization, simpleDocument, _callback);
        return localVarCall;

    }

    /**
     * Create receipt document.
     * สร้างเอกสารใบเสร็จรับเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสร็จรับเงิน : https://flowaccount.com/blog/ใบเสร็จรับเงิน
     * @param authorization  (required)
     * @param simpleDocument  (required)
     * @return SimpleDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public SimpleDocumentResponse receiptsPost(String authorization, SimpleDocument simpleDocument) throws ApiException {
        ApiResponse<SimpleDocumentResponse> localVarResp = receiptsPostWithHttpInfo(authorization, simpleDocument);
        return localVarResp.getData();
    }

    /**
     * Create receipt document.
     * สร้างเอกสารใบเสร็จรับเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสร็จรับเงิน : https://flowaccount.com/blog/ใบเสร็จรับเงิน
     * @param authorization  (required)
     * @param simpleDocument  (required)
     * @return ApiResponse&lt;SimpleDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimpleDocumentResponse> receiptsPostWithHttpInfo(String authorization, SimpleDocument simpleDocument) throws ApiException {
        okhttp3.Call localVarCall = receiptsPostValidateBeforeCall(authorization, simpleDocument, null);
        Type localVarReturnType = new TypeToken<SimpleDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create receipt document. (asynchronously)
     * สร้างเอกสารใบเสร็จรับเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting) &lt;br&gt; &lt;br&gt; ข้อมูลการออกเอกสารใบเสร็จรับเงิน : https://flowaccount.com/blog/ใบเสร็จรับเงิน
     * @param authorization  (required)
     * @param simpleDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsPostAsync(String authorization, SimpleDocument simpleDocument, final ApiCallback<SimpleDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsPostValidateBeforeCall(authorization, simpleDocument, _callback);
        Type localVarReturnType = new TypeToken<SimpleDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiptsSharedocumentPost
     * @param authorization  (required)
     * @param shareDocument  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsSharedocumentPostCall(String authorization, ShareDocument shareDocument, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = shareDocument;

        // create path and map variables
        String localVarPath = "/receipts/sharedocument";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsSharedocumentPostValidateBeforeCall(String authorization, ShareDocument shareDocument, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsSharedocumentPost(Async)");
        }
        
        // verify the required parameter 'shareDocument' is set
        if (shareDocument == null) {
            throw new ApiException("Missing the required parameter 'shareDocument' when calling receiptsSharedocumentPost(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsSharedocumentPostCall(authorization, shareDocument, _callback);
        return localVarCall;

    }

    /**
     * Share link receipt document.
     * แชร์ลิงค์ เอกสารใบเสร็จรับเงิน ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
     * @param authorization  (required)
     * @param shareDocument  (required)
     * @return ShareDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ShareDocumentResponse receiptsSharedocumentPost(String authorization, ShareDocument shareDocument) throws ApiException {
        ApiResponse<ShareDocumentResponse> localVarResp = receiptsSharedocumentPostWithHttpInfo(authorization, shareDocument);
        return localVarResp.getData();
    }

    /**
     * Share link receipt document.
     * แชร์ลิงค์ เอกสารใบเสร็จรับเงิน ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
     * @param authorization  (required)
     * @param shareDocument  (required)
     * @return ApiResponse&lt;ShareDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareDocumentResponse> receiptsSharedocumentPostWithHttpInfo(String authorization, ShareDocument shareDocument) throws ApiException {
        okhttp3.Call localVarCall = receiptsSharedocumentPostValidateBeforeCall(authorization, shareDocument, null);
        Type localVarReturnType = new TypeToken<ShareDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Share link receipt document. (asynchronously)
     * แชร์ลิงค์ เอกสารใบเสร็จรับเงิน ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
     * @param authorization  (required)
     * @param shareDocument  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsSharedocumentPostAsync(String authorization, ShareDocument shareDocument, final ApiCallback<ShareDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsSharedocumentPostValidateBeforeCall(authorization, shareDocument, _callback);
        Type localVarReturnType = new TypeToken<ShareDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for receiptsWithPaymentPost
     * @param authorization  (required)
     * @param simpleDocumentWithPaymentReceiving  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsWithPaymentPostCall(String authorization, SimpleDocumentWithPaymentReceiving simpleDocumentWithPaymentReceiving, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = simpleDocumentWithPaymentReceiving;

        // create path and map variables
        String localVarPath = "/receipts/with-payment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call receiptsWithPaymentPostValidateBeforeCall(String authorization, SimpleDocumentWithPaymentReceiving simpleDocumentWithPaymentReceiving, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling receiptsWithPaymentPost(Async)");
        }
        
        // verify the required parameter 'simpleDocumentWithPaymentReceiving' is set
        if (simpleDocumentWithPaymentReceiving == null) {
            throw new ApiException("Missing the required parameter 'simpleDocumentWithPaymentReceiving' when calling receiptsWithPaymentPost(Async)");
        }
        

        okhttp3.Call localVarCall = receiptsWithPaymentPostCall(authorization, simpleDocumentWithPaymentReceiving, _callback);
        return localVarCall;

    }

    /**
     * Create receipt document with payment.
     * สร้างเอกสารใบเสร็จรับเงิน พร้อมเก็บเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
     * @param authorization  (required)
     * @param simpleDocumentWithPaymentReceiving  (required)
     * @return SimpleDocumentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public SimpleDocumentResponse receiptsWithPaymentPost(String authorization, SimpleDocumentWithPaymentReceiving simpleDocumentWithPaymentReceiving) throws ApiException {
        ApiResponse<SimpleDocumentResponse> localVarResp = receiptsWithPaymentPostWithHttpInfo(authorization, simpleDocumentWithPaymentReceiving);
        return localVarResp.getData();
    }

    /**
     * Create receipt document with payment.
     * สร้างเอกสารใบเสร็จรับเงิน พร้อมเก็บเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
     * @param authorization  (required)
     * @param simpleDocumentWithPaymentReceiving  (required)
     * @return ApiResponse&lt;SimpleDocumentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SimpleDocumentResponse> receiptsWithPaymentPostWithHttpInfo(String authorization, SimpleDocumentWithPaymentReceiving simpleDocumentWithPaymentReceiving) throws ApiException {
        okhttp3.Call localVarCall = receiptsWithPaymentPostValidateBeforeCall(authorization, simpleDocumentWithPaymentReceiving, null);
        Type localVarReturnType = new TypeToken<SimpleDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create receipt document with payment. (asynchronously)
     * สร้างเอกสารใบเสร็จรับเงิน พร้อมเก็บเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
     * @param authorization  (required)
     * @param simpleDocumentWithPaymentReceiving  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401 response </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> 500 response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call receiptsWithPaymentPostAsync(String authorization, SimpleDocumentWithPaymentReceiving simpleDocumentWithPaymentReceiving, final ApiCallback<SimpleDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = receiptsWithPaymentPostValidateBeforeCall(authorization, simpleDocumentWithPaymentReceiving, _callback);
        Type localVarReturnType = new TypeToken<SimpleDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
