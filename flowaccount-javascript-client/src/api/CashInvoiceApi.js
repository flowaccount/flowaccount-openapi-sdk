/**
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AllDocumentResponse from '../model/AllDocumentResponse';
import AttachmentResponse from '../model/AttachmentResponse';
import DeleteResponse from '../model/DeleteResponse';
import InlineDocument from '../model/InlineDocument';
import InlineDocumentResponse from '../model/InlineDocumentResponse';
import InlineDocumentWithPaymentReceiving from '../model/InlineDocumentWithPaymentReceiving';
import PaymentReceivingDocument from '../model/PaymentReceivingDocument';
import SendEmailCoppies from '../model/SendEmailCoppies';
import SendEmailResponse from '../model/SendEmailResponse';
import ShareDocument from '../model/ShareDocument';
import ShareDocumentResponse from '../model/ShareDocumentResponse';
import SimpleDocument from '../model/SimpleDocument';
import SimpleDocumentResponse from '../model/SimpleDocumentResponse';
import SimpleDocumentWithPaymentReceiving from '../model/SimpleDocumentWithPaymentReceiving';
import UpdateInlineDocument from '../model/UpdateInlineDocument';

/**
* CashInvoice service.
* @module api/CashInvoiceApi
* @version 2-oas3
*/
export default class CashInvoiceApi {

    /**
    * Constructs a new CashInvoiceApi. 
    * @alias module:api/CashInvoiceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cashInvoicesEmailDocumentPost operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesEmailDocumentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SendEmailResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send email cash invoices document.
     * ส่งเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ผ่านทางอีเมล ตามเลขที่เอกสารที่ต้องการ
     * @param {String} authorization 
     * @param {module:model/SendEmailCoppies} sendEmailCoppies 
     * @param {module:api/CashInvoiceApi~cashInvoicesEmailDocumentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SendEmailResponse}
     */
    cashInvoicesEmailDocumentPost(authorization, sendEmailCoppies, callback) {
      let postBody = sendEmailCoppies;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesEmailDocumentPost");
      }
      // verify the required parameter 'sendEmailCoppies' is set
      if (sendEmailCoppies === undefined || sendEmailCoppies === null) {
        throw new Error("Missing the required parameter 'sendEmailCoppies' when calling cashInvoicesEmailDocumentPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SendEmailResponse;
      return this.apiClient.callApi(
        '/cash-invoices/email-document', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInvoicesGet operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AllDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list all cash invoices documents
     * เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ทั้งหมดในระบบ
     * @param {Number} currentPage Query current page document cash invoices. <br>Example Pattern: <ex>/cash-invoices?currentPage=1 </ex><ex>/cash-invoices?currentPage=1&pageSize=20</ex>
     * @param {Number} pageSize Query document cash invoices list amount per page. <br>Example Pattern: <ex> /cash-invoices?pageSize=20 </ex>
     * @param {String} authorization 
     * @param {Object} opts Optional parameters
     * @param {String} opts.sortBy Query document cash invoices list amount per page. <br>Example Pattern: <ex> /cash-invoices?sortBy=[{'name':'publishedOn','sortOrder':'asc'},{'name':'documentSerial','sortOrder':'desc'}] </ex><ex>/cash-invoices?sortBy=[{'name':'Contact.NameLocal','sortOrder':'desc'},{'name':'documentSerial','sortOrder':'desc'}]</ex><ex>/cash-invoices?sortBy=[{'name':'Value','sortOrder':'asc'},{'name':'documentSerial','sortOrder':'desc'}]</ex><ex>/cash-invoices?sortBy=[{'name':'Status','sortOrder':'asc'},{'name':'documentSerial','sortOrder':'desc'}]</ex>
     * @param {String} opts.filter 
     * @param {module:api/CashInvoiceApi~cashInvoicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AllDocumentResponse}
     */
    cashInvoicesGet(currentPage, pageSize, authorization, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'currentPage' is set
      if (currentPage === undefined || currentPage === null) {
        throw new Error("Missing the required parameter 'currentPage' when calling cashInvoicesGet");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling cashInvoicesGet");
      }
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'currentPage': currentPage,
        'pageSize': pageSize,
        'sortBy': opts['sortBy'],
        'filter': opts['filter']
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AllDocumentResponse;
      return this.apiClient.callApi(
        '/cash-invoices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInvoicesIdAttachmentPost operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesIdAttachmentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttachmentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Attachment to cash invoices document.
     * แนบไฟล์ รูปภาพ หรือ เอกสารที่เกี่ยวข้อง ในเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) ตามเลขที่เอกสารที่ต้องการ
     * @param {String} authorization 
     * @param {String} id documentId หรือ recordId ของเอกสารที่ต้องการแนบ
     * @param {Object} opts Optional parameters
     * @param {File} opts.file รูปแบบ file ที่ใช้แนบในเอกสารเป็นแบบ Binary
     * @param {module:api/CashInvoiceApi~cashInvoicesIdAttachmentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttachmentResponse}
     */
    cashInvoicesIdAttachmentPost(authorization, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesIdAttachmentPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cashInvoicesIdAttachmentPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
        'file': opts['file']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AttachmentResponse;
      return this.apiClient.callApi(
        '/cash-invoices/{id}/attachment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInvoicesIdDelete operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete cash invoices document.
     * ลบ เอกสารใบกำกับ/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ <br> ** การลบเอกสาร เอกสารต้องอยู่ในสถานะ รอดำเนินการ 
     * @param {String} authorization 
     * @param {String} id ID เอกสารใช้ recordId
     * @param {module:api/CashInvoiceApi~cashInvoicesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteResponse}
     */
    cashInvoicesIdDelete(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesIdDelete");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cashInvoicesIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DeleteResponse;
      return this.apiClient.callApi(
        '/cash-invoices/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInvoicesIdGet operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cash invoices document.
     * เรียกดูข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) ตามเลขที่เอกสารที่ต้องการ
     * @param {String} authorization 
     * @param {String} id 
     * @param {module:api/CashInvoiceApi~cashInvoicesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineDocumentResponse}
     */
    cashInvoicesIdGet(authorization, id, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesIdGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cashInvoicesIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineDocumentResponse;
      return this.apiClient.callApi(
        '/cash-invoices/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInvoicesIdPaymentPost operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesIdPaymentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change paid status of cash invoices document.
     * เก็บเงิน เอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) เปลี่ยนสถานะเป็น เก็บเงินแล้ว
     * @param {String} authorization 
     * @param {String} id ID เอกสารใช้ recordId หรือ documentId
     * @param {module:model/PaymentReceivingDocument} paymentReceivingDocument 
     * @param {module:api/CashInvoiceApi~cashInvoicesIdPaymentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineDocumentResponse}
     */
    cashInvoicesIdPaymentPost(authorization, id, paymentReceivingDocument, callback) {
      let postBody = paymentReceivingDocument;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesIdPaymentPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cashInvoicesIdPaymentPost");
      }
      // verify the required parameter 'paymentReceivingDocument' is set
      if (paymentReceivingDocument === undefined || paymentReceivingDocument === null) {
        throw new Error("Missing the required parameter 'paymentReceivingDocument' when calling cashInvoicesIdPaymentPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineDocumentResponse;
      return this.apiClient.callApi(
        '/cash-invoices/{id}/payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInvoicesIdPut operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit cash invoices document.
     * แก้ไขข้อมูลเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ตามเลขที่เอกสารที่ต้องการเอกสารต้องเป็นสถานะ รอดำเนินการ (Awaiting)
     * @param {String} authorization 
     * @param {String} id ID เอกสารใช้ recordId
     * @param {module:model/UpdateInlineDocument} updateInlineDocument 
     * @param {module:api/CashInvoiceApi~cashInvoicesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineDocumentResponse}
     */
    cashInvoicesIdPut(authorization, id, updateInlineDocument, callback) {
      let postBody = updateInlineDocument;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesIdPut");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cashInvoicesIdPut");
      }
      // verify the required parameter 'updateInlineDocument' is set
      if (updateInlineDocument === undefined || updateInlineDocument === null) {
        throw new Error("Missing the required parameter 'updateInlineDocument' when calling cashInvoicesIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineDocumentResponse;
      return this.apiClient.callApi(
        '/cash-invoices/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInvoicesIdStatusStatusIdPost operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesIdStatusStatusIdPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change status of cash invoices document.
     * เปลี่ยนสถานะของเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) สร้างเอกสารใหม่ครั้งแรกจะได้รับสถานะ รอดำเนินการ (awaiting)
     * @param {String} authorization 
     * @param {String} id ID เอกสารใช้ recordId
     * @param {String} statusId เปลี่ยนสถานะเอกสารได้ 3 สถานะ <br> awaiting = รอดำเนินการ <br> invoicedelivered = รอเก็บเงิน <br> void = ยกเลิก
     * @param {module:api/CashInvoiceApi~cashInvoicesIdStatusStatusIdPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineDocumentResponse}
     */
    cashInvoicesIdStatusStatusIdPost(authorization, id, statusId, callback) {
      let postBody = null;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesIdStatusStatusIdPost");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling cashInvoicesIdStatusStatusIdPost");
      }
      // verify the required parameter 'statusId' is set
      if (statusId === undefined || statusId === null) {
        throw new Error("Missing the required parameter 'statusId' when calling cashInvoicesIdStatusStatusIdPost");
      }

      let pathParams = {
        'id': id,
        'statusId': statusId
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineDocumentResponse;
      return this.apiClient.callApi(
        '/cash-invoices/{id}/status/{statusId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInvoicesInlinePost operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesInlinePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create cash invoices document with discount and tax inline.
     * สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้า เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
     * @param {String} authorization 
     * @param {module:model/InlineDocument} inlineDocument 
     * @param {module:api/CashInvoiceApi~cashInvoicesInlinePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineDocumentResponse}
     */
    cashInvoicesInlinePost(authorization, inlineDocument, callback) {
      let postBody = inlineDocument;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesInlinePost");
      }
      // verify the required parameter 'inlineDocument' is set
      if (inlineDocument === undefined || inlineDocument === null) {
        throw new Error("Missing the required parameter 'inlineDocument' when calling cashInvoicesInlinePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineDocumentResponse;
      return this.apiClient.callApi(
        '/cash-invoices/inline', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInvoicesInlineWithPaymentPost operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesInlineWithPaymentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create cash invoices document with discount and tax inline with payment.
     * สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (เงินสด) แบบส่วนลด หรือ ภาษี แยกตามรายการสินค้าพร้อมเก็บเงิน <br>เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
     * @param {String} authorization 
     * @param {module:model/InlineDocumentWithPaymentReceiving} inlineDocumentWithPaymentReceiving 
     * @param {module:api/CashInvoiceApi~cashInvoicesInlineWithPaymentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineDocumentResponse}
     */
    cashInvoicesInlineWithPaymentPost(authorization, inlineDocumentWithPaymentReceiving, callback) {
      let postBody = inlineDocumentWithPaymentReceiving;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesInlineWithPaymentPost");
      }
      // verify the required parameter 'inlineDocumentWithPaymentReceiving' is set
      if (inlineDocumentWithPaymentReceiving === undefined || inlineDocumentWithPaymentReceiving === null) {
        throw new Error("Missing the required parameter 'inlineDocumentWithPaymentReceiving' when calling cashInvoicesInlineWithPaymentPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineDocumentResponse;
      return this.apiClient.callApi(
        '/cash-invoices/inline/with-payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInvoicesPost operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create cash invoices document.
     * สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ รอดำเนินการ (awaiting)
     * @param {String} authorization 
     * @param {module:model/SimpleDocument} simpleDocument 
     * @param {module:api/CashInvoiceApi~cashInvoicesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleDocumentResponse}
     */
    cashInvoicesPost(authorization, simpleDocument, callback) {
      let postBody = simpleDocument;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesPost");
      }
      // verify the required parameter 'simpleDocument' is set
      if (simpleDocument === undefined || simpleDocument === null) {
        throw new Error("Missing the required parameter 'simpleDocument' when calling cashInvoicesPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SimpleDocumentResponse;
      return this.apiClient.callApi(
        '/cash-invoices', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInvoicesSharedocumentPost operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesSharedocumentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Share link cash invoices document.
     * แชร์ลิงค์ เอกสารใบกำกับภาษี/ใบเสร็จรับเงิน(เงินสด) ที่ต้องการ จะได้รับลิงค์สำหรับแชร์และเรียกดูเอกสาร
     * @param {String} authorization 
     * @param {module:model/ShareDocument} shareDocument 
     * @param {module:api/CashInvoiceApi~cashInvoicesSharedocumentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareDocumentResponse}
     */
    cashInvoicesSharedocumentPost(authorization, shareDocument, callback) {
      let postBody = shareDocument;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesSharedocumentPost");
      }
      // verify the required parameter 'shareDocument' is set
      if (shareDocument === undefined || shareDocument === null) {
        throw new Error("Missing the required parameter 'shareDocument' when calling cashInvoicesSharedocumentPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShareDocumentResponse;
      return this.apiClient.callApi(
        '/cash-invoices/sharedocument', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cashInvoicesWithPaymentPost operation.
     * @callback module:api/CashInvoiceApi~cashInvoicesWithPaymentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SimpleDocumentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create cash invoices document with payment.
     * สร้างเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน (ขายสด) พร้อมเก็บเงิน เมื่อสร้างสำเร็จสถานะเอกสารจะอยู่ในสถานะ เก็บเงินแล้ว (paid)
     * @param {String} authorization 
     * @param {module:model/SimpleDocumentWithPaymentReceiving} simpleDocumentWithPaymentReceiving 
     * @param {module:api/CashInvoiceApi~cashInvoicesWithPaymentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SimpleDocumentResponse}
     */
    cashInvoicesWithPaymentPost(authorization, simpleDocumentWithPaymentReceiving, callback) {
      let postBody = simpleDocumentWithPaymentReceiving;
      // verify the required parameter 'authorization' is set
      if (authorization === undefined || authorization === null) {
        throw new Error("Missing the required parameter 'authorization' when calling cashInvoicesWithPaymentPost");
      }
      // verify the required parameter 'simpleDocumentWithPaymentReceiving' is set
      if (simpleDocumentWithPaymentReceiving === undefined || simpleDocumentWithPaymentReceiving === null) {
        throw new Error("Missing the required parameter 'simpleDocumentWithPaymentReceiving' when calling cashInvoicesWithPaymentPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Authorization': authorization
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SimpleDocumentResponse;
      return this.apiClient.callApi(
        '/cash-invoices/with-payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
