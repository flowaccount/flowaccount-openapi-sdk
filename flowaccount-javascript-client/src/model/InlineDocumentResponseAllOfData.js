/**
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineProductItem from './InlineProductItem';
import ReferencedByMe from './ReferencedByMe';
import ReferencedToMe from './ReferencedToMe';
import SimpleDocumentResponseAllOfDataCompany from './SimpleDocumentResponseAllOfDataCompany';
import SimpleDocumentResponseAllOfDataPayments from './SimpleDocumentResponseAllOfDataPayments';

/**
 * The InlineDocumentResponseAllOfData model module.
 * @module model/InlineDocumentResponseAllOfData
 * @version 2-oas3
 */
class InlineDocumentResponseAllOfData {
    /**
     * Constructs a new <code>InlineDocumentResponseAllOfData</code>.
     * @alias module:model/InlineDocumentResponseAllOfData
     */
    constructor() { 
        
        InlineDocumentResponseAllOfData.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InlineDocumentResponseAllOfData</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineDocumentResponseAllOfData} obj Optional instance to populate.
     * @return {module:model/InlineDocumentResponseAllOfData} The populated <code>InlineDocumentResponseAllOfData</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineDocumentResponseAllOfData();

            if (data.hasOwnProperty('recordId')) {
                obj['recordId'] = ApiClient.convertToType(data['recordId'], 'Number');
            }
            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = ApiClient.convertToType(data['documentId'], 'Number');
            }
            if (data.hasOwnProperty('documentSerial')) {
                obj['documentSerial'] = ApiClient.convertToType(data['documentSerial'], 'String');
            }
            if (data.hasOwnProperty('contactCode')) {
                obj['contactCode'] = ApiClient.convertToType(data['contactCode'], 'String');
            }
            if (data.hasOwnProperty('contactName')) {
                obj['contactName'] = ApiClient.convertToType(data['contactName'], 'String');
            }
            if (data.hasOwnProperty('contactAddress')) {
                obj['contactAddress'] = ApiClient.convertToType(data['contactAddress'], 'String');
            }
            if (data.hasOwnProperty('contactTaxId')) {
                obj['contactTaxId'] = ApiClient.convertToType(data['contactTaxId'], 'String');
            }
            if (data.hasOwnProperty('contactBranch')) {
                obj['contactBranch'] = ApiClient.convertToType(data['contactBranch'], 'String');
            }
            if (data.hasOwnProperty('contactPerson')) {
                obj['contactPerson'] = ApiClient.convertToType(data['contactPerson'], 'String');
            }
            if (data.hasOwnProperty('contactEmail')) {
                obj['contactEmail'] = ApiClient.convertToType(data['contactEmail'], 'String');
            }
            if (data.hasOwnProperty('contactNumber')) {
                obj['contactNumber'] = ApiClient.convertToType(data['contactNumber'], 'String');
            }
            if (data.hasOwnProperty('contactZipCode')) {
                obj['contactZipCode'] = ApiClient.convertToType(data['contactZipCode'], 'String');
            }
            if (data.hasOwnProperty('contactGroup')) {
                obj['contactGroup'] = ApiClient.convertToType(data['contactGroup'], 'Number');
            }
            if (data.hasOwnProperty('publishedOn')) {
                obj['publishedOn'] = ApiClient.convertToType(data['publishedOn'], 'Date');
            }
            if (data.hasOwnProperty('creditType')) {
                obj['creditType'] = ApiClient.convertToType(data['creditType'], 'Number');
            }
            if (data.hasOwnProperty('creditDays')) {
                obj['creditDays'] = ApiClient.convertToType(data['creditDays'], 'Number');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'Date');
            }
            if (data.hasOwnProperty('salesName')) {
                obj['salesName'] = ApiClient.convertToType(data['salesName'], 'String');
            }
            if (data.hasOwnProperty('projectName')) {
                obj['projectName'] = ApiClient.convertToType(data['projectName'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('isVatInclusive')) {
                obj['isVatInclusive'] = ApiClient.convertToType(data['isVatInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('discountType')) {
                obj['discountType'] = ApiClient.convertToType(data['discountType'], 'Number');
            }
            if (data.hasOwnProperty('useInlineDiscount')) {
                obj['useInlineDiscount'] = ApiClient.convertToType(data['useInlineDiscount'], 'Boolean');
            }
            if (data.hasOwnProperty('useInlineVat')) {
                obj['useInlineVat'] = ApiClient.convertToType(data['useInlineVat'], 'Boolean');
            }
            if (data.hasOwnProperty('useReceiptDeduction')) {
                obj['useReceiptDeduction'] = ApiClient.convertToType(data['useReceiptDeduction'], 'Boolean');
            }
            if (data.hasOwnProperty('subTotal')) {
                obj['subTotal'] = ApiClient.convertToType(data['subTotal'], 'Number');
            }
            if (data.hasOwnProperty('discountPercentage')) {
                obj['discountPercentage'] = ApiClient.convertToType(data['discountPercentage'], 'Number');
            }
            if (data.hasOwnProperty('discountAmount')) {
                obj['discountAmount'] = ApiClient.convertToType(data['discountAmount'], 'Number');
            }
            if (data.hasOwnProperty('totalAfterDiscount')) {
                obj['totalAfterDiscount'] = ApiClient.convertToType(data['totalAfterDiscount'], 'Number');
            }
            if (data.hasOwnProperty('totalWithoutVat')) {
                obj['totalWithoutVat'] = ApiClient.convertToType(data['totalWithoutVat'], 'Number');
            }
            if (data.hasOwnProperty('exemptAmount')) {
                obj['exemptAmount'] = ApiClient.convertToType(data['exemptAmount'], 'Number');
            }
            if (data.hasOwnProperty('vatableAmount')) {
                obj['vatableAmount'] = ApiClient.convertToType(data['vatableAmount'], 'Number');
            }
            if (data.hasOwnProperty('isVat')) {
                obj['isVat'] = ApiClient.convertToType(data['isVat'], 'Boolean');
            }
            if (data.hasOwnProperty('vatAmount')) {
                obj['vatAmount'] = ApiClient.convertToType(data['vatAmount'], 'Number');
            }
            if (data.hasOwnProperty('grandTotal')) {
                obj['grandTotal'] = ApiClient.convertToType(data['grandTotal'], 'Number');
            }
            if (data.hasOwnProperty('documentShowWithholdingTax')) {
                obj['documentShowWithholdingTax'] = ApiClient.convertToType(data['documentShowWithholdingTax'], 'Boolean');
            }
            if (data.hasOwnProperty('documentWithholdingTaxPercentage')) {
                obj['documentWithholdingTaxPercentage'] = ApiClient.convertToType(data['documentWithholdingTaxPercentage'], 'Number');
            }
            if (data.hasOwnProperty('documentDeductionType')) {
                obj['documentDeductionType'] = ApiClient.convertToType(data['documentDeductionType'], 'Number');
            }
            if (data.hasOwnProperty('documentDeductionAmount')) {
                obj['documentDeductionAmount'] = ApiClient.convertToType(data['documentDeductionAmount'], 'Number');
            }
            if (data.hasOwnProperty('remarks')) {
                obj['remarks'] = ApiClient.convertToType(data['remarks'], 'String');
            }
            if (data.hasOwnProperty('internalNotes')) {
                obj['internalNotes'] = ApiClient.convertToType(data['internalNotes'], 'String');
            }
            if (data.hasOwnProperty('showSignatureOrStamp')) {
                obj['showSignatureOrStamp'] = ApiClient.convertToType(data['showSignatureOrStamp'], 'Boolean');
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [InlineProductItem]);
            }
            if (data.hasOwnProperty('referencedToMe')) {
                obj['referencedToMe'] = ApiClient.convertToType(data['referencedToMe'], [ReferencedToMe]);
            }
            if (data.hasOwnProperty('referencedByMe')) {
                obj['referencedByMe'] = ApiClient.convertToType(data['referencedByMe'], [ReferencedByMe]);
            }
            if (data.hasOwnProperty('payments')) {
                obj['payments'] = SimpleDocumentResponseAllOfDataPayments.constructFromObject(data['payments']);
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = SimpleDocumentResponseAllOfDataCompany.constructFromObject(data['company']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('statusString')) {
                obj['statusString'] = ApiClient.convertToType(data['statusString'], 'Number');
            }
            if (data.hasOwnProperty('documentType')) {
                obj['documentType'] = ApiClient.convertToType(data['documentType'], 'Number');
            }
            if (data.hasOwnProperty('allowDelete')) {
                obj['allowDelete'] = ApiClient.convertToType(data['allowDelete'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * id ของเอกสาร
 * @member {Number} recordId
 * @default 0
 */
InlineDocumentResponseAllOfData.prototype['recordId'] = 0;

/**
 * id ของเอกสาร
 * @member {Number} documentId
 * @default 0
 */
InlineDocumentResponseAllOfData.prototype['documentId'] = 0;

/**
 * เลขที่เอกสาร
 * @member {String} documentSerial
 */
InlineDocumentResponseAllOfData.prototype['documentSerial'] = undefined;

/**
 * รหัส ลูกค้า/ผู้จำหน่าย
 * @member {String} contactCode
 */
InlineDocumentResponseAllOfData.prototype['contactCode'] = undefined;

/**
 * ชื่อ ลูกค้า/ผู้จำหน่าย <br> <ex>Example: บริษัท ลูกค้า จำกัด, คุณลูกค้า ซื้อประจำ</ex>
 * @member {String} contactName
 */
InlineDocumentResponseAllOfData.prototype['contactName'] = undefined;

/**
 * ที่อยู่ ลูกค้า/ผู้จำหน่าย
 * @member {String} contactAddress
 */
InlineDocumentResponseAllOfData.prototype['contactAddress'] = undefined;

/**
 * เลขประจำตัวผู้เสียภาษี ลูกค้า หรือ ผู้จำหน่าย/ลูกค้า <br> (ถ้ามีจำเป็นต้องครบ 13 หลัก) <br> <ex>Example: 1234567890123 </ex>
 * @member {String} contactTaxId
 */
InlineDocumentResponseAllOfData.prototype['contactTaxId'] = undefined;

/**
 * สำนักงาน/สาขา
 * @member {String} contactBranch
 */
InlineDocumentResponseAllOfData.prototype['contactBranch'] = undefined;

/**
 * ชื่อผู้ติดต่อ
 * @member {String} contactPerson
 */
InlineDocumentResponseAllOfData.prototype['contactPerson'] = undefined;

/**
 * อีเมลผู้ติดต่อ <br> <ex>Example: contact@email.com</ex>
 * @member {String} contactEmail
 */
InlineDocumentResponseAllOfData.prototype['contactEmail'] = undefined;

/**
 * เบอร์มือถือผู้ติดต่อ <br> <ex>Example: 099-999-9999</ex>
 * @member {String} contactNumber
 */
InlineDocumentResponseAllOfData.prototype['contactNumber'] = undefined;

/**
 * รหัสไปรษณีย์ติดต่อ
 * @member {String} contactZipCode
 */
InlineDocumentResponseAllOfData.prototype['contactZipCode'] = undefined;

/**
 * ประผู้ติดต่อ <br> 1 = บุคคลธรรมดา <br> 3 = นิติบุคคล
 * @member {Number} contactGroup
 * @default 1
 */
InlineDocumentResponseAllOfData.prototype['contactGroup'] = 1;

/**
 * วันที่เอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
 * @member {Date} publishedOn
 */
InlineDocumentResponseAllOfData.prototype['publishedOn'] = undefined;

/**
 * รูปแบบเครดิต <br> 1 = เครดิต (วัน) <br> 3 = เงินสด  <br> 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)
 * @member {Number} creditType
 * @default 1
 */
InlineDocumentResponseAllOfData.prototype['creditType'] = 1;

/**
 * จำนวนวันที่ให้เครดิต <br> <ex>Example: 30</ex>
 * @member {Number} creditDays
 * @default 0
 */
InlineDocumentResponseAllOfData.prototype['creditDays'] = 0;

/**
 * วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
 * @member {Date} dueDate
 */
InlineDocumentResponseAllOfData.prototype['dueDate'] = undefined;

/**
 * ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย <br> <ex>Example: sale@email.com or Mr.Sale Shop</ex>
 * @member {String} salesName
 * @default 'อีเมล หรือ ชื่อผู้สร้างเอกสาร'
 */
InlineDocumentResponseAllOfData.prototype['salesName'] = 'อีเมล หรือ ชื่อผู้สร้างเอกสาร';

/**
 * ชื่อโปรเจค
 * @member {String} projectName
 */
InlineDocumentResponseAllOfData.prototype['projectName'] = undefined;

/**
 * เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง <br> <ex>Example: INV2020010001</ex>
 * @member {String} reference
 */
InlineDocumentResponseAllOfData.prototype['reference'] = undefined;

/**
 * มูลค่าเอกสารรวมภาษีแล้วหรือไม่
 * @member {Boolean} isVatInclusive
 * @default false
 */
InlineDocumentResponseAllOfData.prototype['isVatInclusive'] = false;

/**
 * รูปแบบส่วนลดในเอกสาร กรณีใช้รูปแบบ Inline ส่วนลด หรือ ภาษี แยกตามรายการสินค้า <br> สามารถเลือกรูปแบบส่วนลดได้ <br> 1 =  เปอร์เซ็นต์ <br> 3 = จำนวน (บาท)
 * @member {Number} discountType
 * @default 1
 */
InlineDocumentResponseAllOfData.prototype['discountType'] = 1;

/**
 * inline discount ใช้งานส่วนลด แยกตามรายการสินค้า
 * @member {Boolean} useInlineDiscount
 * @default true
 */
InlineDocumentResponseAllOfData.prototype['useInlineDiscount'] = true;

/**
 * inline vat ใช้งานส่วนลดและภาษี แยกตามรายการสินค้า
 * @member {Boolean} useInlineVat
 */
InlineDocumentResponseAllOfData.prototype['useInlineVat'] = undefined;

/**
 * เปิดใช้งานฟังก์ชั่น ปรับลดท้ายเอกสาร <br> (เฉพาะเอกสารใบกำกับภาษี / ใบเสร็จรับเงิน และ ใบเสร็จรับเงิน)
 * @member {Boolean} useReceiptDeduction
 * @default false
 */
InlineDocumentResponseAllOfData.prototype['useReceiptDeduction'] = false;

/**
 * มูลค่ารวมเป็นเงิน
 * @member {Number} subTotal
 * @default 0
 */
InlineDocumentResponseAllOfData.prototype['subTotal'] = 0;

/**
 * มูลค่าส่วนลดเป็นเปอร์เซ็นต์
 * @member {Number} discountPercentage
 * @default 0
 */
InlineDocumentResponseAllOfData.prototype['discountPercentage'] = 0;

/**
 * มูลค่าส่วนลดเป็นจำนวน (บาท)
 * @member {Number} discountAmount
 * @default 0
 */
InlineDocumentResponseAllOfData.prototype['discountAmount'] = 0;

/**
 * มูลค่าหลังหักส่วนลด
 * @member {Number} totalAfterDiscount
 */
InlineDocumentResponseAllOfData.prototype['totalAfterDiscount'] = undefined;

/**
 * มูลค่าไม่รวมภาษีมูลค่าเพิ่ม
 * @member {Number} totalWithoutVat
 */
InlineDocumentResponseAllOfData.prototype['totalWithoutVat'] = undefined;

/**
 * ยอดขายที่ยกเว้นภาษีมูลค่าเพิ่ม
 * @member {Number} exemptAmount
 * @default 0
 */
InlineDocumentResponseAllOfData.prototype['exemptAmount'] = 0;

/**
 * ยอดขายที่คิดภาษีมูลค่าเพิ่ม
 * @member {Number} vatableAmount
 * @default 0
 */
InlineDocumentResponseAllOfData.prototype['vatableAmount'] = 0;

/**
 * มูลค่าหลังหักส่วนลด มีภาษีมูลค่าเพิ่ม 7%
 * @member {Boolean} isVat
 * @default false
 */
InlineDocumentResponseAllOfData.prototype['isVat'] = false;

/**
 * ภาษีมูลค่าเพิ่ม
 * @member {Number} vatAmount
 */
InlineDocumentResponseAllOfData.prototype['vatAmount'] = undefined;

/**
 * จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว)
 * @member {Number} grandTotal
 */
InlineDocumentResponseAllOfData.prototype['grandTotal'] = undefined;

/**
 * แสดงหรือไม่แสดง หัก ณ ที่จ่ายท้ายเอกสาร
 * @member {Boolean} documentShowWithholdingTax
 * @default false
 */
InlineDocumentResponseAllOfData.prototype['documentShowWithholdingTax'] = false;

/**
 * ภาษี ณ ที่จ่าย (%)
 * @member {Number} documentWithholdingTaxPercentage
 * @default 0
 */
InlineDocumentResponseAllOfData.prototype['documentWithholdingTaxPercentage'] = 0;

/**
 * ประเภทรายการปรับลด <br> 1 = ส่วนลดพิเศษ <br> 3 = ค่านายหน้าและส่วนแบ่งการขาย <br> 5 = ค่าดำเนินการ <br> 7 = ปัดเศษ <br> (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)
 * @member {Number} documentDeductionType
 * @default 0
 */
InlineDocumentResponseAllOfData.prototype['documentDeductionType'] = 0;

/**
 * จำนวนเงินยอดรายการปรับลด <br> (เฉพาะเอกสารใบกำกับภาษี/ใบเสร็จรับเงิน)
 * @member {Number} documentDeductionAmount
 * @default 0
 */
InlineDocumentResponseAllOfData.prototype['documentDeductionAmount'] = 0;

/**
 * หมายเหตุเอกสาร
 * @member {String} remarks
 */
InlineDocumentResponseAllOfData.prototype['remarks'] = undefined;

/**
 * โน๊ตภายในบริษัท
 * @member {String} internalNotes
 */
InlineDocumentResponseAllOfData.prototype['internalNotes'] = undefined;

/**
 * ลายเซ็นอิเล็กทรอนิกส์และตรายาง
 * @member {Boolean} showSignatureOrStamp
 * @default true
 */
InlineDocumentResponseAllOfData.prototype['showSignatureOrStamp'] = true;

/**
 * รายการสินค้าใช้งานสำหรับเอกสาร Inline Document
 * @member {Array.<module:model/InlineProductItem>} items
 */
InlineDocumentResponseAllOfData.prototype['items'] = undefined;

/**
 * ข้อมูลเอกสารปลายทางที่อ้างอิง ถึง เอกสารฉบับนี้
 * @member {Array.<module:model/ReferencedToMe>} referencedToMe
 */
InlineDocumentResponseAllOfData.prototype['referencedToMe'] = undefined;

/**
 * เอกสารต้นทางที่อ้างอิง ถึง เอกสารฉบับนี้
 * @member {Array.<module:model/ReferencedByMe>} referencedByMe
 */
InlineDocumentResponseAllOfData.prototype['referencedByMe'] = undefined;

/**
 * @member {module:model/SimpleDocumentResponseAllOfDataPayments} payments
 */
InlineDocumentResponseAllOfData.prototype['payments'] = undefined;

/**
 * @member {module:model/SimpleDocumentResponseAllOfDataCompany} company
 */
InlineDocumentResponseAllOfData.prototype['company'] = undefined;

/**
 * เลขสถานะเอกสารฉบับนี้
 * @member {Number} status
 */
InlineDocumentResponseAllOfData.prototype['status'] = undefined;

/**
 * ชื่อสถานะเอกสารฉบับนี้
 * @member {Number} statusString
 */
InlineDocumentResponseAllOfData.prototype['statusString'] = undefined;

/**
 * เลขประเภทเอกสารฉบับนี้
 * @member {Number} documentType
 */
InlineDocumentResponseAllOfData.prototype['documentType'] = undefined;

/**
 * สามารถลบเอกสาร :<br> true = ลบได้ <br> false = ลบไม่ได้
 * @member {Boolean} allowDelete
 */
InlineDocumentResponseAllOfData.prototype['allowDelete'] = undefined;






export default InlineDocumentResponseAllOfData;

