/**
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UpdateExpenseDocument model module.
 * @module model/UpdateExpenseDocument
 * @version 2-oas3
 */
class UpdateExpenseDocument {
    /**
     * Constructs a new <code>UpdateExpenseDocument</code>.
     * @alias module:model/UpdateExpenseDocument
     * @param companyName {String} ชื่อบริษัท
     * @param companyAddress {String} ที่อยู่บริษัท
     * @param companyBranch {String} ชื่อ และ รหัสสาขา <br><ex>Example: สำนักงานใหญ่ 00000</ex>
     * @param contactName {String} ชื่อ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า
     * @param publishedOn {Date} วันที่เอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
     * @param subTotal {Number} มูลค่ารวมเป็นเงิน
     * @param totalAfterDiscount {Number} มูลค่าหลังหักส่วนลด
     * @param grandTotal {Number} จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว)
     */
    constructor(companyName, companyAddress, companyBranch, contactName, publishedOn, subTotal, totalAfterDiscount, grandTotal) { 
        
        UpdateExpenseDocument.initialize(this, companyName, companyAddress, companyBranch, contactName, publishedOn, subTotal, totalAfterDiscount, grandTotal);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, companyName, companyAddress, companyBranch, contactName, publishedOn, subTotal, totalAfterDiscount, grandTotal) { 
        obj['companyName'] = companyName;
        obj['companyAddress'] = companyAddress;
        obj['companyBranch'] = companyBranch;
        obj['contactName'] = contactName;
        obj['publishedOn'] = publishedOn;
        obj['subTotal'] = subTotal;
        obj['totalAfterDiscount'] = totalAfterDiscount;
        obj['grandTotal'] = grandTotal;
    }

    /**
     * Constructs a <code>UpdateExpenseDocument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateExpenseDocument} obj Optional instance to populate.
     * @return {module:model/UpdateExpenseDocument} The populated <code>UpdateExpenseDocument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateExpenseDocument();

            if (data.hasOwnProperty('companyName')) {
                obj['companyName'] = ApiClient.convertToType(data['companyName'], 'String');
            }
            if (data.hasOwnProperty('companyNameEn')) {
                obj['companyNameEn'] = ApiClient.convertToType(data['companyNameEn'], 'String');
            }
            if (data.hasOwnProperty('companyAddress')) {
                obj['companyAddress'] = ApiClient.convertToType(data['companyAddress'], 'String');
            }
            if (data.hasOwnProperty('companyAddressEn')) {
                obj['companyAddressEn'] = ApiClient.convertToType(data['companyAddressEn'], 'String');
            }
            if (data.hasOwnProperty('companyTaxId')) {
                obj['companyTaxId'] = ApiClient.convertToType(data['companyTaxId'], 'String');
            }
            if (data.hasOwnProperty('companyBranch')) {
                obj['companyBranch'] = ApiClient.convertToType(data['companyBranch'], 'String');
            }
            if (data.hasOwnProperty('companyBranchEn')) {
                obj['companyBranchEn'] = ApiClient.convertToType(data['companyBranchEn'], 'String');
            }
            if (data.hasOwnProperty('companyPhone')) {
                obj['companyPhone'] = ApiClient.convertToType(data['companyPhone'], 'String');
            }
            if (data.hasOwnProperty('companyMobile')) {
                obj['companyMobile'] = ApiClient.convertToType(data['companyMobile'], 'String');
            }
            if (data.hasOwnProperty('companyFax')) {
                obj['companyFax'] = ApiClient.convertToType(data['companyFax'], 'String');
            }
            if (data.hasOwnProperty('companyWebsite')) {
                obj['companyWebsite'] = ApiClient.convertToType(data['companyWebsite'], 'String');
            }
            if (data.hasOwnProperty('contactCode')) {
                obj['contactCode'] = ApiClient.convertToType(data['contactCode'], 'String');
            }
            if (data.hasOwnProperty('contactName')) {
                obj['contactName'] = ApiClient.convertToType(data['contactName'], 'String');
            }
            if (data.hasOwnProperty('contactAddress')) {
                obj['contactAddress'] = ApiClient.convertToType(data['contactAddress'], 'String');
            }
            if (data.hasOwnProperty('contactTaxId')) {
                obj['contactTaxId'] = ApiClient.convertToType(data['contactTaxId'], 'String');
            }
            if (data.hasOwnProperty('contactBranch')) {
                obj['contactBranch'] = ApiClient.convertToType(data['contactBranch'], 'String');
            }
            if (data.hasOwnProperty('contactPerson')) {
                obj['contactPerson'] = ApiClient.convertToType(data['contactPerson'], 'String');
            }
            if (data.hasOwnProperty('contactEmail')) {
                obj['contactEmail'] = ApiClient.convertToType(data['contactEmail'], 'String');
            }
            if (data.hasOwnProperty('contactNumber')) {
                obj['contactNumber'] = ApiClient.convertToType(data['contactNumber'], 'String');
            }
            if (data.hasOwnProperty('contactZipCode')) {
                obj['contactZipCode'] = ApiClient.convertToType(data['contactZipCode'], 'String');
            }
            if (data.hasOwnProperty('contactGroup')) {
                obj['contactGroup'] = ApiClient.convertToType(data['contactGroup'], 'Number');
            }
            if (data.hasOwnProperty('publishedOn')) {
                obj['publishedOn'] = ApiClient.convertToType(data['publishedOn'], 'Date');
            }
            if (data.hasOwnProperty('creditType')) {
                obj['creditType'] = ApiClient.convertToType(data['creditType'], 'Number');
            }
            if (data.hasOwnProperty('creditDays')) {
                obj['creditDays'] = ApiClient.convertToType(data['creditDays'], 'Number');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ApiClient.convertToType(data['dueDate'], 'Date');
            }
            if (data.hasOwnProperty('salesName')) {
                obj['salesName'] = ApiClient.convertToType(data['salesName'], 'String');
            }
            if (data.hasOwnProperty('projectName')) {
                obj['projectName'] = ApiClient.convertToType(data['projectName'], 'String');
            }
            if (data.hasOwnProperty('reference')) {
                obj['reference'] = ApiClient.convertToType(data['reference'], 'String');
            }
            if (data.hasOwnProperty('isVatInclusive')) {
                obj['isVatInclusive'] = ApiClient.convertToType(data['isVatInclusive'], 'Boolean');
            }
            if (data.hasOwnProperty('subTotal')) {
                obj['subTotal'] = ApiClient.convertToType(data['subTotal'], 'Number');
            }
            if (data.hasOwnProperty('discountPercentage')) {
                obj['discountPercentage'] = ApiClient.convertToType(data['discountPercentage'], 'Number');
            }
            if (data.hasOwnProperty('discountAmount')) {
                obj['discountAmount'] = ApiClient.convertToType(data['discountAmount'], 'Number');
            }
            if (data.hasOwnProperty('totalAfterDiscount')) {
                obj['totalAfterDiscount'] = ApiClient.convertToType(data['totalAfterDiscount'], 'Number');
            }
            if (data.hasOwnProperty('isVat')) {
                obj['isVat'] = ApiClient.convertToType(data['isVat'], 'Boolean');
            }
            if (data.hasOwnProperty('vatAmount')) {
                obj['vatAmount'] = ApiClient.convertToType(data['vatAmount'], 'Number');
            }
            if (data.hasOwnProperty('grandTotal')) {
                obj['grandTotal'] = ApiClient.convertToType(data['grandTotal'], 'Number');
            }
            if (data.hasOwnProperty('remarks')) {
                obj['remarks'] = ApiClient.convertToType(data['remarks'], 'String');
            }
            if (data.hasOwnProperty('internalNotes')) {
                obj['internalNotes'] = ApiClient.convertToType(data['internalNotes'], 'String');
            }
            if (data.hasOwnProperty('showSignatureOrStamp')) {
                obj['showSignatureOrStamp'] = ApiClient.convertToType(data['showSignatureOrStamp'], 'Boolean');
            }
            if (data.hasOwnProperty('expenseStructureType')) {
                obj['expenseStructureType'] = ApiClient.convertToType(data['expenseStructureType'], 'String');
            }
        }
        return obj;
    }


}

/**
 * ชื่อบริษัท
 * @member {String} companyName
 */
UpdateExpenseDocument.prototype['companyName'] = undefined;

/**
 * ชื่อบริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ)
 * @member {String} companyNameEn
 */
UpdateExpenseDocument.prototype['companyNameEn'] = undefined;

/**
 * ที่อยู่บริษัท
 * @member {String} companyAddress
 */
UpdateExpenseDocument.prototype['companyAddress'] = undefined;

/**
 * ที่อยู่บริษัท ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ)
 * @member {String} companyAddressEn
 */
UpdateExpenseDocument.prototype['companyAddressEn'] = undefined;

/**
 * เลขประจำตัวผู้เสียภาษี บริษัท <br><ex>Example: 0105558096348</ex>
 * @member {String} companyTaxId
 */
UpdateExpenseDocument.prototype['companyTaxId'] = undefined;

/**
 * ชื่อ และ รหัสสาขา <br><ex>Example: สำนักงานใหญ่ 00000</ex>
 * @member {String} companyBranch
 */
UpdateExpenseDocument.prototype['companyBranch'] = undefined;

/**
 * ชื่อ และ รหัสสาขา ภาษาอังกฤษ (แสดงเมื่อเลือกเอกสารเป็นภาษาอังกฤษ) <br><ex>Example: Head Office 00000</ex>
 * @member {String} companyBranchEn
 */
UpdateExpenseDocument.prototype['companyBranchEn'] = undefined;

/**
 * เบอร์โทรสำนักงาน <br><ex>Example: 02-999-9999</ex>
 * @member {String} companyPhone
 */
UpdateExpenseDocument.prototype['companyPhone'] = undefined;

/**
 * เบอร์โทรศัพท์มือถือ <br><ex>Example: 099-999-9999</ex>
 * @member {String} companyMobile
 */
UpdateExpenseDocument.prototype['companyMobile'] = undefined;

/**
 * เบอร์โทรสาร <br><ex>Example: 02-999-9999 ต่อ 1</ex>
 * @member {String} companyFax
 */
UpdateExpenseDocument.prototype['companyFax'] = undefined;

/**
 * เว็บไซต์ <br><ex>Example: www.flowaccount.com</ex>
 * @member {String} companyWebsite
 */
UpdateExpenseDocument.prototype['companyWebsite'] = undefined;

/**
 * รหัส ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า
 * @member {String} contactCode
 */
UpdateExpenseDocument.prototype['contactCode'] = undefined;

/**
 * ชื่อ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า
 * @member {String} contactName
 */
UpdateExpenseDocument.prototype['contactName'] = undefined;

/**
 * ที่อยู่ ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า
 * @member {String} contactAddress
 */
UpdateExpenseDocument.prototype['contactAddress'] = undefined;

/**
 * เลขประจำตัวผู้เสียภาษี ผู้จำหน่าย หรือ ผู้จำหน่าย/ลูกค้า <br> (ถ้ามีจำเป็นต้องครบ 13 หลัก) <br> <ex>Example: 1234567890123 </ex>
 * @member {String} contactTaxId
 */
UpdateExpenseDocument.prototype['contactTaxId'] = undefined;

/**
 * สำนักงาน/สาขา
 * @member {String} contactBranch
 */
UpdateExpenseDocument.prototype['contactBranch'] = undefined;

/**
 * ชื่อผู้ติดต่อ
 * @member {String} contactPerson
 */
UpdateExpenseDocument.prototype['contactPerson'] = undefined;

/**
 * อีเมลผู้ติดต่อ <br> <ex>Example: supplier@email.com</ex>
 * @member {String} contactEmail
 */
UpdateExpenseDocument.prototype['contactEmail'] = undefined;

/**
 * เบอร์มือถือผู้ติดต่อ <br> <ex>Example: 099-999-9999</ex>
 * @member {String} contactNumber
 */
UpdateExpenseDocument.prototype['contactNumber'] = undefined;

/**
 * รหัสไปรษณีย์ติดต่อ
 * @member {String} contactZipCode
 */
UpdateExpenseDocument.prototype['contactZipCode'] = undefined;

/**
 * ประผู้ติดต่อ <br> 1 = บุคคลธรรมดา <br> 3 = นิติบุคคล
 * @member {Number} contactGroup
 * @default 1
 */
UpdateExpenseDocument.prototype['contactGroup'] = 1;

/**
 * วันที่เอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
 * @member {Date} publishedOn
 */
UpdateExpenseDocument.prototype['publishedOn'] = undefined;

/**
 * รูปแบบเครดิต <br> 1 = เครดิต (วัน) <br> 3 = เงินสด  <br> 5 = เครดิต (ไม่แสดงวันที่ครบกำหนด)
 * @member {Number} creditType
 * @default 1
 */
UpdateExpenseDocument.prototype['creditType'] = 1;

/**
 * จำนวนวันที่ให้เครดิต <br> <ex>Example: 30</ex>
 * @member {Number} creditDays
 * @default 0
 */
UpdateExpenseDocument.prototype['creditDays'] = 0;

/**
 * วันครบกำหนดเอกสาร รูปแบบ yyyy-MM-dd <br> <ex>Example: 2020-01-01</ex>
 * @member {Date} dueDate
 */
UpdateExpenseDocument.prototype['dueDate'] = undefined;

/**
 * ชื่อผู้สร้างเอกสาร หรือ ชื่อพนักงานขาย <br> <ex>Example: sale@email.com or Mr.Sale Shop</ex>
 * @member {String} salesName
 * @default 'อีเมล หรือ ชื่อผู้สร้างเอกสาร'
 */
UpdateExpenseDocument.prototype['salesName'] = 'อีเมล หรือ ชื่อผู้สร้างเอกสาร';

/**
 * ชื่อโปรเจค
 * @member {String} projectName
 */
UpdateExpenseDocument.prototype['projectName'] = undefined;

/**
 * เลขที่อ้างอิง หรือ เลขที่เอกสารที่เกี่ยวข้อง <br> <ex>Example: INV2020010001</ex>
 * @member {String} reference
 */
UpdateExpenseDocument.prototype['reference'] = undefined;

/**
 * มูลค่าเอกสารรวมภาษีแล้วหรือไม่
 * @member {Boolean} isVatInclusive
 * @default false
 */
UpdateExpenseDocument.prototype['isVatInclusive'] = false;

/**
 * มูลค่ารวมเป็นเงิน
 * @member {Number} subTotal
 * @default 0
 */
UpdateExpenseDocument.prototype['subTotal'] = 0;

/**
 * มูลค่าส่วนลดเป็นเปอร์เซ็นต์
 * @member {Number} discountPercentage
 * @default 0
 */
UpdateExpenseDocument.prototype['discountPercentage'] = 0;

/**
 * มูลค่าส่วนลดเป็นจำนวน (บาท)
 * @member {Number} discountAmount
 * @default 0
 */
UpdateExpenseDocument.prototype['discountAmount'] = 0;

/**
 * มูลค่าหลังหักส่วนลด
 * @member {Number} totalAfterDiscount
 */
UpdateExpenseDocument.prototype['totalAfterDiscount'] = undefined;

/**
 * มูลค่าหลังหักส่วนลด มีีภาษีมูลค่าเพิ่ม 7%
 * @member {Boolean} isVat
 * @default false
 */
UpdateExpenseDocument.prototype['isVat'] = false;

/**
 * ภาษีมูลค่าเพิ่ม
 * @member {Number} vatAmount
 */
UpdateExpenseDocument.prototype['vatAmount'] = undefined;

/**
 * จำนวนเงินรวมทั้งสิ้น (รวมภาษีมูลค่าเพิ่ม 7% แล้ว)
 * @member {Number} grandTotal
 */
UpdateExpenseDocument.prototype['grandTotal'] = undefined;

/**
 * หมายเหตุเอกสาร
 * @member {String} remarks
 */
UpdateExpenseDocument.prototype['remarks'] = undefined;

/**
 * โน๊ตภายในบริษัท
 * @member {String} internalNotes
 */
UpdateExpenseDocument.prototype['internalNotes'] = undefined;

/**
 * ลายเซ็นอิเล็กทรอนิกส์และตรายาง
 * @member {Boolean} showSignatureOrStamp
 * @default true
 */
UpdateExpenseDocument.prototype['showSignatureOrStamp'] = true;

/**
 * @member {String} expenseStructureType
 */
UpdateExpenseDocument.prototype['expenseStructureType'] = undefined;






export default UpdateExpenseDocument;

