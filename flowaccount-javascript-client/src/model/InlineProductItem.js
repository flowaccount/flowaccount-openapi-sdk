/**
 * FlowAccount Open API
 * # Introduction  **Servers Production**    <site>Site:</site> https://www.flowaccount.com    <site>Api url:</site> https://openapi.flowaccount.com/v1    **Beta test**   <site>Site:</site> http://sandbox-new.flowaccount.com/    <site>Api url:</site> https://openapi.flowaccount.com/test    **PostMan Collection**   <site>Link:</site> https://www.getpostman.com/collections/01e7c68d7093e2092a64
 *
 * The version of the OpenAPI document: 2-oas3
 * Contact: developer_support@flowaccount.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InlineProductItemAllOf from './InlineProductItemAllOf';
import ProductItem from './ProductItem';

/**
 * The InlineProductItem model module.
 * @module model/InlineProductItem
 * @version 2-oas3
 */
class InlineProductItem {
    /**
     * Constructs a new <code>InlineProductItem</code>.
     * @alias module:model/InlineProductItem
     * @implements module:model/ProductItem
     * @implements module:model/InlineProductItemAllOf
     * @param name {String} ชื่อสินค้า
     * @param quantity {Number} จำนวนสินค้า
     * @param pricePerUnit {Number} ราคาสินค้าต่อหน่วย
     * @param total {Number} ราคารวมสินค้า
     */
    constructor(name, quantity, pricePerUnit, total) { 
        ProductItem.initialize(this, name, quantity, pricePerUnit, total);InlineProductItemAllOf.initialize(this);
        InlineProductItem.initialize(this, name, quantity, pricePerUnit, total);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, quantity, pricePerUnit, total) { 
        obj['name'] = name;
        obj['quantity'] = quantity;
        obj['pricePerUnit'] = pricePerUnit;
        obj['total'] = total;
    }

    /**
     * Constructs a <code>InlineProductItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InlineProductItem} obj Optional instance to populate.
     * @return {module:model/InlineProductItem} The populated <code>InlineProductItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InlineProductItem();
            ProductItem.constructFromObject(data, obj);
            InlineProductItemAllOf.constructFromObject(data, obj);

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('unitName')) {
                obj['unitName'] = ApiClient.convertToType(data['unitName'], 'String');
            }
            if (data.hasOwnProperty('pricePerUnit')) {
                obj['pricePerUnit'] = ApiClient.convertToType(data['pricePerUnit'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('sellChartOfAccountCode')) {
                obj['sellChartOfAccountCode'] = ApiClient.convertToType(data['sellChartOfAccountCode'], 'String');
            }
            if (data.hasOwnProperty('buyChartOfAccountCode')) {
                obj['buyChartOfAccountCode'] = ApiClient.convertToType(data['buyChartOfAccountCode'], 'String');
            }
            if (data.hasOwnProperty('discountAmount')) {
                obj['discountAmount'] = ApiClient.convertToType(data['discountAmount'], 'Number');
            }
            if (data.hasOwnProperty('vatRate')) {
                obj['vatRate'] = ApiClient.convertToType(data['vatRate'], 'Number');
            }
        }
        return obj;
    }


}

/**
 * ประเภทสินค้า <br> 1 = บริการ (service) <br> 3 = สินค้าไม่นับสต๊อก (non inventory) <br> 5 = สินค้านับสต๊อก (inventory)
 * @member {Number} type
 * @default 1
 */
InlineProductItem.prototype['type'] = 1;

/**
 * ชื่อสินค้า
 * @member {String} name
 */
InlineProductItem.prototype['name'] = undefined;

/**
 * รายละเอียดสินค้า
 * @member {String} description
 */
InlineProductItem.prototype['description'] = undefined;

/**
 * จำนวนสินค้า
 * @member {Number} quantity
 */
InlineProductItem.prototype['quantity'] = undefined;

/**
 * หน่วยสินค้า
 * @member {String} unitName
 */
InlineProductItem.prototype['unitName'] = undefined;

/**
 * ราคาสินค้าต่อหน่วย
 * @member {Number} pricePerUnit
 */
InlineProductItem.prototype['pricePerUnit'] = undefined;

/**
 * ราคารวมสินค้า
 * @member {Number} total
 */
InlineProductItem.prototype['total'] = undefined;

/**
 * เลือกลงบันทึกบัญชีรายได้ สำหรับเอกสารฝั่งขาย <br> <ex>Example: 41111</ex>
 * @member {String} sellChartOfAccountCode
 */
InlineProductItem.prototype['sellChartOfAccountCode'] = undefined;

/**
 * เลือกลงบันทึกบัญชีค่าใช้จ่าย สำหรับเอกสารฝั่งซื้อ <br> <ex>Example: 51111.02</ex>
 * @member {String} buyChartOfAccountCode
 */
InlineProductItem.prototype['buyChartOfAccountCode'] = undefined;

/**
 * จำนวนส่วนลดสินค้า
 * @member {Number} discountAmount
 * @default 0
 */
InlineProductItem.prototype['discountAmount'] = 0;

/**
 * รูปแบบภาษี <br> 7 = ภาษี 7% <br> 0 = ภาษี 0% <br> -1 = ยกเว้นภาษี
 * @member {Number} vatRate
 * @default 7
 */
InlineProductItem.prototype['vatRate'] = 7;


// Implement ProductItem interface:
/**
 * ประเภทสินค้า <br> 1 = บริการ (service) <br> 3 = สินค้าไม่นับสต๊อก (non inventory) <br> 5 = สินค้านับสต๊อก (inventory)
 * @member {Number} type
 * @default 1
 */
ProductItem.prototype['type'] = 1;
/**
 * ชื่อสินค้า
 * @member {String} name
 */
ProductItem.prototype['name'] = undefined;
/**
 * รายละเอียดสินค้า
 * @member {String} description
 */
ProductItem.prototype['description'] = undefined;
/**
 * จำนวนสินค้า
 * @member {Number} quantity
 */
ProductItem.prototype['quantity'] = undefined;
/**
 * หน่วยสินค้า
 * @member {String} unitName
 */
ProductItem.prototype['unitName'] = undefined;
/**
 * ราคาสินค้าต่อหน่วย
 * @member {Number} pricePerUnit
 */
ProductItem.prototype['pricePerUnit'] = undefined;
/**
 * ราคารวมสินค้า
 * @member {Number} total
 */
ProductItem.prototype['total'] = undefined;
/**
 * เลือกลงบันทึกบัญชีรายได้ สำหรับเอกสารฝั่งขาย <br> <ex>Example: 41111</ex>
 * @member {String} sellChartOfAccountCode
 */
ProductItem.prototype['sellChartOfAccountCode'] = undefined;
/**
 * เลือกลงบันทึกบัญชีค่าใช้จ่าย สำหรับเอกสารฝั่งซื้อ <br> <ex>Example: 51111.02</ex>
 * @member {String} buyChartOfAccountCode
 */
ProductItem.prototype['buyChartOfAccountCode'] = undefined;
// Implement InlineProductItemAllOf interface:
/**
 * จำนวนส่วนลดสินค้า
 * @member {Number} discountAmount
 * @default 0
 */
InlineProductItemAllOf.prototype['discountAmount'] = 0;
/**
 * รูปแบบภาษี <br> 7 = ภาษี 7% <br> 0 = ภาษี 0% <br> -1 = ยกเว้นภาษี
 * @member {Number} vatRate
 * @default 7
 */
InlineProductItemAllOf.prototype['vatRate'] = 7;




export default InlineProductItem;

